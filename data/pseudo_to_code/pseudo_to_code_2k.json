[{"problem_id": "815A", "pseudocode_lines": ["mod = static integer = 1e9 + 7", "define the main function", "    n, m are integers, row, col are integer arrays both of size 105, table is an integer array of sizes 105 and 105, minn and flag are integers", "    while read n, m", "        tmp = integer = 0", "        call memset with row, 0, call sizeof with row", "        call memset with col, 0, call sizeof with col", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive, read table[i][j]", "        end of the block", "        if m is at least n", "            for i = 1 to n inclusive", "                set min to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set row[i] to minn", "                    for j = 1 to m inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "        else", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for i = 1 to n inclusive", "                set minn to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set row[i] to minn", "                    iterate m times, subtract minn from table[i][j]", "                end of the block", "            end of the block", "        end of the block", "        set flag to 1", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive", "                if table[i][j]", "                    set flag to 0", "                    break", "                end of the block", "        if flag", "            print tmp", "            for i = 1 to n inclusive", "                for k = 1 to row[i] inclusive, print \"row \", i", "            end of the block", "            for j = 1 to m inclusive", "                for j = 1 to col[j] inclusive, print \"col \", j", "            end of the block", "        else", "            print -1", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["static int mod = 1e9 + 7;", "int main() {", "    int n, m, row[105], col[105], table[105][105], minn, flag;", "    while (cin >> n >> m) {", "        int tmp = 0;", "        memset(row, 0, sizeof(row));", "        memset(col, 0, sizeof(col));", "        for (int i = 1; i <= n; i++) {", "            for (int j = 1; j <= m; j++) cin >> table[i][j];", "        }", "        if (m >= n) {", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "        } else {", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "        }", "        flag = 1;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= m; j++)", "                if (table[i][j]) {", "                    flag = 0;", "                    break;", "                }", "        if (flag) {", "            cout << tmp << '\\n';", "            for (int i = 1; i <= n; i++) {", "                for (int k = 1; k <= row[i]; k++) cout << \"row \" << i << '\\n';", "            }", "            for (int j = 1; j <= m; j++) {", "                for (int k = 1; k <= col[j]; k++) cout << \"col \" << j << '\\n';", "            }", "        } else", "            cout << \"-1\\n\";", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["len=1005", "mod=998244353", "seed=131", "r,c=array of len int", "dd=array of len by len int", "num,n,m", "flag=int", "function solve1 (no args, no return value)", "    for i=1 to n inclusive", "        minx=10^9", "        for j=1 to m inclusive minx=min(minx,dd[i][j])", "        r[i]=minx", "        if r[i] is not 0 add minx to num", "        for j=1 to m inclusive subtract minx from dd[i][j]", "    end of the block", "    for j=1 to m inclusive", "        minx=10^9", "        for i=1 to n inclusive minx=min(minx,dd[i][j])", "        c[j]=minx", "        if minx is not 0 add minx to num", "        for i=1 to n inclusive", "            subtract minx from dd[i][j]", "            if dd[i][j] flag=1", "        end of the block", "    end of the block", "end of the block", "function solve1 (no args, no return value)", "    for j=1 to m inclusive", "        minx=10^9", "        for i=1 to n inclusive minx=min(minx,dd[i][j])", "        c[j]=minx", "        if minx is not 0 add minx to num", "        for i=1 to n inclusive subtract minx from dd[i][j]", "    end of the block", "    for i=1 to n inclusive", "        minx=10^9", "        for j=1 to m inclusive minx=min(minx,dd[i][j])", "        r[i]=minx", "        if r[i] is not 0 add minx to num", "        for j=1 to m inclusive", "            subtract minx from dd[i][j]", "            if dd[i][j] flag=1", "        end of the block", "    end of the block", "end of the block", "define the main function", "    read n,m", "    for i=1 to n inclusive", "        for j=1 to m inclusive read dd[i][j]", "    if n<=m", "        solve1()", "    else", "        solve2()", "    if flag print -1 and return 0", "    print num", "    for i=1 to n inclusive", "        for j=0 to r[i] exclusive print \"row \", i", "    end of the block", "    for i=1 to m inclusive", "        for j=0 to c[i] exclusive print \"col \", i", "end of the block"], "code_lines": ["const int len = 1e3 + 5;", "const long long mod = 998244353;", "const ulong long seed = 131;", "int r[len], c[len];", "int dd[len][len];", "int num, n, m;", "int flag;", "void solve1() {", "    for (int i = 1; i <= n; ++i) {", "        int minx = 1e9;", "        for (int j = 1; j <= m; ++j) minx = min(minx, dd[i][j]);", "        r[i] = minx;", "        if (r[i] != 0) num += minx;", "        for (int j = 1; j <= m; ++j) dd[i][j] -= minx;", "    }", "    for (int j = 1; j <= m; ++j) {", "        int minx = 1e9;", "        for (int i = 1; i <= n; ++i) minx = min(minx, dd[i][j]);", "        c[j] = minx;", "        if (minx != 0) num += minx;", "        for (int i = 1; i <= n; ++i) {", "            dd[i][j] -= minx;", "            if (dd[i][j]) flag = 1;", "        }", "    }", "}", "void solve2() {", "    for (int j = 1; j <= m; ++j) {", "        int minx = 1e9;", "        for (int i = 1; i <= n; ++i) minx = min(minx, dd[i][j]);", "        c[j] = minx;", "        if (minx != 0) num += minx;", "        for (int i = 1; i <= n; ++i) dd[i][j] -= minx;", "    }", "    for (int i = 1; i <= n; ++i) {", "        int minx = 1e9;", "        for (int j = 1; j <= m; ++j) minx = min(minx, dd[i][j]);", "        r[i] = minx;", "        if (r[i] != 0) num += minx;", "        for (int j = 1; j <= m; ++j) {", "            dd[i][j] -= minx;", "            if (dd[i][j]) flag = 1;", "        }", "    }", "}", "int main() {", "    cin >> n >> m;", "    for (int i = 1; i <= n; ++i)", "        for (int j = 1; j <= m; ++j) cin >> dd[i][j];", "    if (n <= m)", "        solve1();", "    else", "        solve2();", "    if (flag) return puts(\"-1\"), 0;", "    cout << num << endl;", "    for (int i = 1; i <= n; ++i) {", "        for (int j = 0; j < r[i]; ++j) cout << \"row \" << i << endl;", "    }", "    for (int i = 1; i <= m; ++i)", "        for (int j = 0; j < c[i]; ++j) cout << \"col \" << i << endl;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["make static int mod = 1e9 + 7", "define the main function", "    make int n, m, array row of size 105, array col of size 105, multidimensional array table of size 105x105, minn, and flag", "    while read n and m", "        set flag to 0", "        set row elements to 0", "        set col elements to 0", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive, read table[i][j]", "        end of the block", "        if m greater than or equal to n", "            for i = 1 to n inclusive", "                set minn to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    set row[i] to minn", "                    for j = 1 to m inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] less than minn, set minn to table[i]j]", "                end of the block", "                if minn", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "        else", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for i = 1 to n inclusive", "                set minn to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    set row[i] to minn", "                    for j = 1 to m inclusive, decrease table[i][j] by minn", "                end of the block", "            end of the block", "        end of the block", "        set flag to 1", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive", "                if table[i][j]", "                    set flag to 0", "                    break", "                end of the block", "            end of the block", "        if flag", "            make int tmp = 0", "            for i = 1 to n inclusive, increase tmp by row[i]", "            for j = 1 to m inclusive, increase tmp by col[j]", "            print tmp", "            for i = 1 to n inclusive", "                for k = 1 to row[i] inclusive, print \"row \" i", "            end of the block", "            for j = 1 to m inclusive", "                for k = 1 to col[j] inclusive, print \"col \" j", "            end of the block", "        else", "            print \"-1\\n\"", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["static int mod = 1e9 + 7;", "int main() {", "    int n, m, row[105], col[105], table[105][105], minn, flag;", "    while (cin >> n >> m) {", "        flag = 0;", "        memset(row, 0, sizeof(row));", "        memset(col, 0, sizeof(col));", "        for (int i = 1; i <= n; i++) {", "            for (int j = 1; j <= m; j++) cin >> table[i][j];", "        }", "        if (m >= n) {", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "        } else {", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "        }", "        flag = 1;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= m; j++) {", "                if (table[i][j]) {", "                    flag = 0;", "                    break;", "                }", "            }", "        if (flag) {", "            int tmp = 0;", "            for (int i = 1; i <= n; i++) { tmp += row[i]; }", "            for (int j = 1; j <= m; j++) { tmp += col[j]; }", "            cout << tmp << '\\n';", "            for (int i = 1; i <= n; i++) {", "                for (int k = 1; k <= row[i]; k++) cout << \"row \" << i << '\\n';", "            }", "            for (int j = 1; j <= m; j++) {", "                for (int k = 1; k <= col[j]; k++) cout << \"col \" << j << '\\n';", "            }", "        } else", "            cout << \"-1\\n\";", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "row 1"]], [["100 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["let INF be const integer with INF = 0x3f3f3f3f", "define the main function", "    let n, m be integers", "    read n, m", "    let ans, ar be array of size 105 by 105 with ans = ar = {0}", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            read ans[i][j]", "            set ar[i][j] to ans[i][j]", "        end of the block", "    let mins, sum be integers with mins = INF and sum = 0", "    let temp be integer array of size 6 by 200 with temp = {0}", "    for i = 1 to n inclusive", "        set mins to INF", "        for j = 1 to m inclusive, set mins to min of mins, ans[i][j]", "        set temp[1][i] to mins", "        for j = 1 to m inclusive, set ans[i][j] to ans[i][j] - mins", "    end of the block", "    for j = 1 to m inclusive", "        set mins to INF", "        for i = 1 to n inclusive, set mins to min of mins, ans[i][j]", "        set temp[2][j] to mins", "        for i = 1 to n inclusive, decrement ans[i][j] by mins", "    end of the block", "    for j = 1 to m inclusive", "        set mins to INF", "        for i = 1 to n inclusive, set mins to min of mins, ar[i][j]", "        set temp[3][j] to mins", "        for i = 1 to n inclusive, set ar[i][j] to ar[i][j] - mins", "    end of the block", "    for i = 1 to n inclusive", "        set mins to iNF", "        for j = 1 to m inclusive, mins = min of mins, ar[i][j]", "        temp[4][i] = mins", "        for j = 1 to m inclusive, decrement ar[i][j] by mins", "    end of the block", "    let flag1, flag2 be integers with flag1 = flag2 = 0", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if ans[i][j] != 0", "                set flag1 to 1", "                break", "            end of the block", "        end of the block", "    end of the block", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if ar[i][j] != 0", "                set flag2 to 0", "                break", "            end of the block", "        end of the block", "    end of the block", "    if flag1 == 1 and flag2 == 1", "        print -1", "    else if flag1 == 0 and flag2 == 0", "        sum1 = sum2 = integer = 0", "        for i = 1 to n inclusive", "            increment sum1 by temp[1][i]", "            increment sum2 by temp[4][i]", "        end of the block", "        for j = 1 to m inclusive", "            increment sum1 by temp[2][j]", "            increment sum2 by temp[3][j]", "        end of the block", "        if sum1 > sum2", "            print sum2", "            for i = 1 to n inclusive", "                for j = 1 to temp[4][i], print row, i", "            for j = 1 to m inclusive", "                for i = 1 to temp[3][j] inclusive, print col, j", "        else", "            print sum1", "            for i = 1 to n inclusive", "                for j = 1 to temp[1][i], print \"row \", i", "            for j = 1 to m inclusive", "                for i = 1 to temp[2][j] inclusive, print \"col \", j", "        end of the block", "    else if flag1 == 1", "        let sum2 be integer with sum2 = 0", "        for i = 1 to n inclusive, increment sum2 by temp[4][i]", "        for j = 1 to n inclusive, increment sum2 by temp[3][j]", "        print sum2", "        for i = 1 to n inclusive", "            for j = 1 to temp[4][i] inclusive, print \"row \", i", "        for j = 1 to m inclusive", "            for i = 1 to temp[3][j] inclusive, print \"col \", j", "    else if flag2 == 1", "        sum1 = int = 0", "        for i = 1 to n inclusive, increment sum1 by temp[4][i]", "        for j = 1 to n inclusive, increment sum1 by temp[3][j]", "        print sum1", "        for i = 1 to n inclusive", "            for j = 1 to temp[1][i] inclusive, print \"row \", i", "        for j = 1 to m inclusive", "            for i = 1 to temp[2][j] inclusive, print \"col \", j", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int INF = 0x3f3f3f3f;", "int main() {", "    int n, m;", "    cin >> n >> m;", "    int ans[105][105] = {0}, ar[105][105] = {0};", "    for (int i = 1; i <= n; i++)", "        for (int j = 1; j <= m; j++) {", "            cin >> ans[i][j];", "            ar[i][j] = ans[i][j];", "        }", "    int mins = INF, sum = 0;", "    int temp[6][200] = {0};", "    for (int i = 1; i <= n; i++) {", "        mins = INF;", "        for (int j = 1; j <= m; j++) mins = min(mins, ans[i][j]);", "        temp[1][i] = mins;", "        for (int j = 1; j <= m; j++) ans[i][j] -= mins;", "    }", "    for (int j = 1; j <= m; j++) {", "        mins = INF;", "        for (int i = 1; i <= n; i++) mins = min(mins, ans[i][j]);", "        temp[2][j] = mins;", "        for (int i = 1; i <= n; i++) ans[i][j] -= mins;", "    }", "    for (int j = 1; j <= m; j++) {", "        mins = INF;", "        for (int i = 1; i <= n; i++) mins = min(mins, ar[i][j]);", "        temp[3][j] = mins;", "        for (int i = 1; i <= n; i++) ar[i][j] -= mins;", "    }", "    for (int i = 1; i <= n; i++) {", "        mins = INF;", "        for (int j = 1; j <= m; j++) mins = min(mins, ar[i][j]);", "        temp[4][i] = mins;", "        for (int j = 1; j <= m; j++) ar[i][j] -= mins;", "    }", "    int flag1 = 0, flag2 = 0;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            if (ans[i][j] != 0) {", "                flag1 = 1;", "                break;", "            }", "        }", "    }", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            if (ar[i][j] != 0) {", "                flag2 = 1;", "                break;", "            }", "        }", "    }", "    if (flag1 == 1 && flag2 == 1)", "        cout << -1 << endl;", "    else if (flag1 == 0 && flag2 == 0) {", "        int sum1 = 0, sum2 = 0;", "        for (int i = 1; i <= n; i++) {", "            sum1 += temp[1][i];", "            sum2 += temp[4][i];", "        }", "        for (int j = 1; j <= m; j++) {", "            sum1 += temp[2][j];", "            sum2 += temp[3][j];", "        }", "        if (sum1 > sum2) {", "            cout << sum2 << endl;", "            for (int i = 1; i <= n; i++)", "                for (int j = 1; j <= temp[4][i]; j++) cout << \"row \" << i << endl;", "            for (int j = 1; j <= m; j++)", "                for (int i = 1; i <= temp[3][j]; i++) cout << \"col \" << j << endl;", "        } else {", "            cout << sum1 << endl;", "            for (int i = 1; i <= n; i++)", "                for (int j = 1; j <= temp[1][i]; j++) cout << \"row \" << i << endl;", "            for (int j = 1; j <= m; j++)", "                for (int i = 1; i <= temp[2][j]; i++) cout << \"col \" << j << endl;", "        }", "    } else if (flag1 == 1) {", "        int sum2 = 0;", "        for (int i = 1; i <= n; i++) { sum2 += temp[4][i]; }", "        for (int j = 1; j <= m; j++) { sum2 += temp[3][j]; }", "        cout << sum2 << endl;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= temp[4][i]; j++) cout << \"row \" << i << endl;", "        for (int j = 1; j <= m; j++)", "            for (int i = 1; i <= temp[3][j]; i++) cout << \"col \" << j << endl;", "    } else if (flag2 == 1) {", "        int sum1 = 0;", "        for (int i = 1; i <= n; i++) { sum1 += temp[4][i]; }", "        for (int j = 1; j <= m; j++) { sum1 += temp[3][j]; }", "        cout << sum1 << endl;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= temp[1][i]; j++) cout << \"row \" << i << endl;", "        for (int j = 1; j <= m; j++)", "            for (int i = 1; i <= temp[2][j]; i++) cout << \"col \" << j << endl;", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["make static int mod = 1e9 + 7", "define the main function", "    make int n, m, array row of size 105, array col of size 105, multidimensional array table of size 105x105, minn, and flag", "    while read n and m", "        set flag to 0", "        set row elements to 0", "        set col elements to 0", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive, read table[i][j]", "        end of the block", "        if m greater than or equal to n", "            for i = 1 to n inclusive", "                set minn to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    set row[i] to minn", "                    for j = 1 to m inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] less than minn, set minn to table[i]j]", "                end of the block", "                if minn", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "        else", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for i = 1 to n inclusive", "                set minn to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    set row[i] to minn", "                    for j = 1 to m inclusive, decrease table[i][j] by minn", "                end of the block", "            end of the block", "        end of the block", "        set flag to 1", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive", "                if table[i][j]", "                    set flag to 0", "                    break", "                end of the block", "            end of the block", "        if flag", "            make int tmp = 0", "            for i = 1 to n inclusive, increase tmp by row[i]", "            for j = 1 to m inclusive, increase tmp by col[j]", "            print tmp", "            for i = 1 to n inclusive", "                for k = 1 to row[i] inclusive, print \"row \" i", "            end of the block", "            for j = 1 to m inclusive", "                for k = 1 to col[j] inclusive, print \"col \" j", "            end of the block", "        else", "            print \"-1\\n\"", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["static int mod = 1e9 + 7;", "int main() {", "    int n, m, row[105], col[105], table[105][105], minn, flag;", "    while (cin >> n >> m) {", "        flag = 0;", "        memset(row, 0, sizeof(row));", "        memset(col, 0, sizeof(col));", "        for (int i = 1; i <= n; i++) {", "            for (int j = 1; j <= m; j++) cin >> table[i][j];", "        }", "        if (m >= n) {", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "        } else {", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "        }", "        flag = 1;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= m; j++) {", "                if (table[i][j]) {", "                    flag = 0;", "                    break;", "                }", "            }", "        if (flag) {", "            int tmp = 0;", "            for (int i = 1; i <= n; i++) { tmp += row[i]; }", "            for (int j = 1; j <= m; j++) { tmp += col[j]; }", "            cout << tmp << '\\n';", "            for (int i = 1; i <= n; i++) {", "                for (int k = 1; k <= row[i]; k++) cout << \"row \" << i << '\\n';", "            }", "            for (int j = 1; j <= m; j++) {", "                for (int k = 1; k <= col[j]; k++) cout << \"col \" << j << '\\n';", "            }", "        } else", "            cout << \"-1\\n\";", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["declare constant integer M = 2e5 + 5", "declare integer arrays G size 200 by 200, T size 200 by 200", "define the main function", "    declare integers n, m, i, j", "    read n, m", "    declare boolean f = 0", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            read G[i][j]", "            let T[i][j] be G[i][j]", "        end of the block", "    declare integer vectors r,, c", "    for i = 1 to n inclusive", "        declare integer mn = 1000", "        for j = 1 to m inclusive, let mn be minimum of ( mn and G[i][j] )", "        for j = 1 to m inclusive, decrement G[i][j] by mn", "        for j = 1 to mn inclusive, add i to end of r", "    end of the block", "    for i = 1 to m inclusive", "        declare integer mn = 1000", "        for j = 1 to n inclusive, let mn be minimum of ( mn and G[j][i] )", "        for j = 1 to n inclusive, decrement G[j][i] by mn", "        for j = 1 to mn inclusive, add i to end of c", "    end of the block", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if G[i][j] is true", "                print \"-1\\n\"", "                return to indicate successful execution", "            end of the block", "            let G[i][j] be T[i][j]", "        end of the block", "    declare integer vectors r1, c1", "    for i = 1 to m inclusive", "        declare integer mn = 1000", "        for j = 1 to n inclusive, let mn be minimum of ( mn and G[j][i] )", "        for j = 1 to n inclusive, decrement G[j][i] by mn", "        for j = 1 to mn inclusive, add i to end of c1", "    end of the block", "    for i = 1 to n inclusive", "        declare integer mn = 1000", "        for j = 1 to n inclusive, let mn be minimum of ( mn and G[j][i] )", "        for j = 1 to n inclusive, decrement G[j][i] by mn", "        for j = 1 to mn inclusive, add i to end of r1", "    end of the block", "    if size of r + size of c is greater than size of r1 + size of c1", "        let r be r1", "        let c be c1", "    end of the block", "    print size of r + size of c, \"\\n\"", "    for i = 0 to size of r exclusive", "        print \"row \"", "        print r[i], \"\\n\"", "    end of the block", "    for i = 0 to size of c exclusive", "        print \"col \"", "        print c[i], \"\\n\"", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int M = 2e5 + 5;", "int G[200][200], T[200][200];", "int main() {", "    int n, m, i, j;", "    cin >> n >> m;", "    bool f = 0;", "    for (i = 1; i <= n; i++)", "        for (j = 1; j <= m; j++) {", "            cin >> G[i][j];", "            T[i][j] = G[i][j];", "        }", "    vector<int> r, c;", "    for (i = 1; i <= n; i++) {", "        int mn = 1000;", "        for (j = 1; j <= m; j++) mn = min(mn, G[i][j]);", "        for (j = 1; j <= m; j++) G[i][j] -= mn;", "        for (j = 1; j <= mn; j++) r.push_back(i);", "    }", "    for (i = 1; i <= m; i++) {", "        int mn = 1000;", "        for (j = 1; j <= n; j++) mn = min(mn, G[j][i]);", "        for (j = 1; j <= n; j++) G[j][i] -= mn;", "        for (j = 1; j <= mn; j++) c.push_back(i);", "    }", "    for (i = 1; i <= n; i++)", "        for (j = 1; j <= m; j++) {", "            if (G[i][j]) {", "                cout << \"-1\\n\";", "                return 0;", "            }", "            G[i][j] = T[i][j];", "        }", "    vector<int> r1, c1;", "    for (i = 1; i <= m; i++) {", "        int mn = 1000;", "        for (j = 1; j <= n; j++) mn = min(mn, G[j][i]);", "        for (j = 1; j <= n; j++) G[j][i] -= mn;", "        for (j = 1; j <= mn; j++) c1.push_back(i);", "    }", "    for (i = 1; i <= n; i++) {", "        int mn = 1000;", "        for (j = 1; j <= m; j++) mn = min(mn, G[i][j]);", "        for (j = 1; j <= m; j++) G[i][j] -= mn;", "        for (j = 1; j <= mn; j++) r1.push_back(i);", "    }", "    if (r.size() + c.size() > r1.size() + c1.size()) {", "        r = r1;", "        c = c1;", "    }", "    cout << r.size() + c.size() << \"\\n\";", "    for (i = 0; i < r.size(); i++) {", "        cout << \"row \";", "        cout << r[i] << \"\\n\";", "    }", "    for (i = 0; i < c.size(); i++) {", "        cout << \"col \";", "        cout << c[i] << \"\\n\";", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["let INF be const integer with INF = 0x3f3f3f3f", "define the main function", "    let n, m be integers", "    read n, m", "    let ans, ar be array of size 105 by 105 with ans = ar = {0}", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            read ans[i][j]", "            set ar[i][j] to ans[i][j]", "        end of the block", "    let mins, sum be integers with mins = INF and sum = 0", "    let temp be integer array of size 6 by 200 with temp = {0}", "    for i = 1 to n inclusive", "        set mins to INF", "        for j = 1 to m inclusive, set mins to min of mins, ans[i][j]", "        set temp[1][i] to mins", "        for j = 1 to m inclusive, set ans[i][j] to ans[i][j] - mins", "    end of the block", "    for j = 1 to m inclusive", "        set mins to INF", "        for i = 1 to n inclusive, set mins to min of mins, ans[i][j]", "        set temp[2][j] to mins", "        for i = 1 to n inclusive, decrement ans[i][j] by mins", "    end of the block", "    for j = 1 to m inclusive", "        set mins to INF", "        for i = 1 to n inclusive, set mins to min of mins, ar[i][j]", "        set temp[3][j] to mins", "        for i = 1 to n inclusive, set ar[i][j] to ar[i][j] - mins", "    end of the block", "    for i = 1 to n inclusive", "        set mins to iNF", "        for j = 1 to m inclusive, mins = min of mins, ar[i][j]", "        temp[4][i] = mins", "        for j = 1 to m inclusive, decrement ar[i][j] by mins", "    end of the block", "    let flag1, flag2 be integers with flag1 = flag2 = 0", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if ans[i][j] != 0", "                set flag1 to 1", "                break", "            end of the block", "        end of the block", "    end of the block", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if ar[i][j] != 0", "                set flag2 to 0", "                break", "            end of the block", "        end of the block", "    end of the block", "    if flag1 == 1 and flag2 == 1", "        print -1", "    else if flag1 == 0 and flag2 == 0", "        sum1 = sum2 = integer = 0", "        for i = 1 to n inclusive", "            increment sum1 by temp[1][i]", "            increment sum2 by temp[4][i]", "        end of the block", "        for j = 1 to m inclusive", "            increment sum1 by temp[2][j]", "            increment sum2 by temp[3][j]", "        end of the block", "        if sum1 > sum2", "            print sum2", "            for i = 1 to n inclusive", "                for j = 1 to temp[4][i], print row, i", "            for j = 1 to m inclusive", "                for i = 1 to temp[3][j] inclusive, print col, j", "        else", "            print sum1", "            for i = 1 to n inclusive", "                for j = 1 to temp[1][i], print \"row \", i", "            for j = 1 to m inclusive", "                for i = 1 to temp[2][j] inclusive, print \"col \", j", "        end of the block", "    else if flag1 == 1", "        let sum2 be integer with sum2 = 0", "        for i = 1 to n inclusive, increment sum2 by temp[4][i]", "        for j = 1 to n inclusive, increment sum2 by temp[3][j]", "        print sum2", "        for i = 1 to n inclusive", "            for j = 1 to temp[4][i] inclusive, print \"row \", i", "        for j = 1 to m inclusive", "            for i = 1 to temp[3][j] inclusive, print \"col \", j", "    else if flag2 == 1", "        sum1 = int = 0", "        for i = 1 to n inclusive, increment sum1 by temp[4][i]", "        for j = 1 to n inclusive, increment sum1 by temp[3][j]", "        print sum1", "        for i = 1 to n inclusive", "            for j = 1 to temp[1][i] inclusive, print \"row \", i", "        for j = 1 to m inclusive", "            for i = 1 to temp[2][j] inclusive, print \"col \", j", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int INF = 0x3f3f3f3f;", "int main() {", "    int n, m;", "    cin >> n >> m;", "    int ans[105][105] = {0}, ar[105][105] = {0};", "    for (int i = 1; i <= n; i++)", "        for (int j = 1; j <= m; j++) {", "            cin >> ans[i][j];", "            ar[i][j] = ans[i][j];", "        }", "    int mins = INF, sum = 0;", "    int temp[6][200] = {0};", "    for (int i = 1; i <= n; i++) {", "        mins = INF;", "        for (int j = 1; j <= m; j++) mins = min(mins, ans[i][j]);", "        temp[1][i] = mins;", "        for (int j = 1; j <= m; j++) ans[i][j] -= mins;", "    }", "    for (int j = 1; j <= m; j++) {", "        mins = INF;", "        for (int i = 1; i <= n; i++) mins = min(mins, ans[i][j]);", "        temp[2][j] = mins;", "        for (int i = 1; i <= n; i++) ans[i][j] -= mins;", "    }", "    for (int j = 1; j <= m; j++) {", "        mins = INF;", "        for (int i = 1; i <= n; i++) mins = min(mins, ar[i][j]);", "        temp[3][j] = mins;", "        for (int i = 1; i <= n; i++) ar[i][j] -= mins;", "    }", "    for (int i = 1; i <= n; i++) {", "        mins = INF;", "        for (int j = 1; j <= m; j++) mins = min(mins, ar[i][j]);", "        temp[4][i] = mins;", "        for (int j = 1; j <= m; j++) ar[i][j] -= mins;", "    }", "    int flag1 = 0, flag2 = 0;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            if (ans[i][j] != 0) {", "                flag1 = 1;", "                break;", "            }", "        }", "    }", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            if (ar[i][j] != 0) {", "                flag2 = 1;", "                break;", "            }", "        }", "    }", "    if (flag1 == 1 && flag2 == 1)", "        cout << -1 << endl;", "    else if (flag1 == 0 && flag2 == 0) {", "        int sum1 = 0, sum2 = 0;", "        for (int i = 1; i <= n; i++) {", "            sum1 += temp[1][i];", "            sum2 += temp[4][i];", "        }", "        for (int j = 1; j <= m; j++) {", "            sum1 += temp[2][j];", "            sum2 += temp[3][j];", "        }", "        if (sum1 > sum2) {", "            cout << sum2 << endl;", "            for (int i = 1; i <= n; i++)", "                for (int j = 1; j <= temp[4][i]; j++) cout << \"row \" << i << endl;", "            for (int j = 1; j <= m; j++)", "                for (int i = 1; i <= temp[3][j]; i++) cout << \"col \" << j << endl;", "        } else {", "            cout << sum1 << endl;", "            for (int i = 1; i <= n; i++)", "                for (int j = 1; j <= temp[1][i]; j++) cout << \"row \" << i << endl;", "            for (int j = 1; j <= m; j++)", "                for (int i = 1; i <= temp[2][j]; i++) cout << \"col \" << j << endl;", "        }", "    } else if (flag1 == 1) {", "        int sum2 = 0;", "        for (int i = 1; i <= n; i++) { sum2 += temp[4][i]; }", "        for (int j = 1; j <= m; j++) { sum2 += temp[3][j]; }", "        cout << sum2 << endl;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= temp[4][i]; j++) cout << \"row \" << i << endl;", "        for (int j = 1; j <= m; j++)", "            for (int i = 1; i <= temp[3][j]; i++) cout << \"col \" << j << endl;", "    } else if (flag2 == 1) {", "        int sum1 = 0;", "        for (int i = 1; i <= n; i++) { sum1 += temp[4][i]; }", "        for (int j = 1; j <= m; j++) { sum1 += temp[3][j]; }", "        cout << sum1 << endl;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= temp[1][i]; j++) cout << \"row \" << i << endl;", "        for (int j = 1; j <= m; j++)", "            for (int i = 1; i <= temp[2][j]; i++) cout << \"col \" << j << endl;", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "815A", "pseudocode_lines": ["mod = static integer = 1e9 + 7", "define the main function", "    n, m are integers, row, col are integer arrays both of size 105, table is an integer array of sizes 105 and 105, minn and flag are integers", "    while read n, m", "        tmp = integer = 0", "        call memset with row, 0, call sizeof with row", "        call memset with col, 0, call sizeof with col", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive, read table[i][j]", "        end of the block", "        if m is at least n", "            for i = 1 to n inclusive", "                set min to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set row[i] to minn", "                    for j = 1 to m inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "        else", "            for j = 1 to m inclusive", "                set minn to 0x3f3f3f3f", "                for i = 1 to n inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set col[j] to minn", "                    for i = 1 to n inclusive, subtract minn from table[i][j]", "                end of the block", "            end of the block", "            for i = 1 to n inclusive", "                set minn to 0x3f3f3f3f", "                for j = 1 to m inclusive", "                    if table[i][j] is less than minn, set minn to table[i][j]", "                end of the block", "                if minn", "                    add minn to tmp", "                    set row[i] to minn", "                    iterate m times, subtract minn from table[i][j]", "                end of the block", "            end of the block", "        end of the block", "        set flag to 1", "        for i = 1 to n inclusive", "            for j = 1 to m inclusive", "                if table[i][j]", "                    set flag to 0", "                    break", "                end of the block", "        if flag", "            print tmp", "            for i = 1 to n inclusive", "                for k = 1 to row[i] inclusive, print \"row \", i", "            end of the block", "            for j = 1 to m inclusive", "                for j = 1 to col[j] inclusive, print \"col \", j", "            end of the block", "        else", "            print -1", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["static int mod = 1e9 + 7;", "int main() {", "    int n, m, row[105], col[105], table[105][105], minn, flag;", "    while (cin >> n >> m) {", "        int tmp = 0;", "        memset(row, 0, sizeof(row));", "        memset(col, 0, sizeof(col));", "        for (int i = 1; i <= n; i++) {", "            for (int j = 1; j <= m; j++) cin >> table[i][j];", "        }", "        if (m >= n) {", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "        } else {", "            for (int j = 1; j <= m; j++) {", "                minn = 0x3f3f3f3f;", "                for (int i = 1; i <= n; i++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    col[j] = minn;", "                    for (int i = 1; i <= n; i++) table[i][j] -= minn;", "                }", "            }", "            for (int i = 1; i <= n; i++) {", "                minn = 0x3f3f3f3f;", "                for (int j = 1; j <= m; j++) {", "                    if (table[i][j] < minn) minn = table[i][j];", "                }", "                if (minn) {", "                    tmp += minn;", "                    row[i] = minn;", "                    for (int j = 1; j <= m; j++) table[i][j] -= minn;", "                }", "            }", "        }", "        flag = 1;", "        for (int i = 1; i <= n; i++)", "            for (int j = 1; j <= m; j++)", "                if (table[i][j]) {", "                    flag = 0;", "                    break;", "                }", "        if (flag) {", "            cout << tmp << '\\n';", "            for (int i = 1; i <= n; i++) {", "                for (int k = 1; k <= row[i]; k++) cout << \"row \" << i << '\\n';", "            }", "            for (int j = 1; j <= m; j++) {", "                for (int k = 1; k <= col[j]; k++) cout << \"col \" << j << '\\n';", "            }", "        } else", "            cout << \"-1\\n\";", "    }", "    return 0;", "}"], "testcases": [[["3 5", "2 2 2 3 2", "0 0 0 1 0", "1 1 1 2 1"], ["4", "row 1", "row 1", "row 3", "col 4"]], [["3 3", "0 0 0", "0 1 0", "0 0 0"], ["-1"]], [["3 3", "1 1 1", "1 1 1", "1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["3 5", "2 4 2 2 3", "0 2 0 0 1", "1 3 1 1 2"], ["6", "row 1", "row 1", "row 3", "col 2", "col 2", "col 5"]], [["3 5", "0 0 0 0 0", "0 0 0 0 0", "0 0 0 0 1"], ["-1"]], [["1 1", "0"], ["0"]], [["10 10", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"], ["9", "row 1", "row 2", "row 3", "row 4", "row 6", "row 7", "row 8", "row 9", "row 10"]], [["10 10", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1", "1 1 1 1 1 1 0 1 1 1"], ["9", "col 1", "col 2", "col 3", "col 4", "col 5", "col 6", "col 8", "col 9", "col 10"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "1 1 1", "2 2 2"], ["7", "row 1", "row 2", "row 3", "row 5", "col 1", "col 2", "col 3"]], [["3 5", "2 2 2 1 2", "2 2 2 1 2", "2 2 2 1 2"], ["7", "row 1", "row 2", "row 3", "col 1", "col 2", "col 3", "col 5"]], [["1 100", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"], ["0"]], [["100 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], ["0"]], [["1 100", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"], ["1", "rowcol 1"]], [["2 1", "1", "1"], ["1", "col 1"]], [["4 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["2 1", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["2 1", "1", "2"], ["2", "row 2", "col 1"]], [["2 3", "1 1 1", "1 1 1"], ["2", "row 1", "row 2"]], [["1 2", "1 1"], ["1", "row 1"]], [["5 1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 1", "10", "10"], ["10", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["4 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 1", "1", "1", "1"], ["1", "col 1"]], [["8 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "2 2"], ["2", "row 1", "row 1"]], [["3 2", "2 3", "2 3", "2 3"], ["5", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 1", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["6 2", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["4 1", "1", "1", "1", "1"], ["1", "col 1"]], [["2 5", "1 1 1 1 1", "1 1 1 1 1"], ["2", "row 1", "row 2"]], [["5 2", "1 1", "2 2", "2 2", "2 2", "2 2"], ["6", "row 2", "row 3", "row 4", "row 5", "col 1", "col 2"]], [["4 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["5 2", "1 1", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["1 4", "1 1 1 1"], ["1", "row 1"]], [["3 1", "2", "3", "2"], ["3", "row 2", "col 1", "col 1"]], [["1 5", "1 1 1 1 1"], ["1", "row 1"]], [["2 4", "3 1 1 1", "3 1 1 1"], ["4", "row 1", "row 2", "col 1", "col 1"]], [["3 3", "1 1 1", "0 1 0", "0 0 0"], ["-1"]], [["3 2", "2 2", "1 1", "2 2"], ["4", "row 1", "row 3", "col 1", "col 2"]], [["2 1", "9", "9"], ["9", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1", "col 1"]], [["1 7", "3 3 3 3 3 3 3"], ["3", "row 1", "row 1", "row 1"]], [["5 2", "3 3", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["7 1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["5 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["5 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3", "3 3 3"], ["9", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["2 1", "4", "5"], ["5", "row 2", "col 1", "col 1", "col 1", "col 1"]], [["4 2", "3 3", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["6 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["5 1", "1", "2", "3", "4", "5"], ["11", "row 2", "row 3", "row 3", "row 4", "row 4", "row 4", "row 5", "row 5", "row 5", "row 5", "col 1"]], [["2 1", "1", "3"], ["3", "row 2", "row 2", "col 1"]], [["10 1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "col 1"]], [["6 2", "2 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 5", "1 1 1 1 1", "1 1 1 1 1", "1 1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 3", "2 1 2", "2 1 2"], ["4", "row 1", "row 2", "col 1", "col 3"]], [["5 2", "2 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 2", "1 3"], ["3", "row 1", "col 2", "col 2"]], [["4 3", "2 2 2", "1 1 1", "1 1 1", "1 1 1"], ["4", "row 1", "col 1", "col 2", "col 3"]], [["3 2", "1 1", "2 2", "3 3"], ["5", "row 2", "row 3", "row 3", "col 1", "col 2"]], [["4 2", "1 1", "1 1", "1 1", "1 1"], ["2", "col 1", "col 2"]], [["3 4", "1 1 1 1", "1 1 1 1", "1 1 1 1"], ["3", "row 1", "row 2", "row 3"]], [["2 1", "2", "3"], ["3", "row 2", "col 1", "col 1"]], [["5 3", "2 2 2", "2 2 2", "2 2 2", "2 2 2", "2 2 2"], ["6", "col 1", "col 1", "col 2", "col 2", "col 3", "col 3"]], [["3 2", "1 0", "2 1", "2 1"], ["3", "row 2", "row 3", "col 1"]], [["3 2", "1 2", "2 3", "3 4"], ["6", "row 2", "row 3", "row 3", "col 1", "col 2", "col 2"]], [["3 3", "1 1 1", "1 2 1", "1 1 1"], ["-1"]], [["4 3", "2 1 1", "2 1 1", "2 1 1", "2 1 1"], ["4", "col 1", "col 1", "col 2", "col 3"]], [["4 1", "3", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["1 3", "2 3 2"], ["3", "row 1", "row 1", "col 2"]], [["1 2", "1 2"], ["2", "row 1", "col 2"]], [["3 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["1 3", "1 1 1"], ["1", "row 1"]], [["6 3", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1", "1 1 1"], ["3", "col 1", "col 2", "col 3"]], [["3 1", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 1", "3", "3", "3"], ["3", "col 1", "col 1", "col 1"]], [["3 2", "2 2", "1 1", "1 1"], ["3", "row 1", "col 1", "col 2"]], [["5 3", "1 1 2", "1 1 2", "1 1 2", "1 1 2", "1 1 2"], ["4", "col 1", "col 2", "col 3", "col 3"]], [["1 2", "2 3"], ["3", "row 1", "row 1", "col 2"]], [["5 1", "2", "2", "2", "2", "2"], ["2", "col 1", "col 1"]], [["3 2", "1 1", "2 2", "2 2"], ["4", "row 2", "row 3", "col 1", "col 2"]], [["3 3", "1 1 1", "2 3 3", "4 4 4"], ["-1"]], [["2 1", "5", "2"], ["5", "row 1", "row 1", "row 1", "col 1", "col 1"]], [["4 2", "2 2", "2 2", "2 2", "2 2"], ["4", "col 1", "col 1", "col 2", "col 2"]], [["3 2", "5 10", "5 10", "5 10"], ["15", "col 1", "col 1", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2", "col 2"]], [["4 3", "3 4 3", "5 6 5", "3 4 3", "3 4 3"], ["12", "row 2", "row 2", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2", "col 2", "col 3", "col 3", "col 3"]], [["4 2", "1 1", "1 1", "1 1", "2 2"], ["3", "row 4", "col 1", "col 2"]], [["4 1", "4", "4", "4", "4"], ["4", "col 1", "col 1", "col 1", "col 1"]], [["3 2", "1 1", "1 1", "2 2"], ["3", "row 3", "col 1", "col 2"]], [["2 3", "2 2 2", "2 2 2"], ["4", "row 1", "row 1", "row 2", "row 2"]], [["3 2", "3 3", "3 3", "3 3"], ["6", "col 1", "col 1", "col 1", "col 2", "col 2", "col 2"]], [["2 3", "10 10 10", "5 5 5"], ["15", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 1", "row 2", "row 2", "row 2", "row 2", "row 2"]], [["5 2", "1 2", "1 2", "1 2", "1 2", "1 2"], ["3", "col 1", "col 2", "col 2"]], [["2 1", "5", "5"], ["5", "col 1", "col 1", "col 1", "col 1", "col 1"]]]}, {"problem_id": "452A", "pseudocode_lines": ["create pair of integer, integer array par with size 10001", "create string set str", "define the main function", "    create string s", "    create integers n, i", "    read n read s", "    if n is 8", "        print \"vaporeon\" print newline", "    else if n is 6", "        print \"espeon\" print newline", "    else if n is 7", "        if s[0] is '.'", "            if s[1] is 'o'", "                print \"jolteon\" print newline", "                return to indicate successful execution", "            end of the block", "            if s[1] is 'm'", "                print \"umbreon\" print newline", "                return to indicate successful execution", "            end of the block", "            if s[1] is 'e'", "                print \"leafeon\" print newline", "                return to indicate successful execution", "            end of the block", "            if s[1] is 'y'", "                print \"sylveon\" print newline", "                return to indicate successful execution", "            end of the block", "            if s[1] is 'l'", "                if s[3] is 'r'", "                    print \"flareon\" print newline", "                    return to indicate successful execution", "                else", "                    print \"glaceon\" print newline", "                    return to indicate successful execution", "                end of the block", "            end of the block", "            if s[1] is '.'", "                if s[2] is 'b'", "                    print \"umbreon\" print newline", "                    return to indicate successful execution", "                end of the block", "                if s[2] is 'l'", "                    if s[3] is 't'", "                        print \"jolteon\" print newline", "                        return to indicate successful execution", "                    else", "                        print \"sylveon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                end of the block", "                if s[2] is 'a'", "                    if s[3] is 'r'", "                        print \"flareon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                    if s[3] is 'c'", "                        print \"glaceon\" print newline", "                        return to indicate successful execution", "                    else", "                        print \"leafeon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                end of the block", "                if s[2] is '.'", "                    if s[3] is 'r'", "                        print \"flareon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                    if s[3] is 'c'", "                        print \"glaceon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                    if s[3] is 'f'", "                        print \"leafeon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                    if s[3] is 't'", "                        print \"jolteon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                    if s[3] is 'v'", "                        print \"sylveon\" print newline", "                        return to indicate successful execution", "                    else", "                        print \"umbreon\" print newline", "                        return to indicate successful execution", "                    end of the block", "                end of the block", "            end of the block", "        end of the block", "        if s[0] is 'j'", "            print \"jolteon\" print newline", "            return to indicate successful execution", "        end of the block", "        if s[0] is 'f'", "            print 'flareon\" print newline", "            return to indicate successful execution", "        end of the block", "        if s[0] is 'u'", "            print \"umbreon\" print newline", "            return to indicate successful execution", "        end of the block", "        if s[0] is 'l'", "            print \"leafeon\" print newline", "            return to indicate successful execution", "        end of the block", "        if s[0] is 'g'", "            print \"glaceon\" print newline", "            return to indicate successful execution", "        end of the block", "        if s[0] is 's'", "            print \"sylveon\" print newline", "            return to indicate successful execution", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["pair<int, int> par[10001];", "set<string> str;", "int main() {", "    string s;", "    int n, i;", "    cin >> n >> s;", "    if (n == 8)", "        cout << \"vaporeon\" << endl;", "    else if (n == 6)", "        cout << \"espeon\" << endl;", "    else if (n == 7) {", "        if (s[0] == '.') {", "            if (s[1] == 'o') {", "                cout << \"jolteon\" << endl;", "                return 0;", "            }", "            if (s[1] == 'm') {", "                cout << \"umbreon\" << endl;", "                return 0;", "            }", "            if (s[1] == 'e') {", "                cout << \"leafeon\" << endl;", "                return 0;", "            }", "            if (s[1] == 'y') {", "                cout << \"sylveon\" << endl;", "                return 0;", "            }", "            if (s[1] == 'l') {", "                if (s[3] == 'r') {", "                    cout << \"flareon\" << endl;", "                    return 0;", "                } else {", "                    cout << \"glaceon\" << endl;", "                    return 0;", "                }", "            }", "            if (s[1] == '.') {", "                if (s[2] == 'b') {", "                    cout << \"umbreon\" << endl;", "                    return 0;", "                }", "                if (s[2] == 'l') {", "                    if (s[3] == 't') {", "                        cout << \"jolteon\" << endl;", "                        return 0;", "                    } else {", "                        cout << \"sylveon\" << endl;", "                        return 0;", "                    }", "                }", "                if (s[2] == 'a') {", "                    if (s[3] == 'r') {", "                        cout << \"flareon\" << endl;", "                        return 0;", "                    }", "                    if (s[3] == 'c') {", "                        cout << \"glaceon\" << endl;", "                        return 0;", "                    } else {", "                        cout << \"leafeon\" << endl;", "                        return 0;", "                    }", "                }", "                if (s[2] == '.') {", "                    if (s[3] == 'r') {", "                        cout << \"flareon\" << endl;", "                        return 0;", "                    }", "                    if (s[3] == 'c') {", "                        cout << \"glaceon\" << endl;", "                        return 0;", "                    }", "                    if (s[3] == 'f') {", "                        cout << \"leafeon\" << endl;", "                        return 0;", "                    }", "                    if (s[3] == 't') {", "                        cout << \"jolteon\" << endl;", "                        return 0;", "                    }", "                    if (s[3] == 'v') {", "                        cout << \"sylveon\" << endl;", "                        return 0;", "                    } else {", "                        cout << \"umbreon\" << endl;", "                        return 0;", "                    }", "                }", "            }", "        }", "        if (s[0] == 'j') {", "            cout << \"jolteon\" << endl;", "            return 0;", "        }", "        if (s[0] == 'f') {", "            cout << \"flareon\" << endl;", "            return 0;", "        }", "        if (s[0] == 'u') {", "            cout << \"umbreon\" << endl;", "            return 0;", "        }", "        if (s[0] == 'l') {", "            cout << \"leafeon\" << endl;", "            return 0;", "        }", "        if (s[0] == 'g') {", "            cout << \"glaceon\" << endl;", "            return 0;", "        }", "        if (s[0] == 's') {", "            cout << \"sylveon\" << endl;", "            return 0;", "        }", "    }", "    return 0;", "}"], "testcases": [[["7", "...feon"], ["leafeon"]], [["7", ".l.r.o."], ["flareon"]], [["6", ".s..o."], ["espeon"]], [["7", "glaceon"], ["glaceon"]], [["8", ".a.o.e.n"], ["vaporeon"]], [["7", ".laceon"], ["glaceon"]], [["7", "..lveon"], ["sylveon"]], [["7", ".l.ceon"], ["glaceon"]], [["7", "..areon"], ["flareon"]]]}, {"problem_id": "452A", "pseudocode_lines": ["define the main function", "    str = string array of size 12", "    n, i, j, ck = int", "    read n then str[0]", "    set str[1] to \"vaporeon\"", "    set str[2] to \"jolteon\"", "    set str[3] to \"flareon\"", "    set str[4] to \"espeon\"", "    set str[5] to \"umbreon\"", "    set str[6] to \"leafeon\"", "    set str[7] to \"glaceon\"", "    set str[8] to \"sylveon\"", "    for i = 1 to 8 inclusive", "        if size of str[i] is n", "            set ck to 1", "            for j = 0 to n", "                if str[0][j] >= 'a' and str[0][j] <= 'z'", "                    if str[0][j] is not str[i][j]", "                        set ck to 0", "                        break", "                    end of the block", "                end of the block", "            end of the block", "            if ck is 1", "                print str[i]", "                return to indicate successful execution", "            end of the block", "        end of the block", "    end of the block", "    print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    string str[12];", "    int n, i, j, ck;", "    cin >> n >> str[0];", "    str[1] = \"vaporeon\";", "    str[2] = \"jolteon\";", "    str[3] = \"flareon\";", "    str[4] = \"espeon\";", "    str[5] = \"umbreon\";", "    str[6] = \"leafeon\";", "    str[7] = \"glaceon\";", "    str[8] = \"sylveon\";", "    for (i = 1; i <= 8; i++) {", "        if (str[i].size() == n) {", "            ck = 1;", "            for (j = 0; j < n; j++) {", "                if (str[0][j] >= 'a' && str[0][j] <= 'z') {", "                    if (str[0][j] != str[i][j]) {", "                        ck = 0;", "                        break;", "                    }", "                }", "            }", "            if (ck == 1) {", "                cout << str[i] << endl;", "                return 0;", "            }", "        }", "    }", "    cout << endl;", "    return 0;", "}"], "testcases": [[["7", "...feon"], ["leafeon"]], [["7", ".l.r.o."], ["flareon"]], [["6", ".s..o."], ["espeon"]], [["7", "glaceon"], ["glaceon"]], [["8", ".a.o.e.n"], ["vaporeon"]], [["7", ".laceon"], ["glaceon"]], [["7", "..lveon"], ["sylveon"]], [["7", ".l.ceon"], ["glaceon"]], [["7", "..areon"], ["flareon"]]]}, {"problem_id": "452A", "pseudocode_lines": ["define the main function", "    create integer N", "    create string jolteon with jolteon = \"jolteaon\"", "    create integer jol with jol = 0", "    create string flareon with flareon = \"flareon\"", "    create integer fla with fla = 0", "    create string umbreon with umbreon = \"umbreon\"", "    create integer umb with umb = 0", "    create string leafeon with leafeon = \"leafeon\"", "    create integer leaf with leaf = 0", "    create string glaceon with glaceon = \"glaceon\"", "    create integer gla with gla = 0", "    create string sylveon with sylveon = \"sylveon\"", "    create integer syl with syl = 0", "    create string eevee", "    read N", "    read eevee", "    if N is 8", "        print \"vaporeon\\n\"", "    else if N is 6", "        print \"espeon\\n\"", "    else", "        for x = 0 to N exclusive", "            if eevee[x] is not '.'", "                iif eevee[x] is flareon[x] and fla is 0", "                    if x is not 2, set leaf to 1", "                    set jol to 1", "                    set syl to 1", "                    set umb to 1", "                    if x is not 1 and x is not 2, set gla to 1", "                end of the block", "                if eevee[x] is glaceon[x] and gla is 0", "                    if x is not 2, set leaf to 1", "                    set jol to 1", "                    set syl to 1", "                    set umb to 1", "                    if x is not 1 and x is not 2, set fla to 1", "                end of the block", "                if eevee[x] is leafeon[x] and leaf is 0", "                    if x is not 2", "                        set fla to 1", "                        set gla to 1", "                    end of the block", "                    set jol to 1", "                    set syl to 1", "                    set umb to 1", "                end of the block", "                if eevee[x] is jolteon[x] and jol is 0", "                    set leaf to 1", "                    set fla to 1", "                    if x is not 2, set syl to 1", "                    set umb to 1", "                    set gla to 1", "                end of the block", "                if eevee[x] is umbreon[x] and umb is 0", "                    set leaf to 1", "                    set jol to 1", "                    set syl to 1", "                    set fla to 1", "                    set gla to 1", "                end of the block", "                if eevee[x] is sylveon[x] and syl is 0", "                    set leaf to 1", "                    set fla to 1", "                    if x is not 2, set jol to 1", "                    set umb to 1", "                    set gla to 1", "                end of the block", "                if syl + leaf + jol + umb + gla + fla is 5", "                    if syl is 0, print sylveon print \"\\n\"", "                    if gla is 0, print glaceon print \"\\n\"", "                    if fla is 0, print flareon print \"\\n\"", "                    if jol is 0, print jolteon print \"\\n\"", "                    if umb is 0 print umbreon print \"\\n\"", "                    if leaf is 0 print leafon print \"\\n\"", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "end of the block"], "code_lines": ["int main() {", "    int N;", "    string jolteon = \"jolteon\";", "    int jol = 0;", "    string flareon = \"flareon\";", "    int fla = 0;", "    string umbreon = \"umbreon\";", "    int umb = 0;", "    string leafeon = \"leafeon\";", "    int leaf = 0;", "    string glaceon = \"glaceon\";", "    int gla = 0;", "    string sylveon = \"sylveon\";", "    int syl = 0;", "    string eevee;", "    cin >> N;", "    cin >> eevee;", "    if (N == 8) {", "        cout << \"vaporeon\\n\";", "    } else if (N == 6) {", "        cout << \"espeon\\n\";", "    } else {", "        for (int x = 0; x < N; x++) {", "            if (eevee[x] != '.') {", "                if (eevee[x] == flareon[x] && fla == 0) {", "                    if (x != 2) { leaf = 1; }", "                    jol = 1;", "                    syl = 1;", "                    umb = 1;", "                    if (x != 1 && x != 2) { gla = 1; }", "                }", "                if (eevee[x] == glaceon[x] && gla == 0) {", "                    if (x != 2) { leaf = 1; }", "                    jol = 1;", "                    syl = 1;", "                    umb = 1;", "                    if (x != 1 && x != 2) { fla = 1; }", "                }", "                if (eevee[x] == leafeon[x] && leaf == 0) {", "                    if (x != 2) {", "                        fla = 1;", "                        gla = 1;", "                    }", "                    jol = 1;", "                    syl = 1;", "                    umb = 1;", "                }", "                if (eevee[x] == jolteon[x] && jol == 0) {", "                    leaf = 1;", "                    fla = 1;", "                    if (x != 2) { syl = 1; }", "                    umb = 1;", "                    gla = 1;", "                }", "                if (eevee[x] == umbreon[x] && umb == 0) {", "                    leaf = 1;", "                    jol = 1;", "                    syl = 1;", "                    fla = 1;", "                    gla = 1;", "                }", "                if (eevee[x] == sylveon[x] && syl == 0) {", "                    leaf = 1;", "                    fla = 1;", "                    if (x != 2) { jol = 1; }", "                    umb = 1;", "                    gla = 1;", "                }", "                if (syl + leaf + jol + umb + gla + fla == 5) {", "                    if (syl == 0) { cout << sylveon << \"\\n\"; }", "                    if (gla == 0) { cout << glaceon << \"\\n\"; }", "                    if (fla == 0) { cout << flareon << \"\\n\"; }", "                    if (jol == 0) { cout << jolteon << \"\\n\"; }", "                    if (umb == 0) { cout << umbreon << \"\\n\"; }", "                    if (leaf == 0) { cout << leafeon << \"\\n\"; }", "                    break;", "                }", "            }", "        }", "    }", "}"], "testcases": [[["7", "...feon"], ["leafeon"]], [["7", ".l.r.o."], ["flareon"]], [["6", ".s..o."], ["espeon"]], [["7", "glaceon"], ["glaceon"]], [["8", ".a.o.e.n"], ["vaporeon"]], [["7", ".laceon"], ["glaceon"]], [["7", "..lveon"], ["sylveon"]], [["7", ".l.ceon"], ["glaceon"]], [["7", "..areon"], ["flareon"]]]}, {"problem_id": "452A", "pseudocode_lines": ["define the main function", "    a,n,b,c=int", "    s=array of 8 char", "    w=array of 8 char filled with \"jolteon\", q=array of 8 char filled with \"flareon\"", "    v=array of 8 char filled with \"umbreon\", z=array of 8 char filled with \"leafeon\", l=array of 8 char filled with \"glaceeon\", m=array of 8 char filled with \"sylveon\"", "    read n", "    read s", "    if n is 8", "        print \"vaporeon\"", "    else if n is 6", "        print \"espeon\"", "    else", "        a=0", "        b=0", "        c=0", "        d=0", "        e=0", "        f=0", "        for i=0 to 8 exclusive", "            if s[i] is w[i] increment a", "        end of the block", "        for i=0 to 8 exclusive", "            if s[i] is q[i] increment b", "        end of the block", "        for i=0 to 8 exclusive", "            if s[i] is v[i] increment c", "        end of the block", "        for i=0 to 8 exclusive", "            if s[i] is z[i] increment d", "        end of the block", "        for i=0 to 8 exclusive", "            if s[i] is l[i] increment e", "        end of the block", "        for i=0 to 8 exclusive", "            if s[i] is m[i] increment f", "        end of the block", "        if a>b and a>c and a>d and a>e and a>f", "            print \"jolteon\"", "        if b>a and b>c and b>d and b>e and b>f", "            print \"flareon\"", "        if c>a and c>b and c>d and c>e and c>f", "            print \"umbreon\"", "        if d>a and d>b and d>c and d>e and d>f", "            print \"leafeon\"", "        if e>a and e>b and e>c and e>d and e>f", "            print \"glaceon\"", "        if f>a and f>b and f>c and f>d and f>e", "            print \"sylveon\"", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int a, n, b, c;", "    char s[8];", "    char w[8] = \"jolteon\", q[8] = \"flareon\";", "    char v[8] = \"umbreon\", z[8] = \"leafeon\", l[8] = \"glaceon\", m[8] = \"sylveon\";", "    cin >> n;", "    cin >> s;", "    if (n == 8) {", "        cout << \"vaporeon\" << endl;", "    } else if (n == 6) {", "        cout << \"espeon\" << endl;", "    } else {", "        a = 0;", "        b = 0;", "        c = 0;", "        int d = 0;", "        int e = 0;", "        int f = 0;", "        for (int i = 0; i < 8; i++) {", "            if (s[i] == w[i]) { a++; }", "        }", "        for (int i = 0; i < 8; i++) {", "            if (s[i] == q[i]) { b++; }", "        }", "        for (int i = 0; i < 8; i++) {", "            if (s[i] == v[i]) { c++; }", "        }", "        for (int i = 0; i < 8; i++) {", "            if (s[i] == z[i]) { d++; }", "        }", "        for (int i = 0; i < 8; i++) {", "            if (s[i] == l[i]) { e++; }", "        }", "        for (int i = 0; i < 8; i++) {", "            if (s[i] == m[i]) { f++; }", "        }", "        if (a > b && a > c && a > d && a > e && a > f) {", "            cout << \"jolteon\" << endl;", "        } else if (b > a && b > c && b > d && b > e && b > f) {", "            cout << \"flareon\" << endl;", "        } else if (c > a && c > b && c > d && c > e && c > f) {", "            cout << \"umbreon\" << endl;", "        } else if (d > a && d > c && d > b && d > e && d > f) {", "            cout << \"leafeon\" << endl;", "        } else if (e > a && e > c && e > d && e > b && e > f) {", "            cout << \"glaceon\" << endl;", "        } else if (f > a && f > c && f > d && f > e && f > b) {", "            cout << \"sylveon\" << endl;", "        }", "    }", "    return 0;", "}"], "testcases": [[["7", "...feon"], ["leafeon"]], [["7", ".l.r.o."], ["flareon"]], [["6", ".s..o."], ["espeon"]], [["7", "glaceon"], ["glaceon"]], [["8", ".a.o.e.n"], ["vaporeon"]], [["7", ".laceon"], ["glaceon"]], [["7", "..lveon"], ["sylveon"]], [["7", ".l.ceon"], ["glaceon"]], [["7", "..areon"], ["flareon"]]]}, {"problem_id": "547A", "pseudocode_lines": ["create long long integers x and y", "declare exgcd taking in long long integers a and returning long longand b", "    if b is equal to 0", "        set x to 1", "        set y to 0", "        return a", "    end of the block", "    create long long d = exgcd(b, a % b)", "    create long long t = x", "    set x to y", "    set y to the result of t - a / b * y", "    return d", "end of the block", "define the main function", "    create long long integers m, h1, al, x1, y1, h2, a2, x2, y2", "    create long long integers p1, p2, q1, q2", "    while cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 is truthy", "        set p1, p2, q1, and q1 to 0", "        for i = 1 to 2 * m", "            set h1 to (h1 * x1 + y1) % m", "            if h1 is equal to a1", "                if p1 is equal to 0", "                    set p1 to i", "                else if q1 is equal to 0", "                    set q1 to the result of i - p1", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "        for i = 1 to 2 * m", "            set h2 to the result of (h2 * x2 + y2) % m", "            if h2 is equal to a2", "                if p2 is equal to 0", "                    set p2 to i", "                else if q2 is equal to 0", "                    set q2 to the result of i - p2", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "        create long long d = exgcd(q1, -q2)", "        create long long c = p2 - p1", "        if d is equal to 0", "            print \"-1\"", "            continue to next loop iteration", "        end of the block", "        if c modulo d is truthy", "            print \"-1\"", "            continue to next loop iteration", "        end of the block", "        if d is less than 0, set d to -d", "        if p1 is equal to 0 or p2 is equal to 0", "            print \"-1\"", "            continue to next loop iteration", "        end of the block", "        if q2 is equal to 0 and q1 is equal to 0 and p1 is not equal to p2", "            print \"-1\"", "            continue to next loop iteration", "        end of the block", "        if q2 is equal to 0 and p2 - p1 is less than 0 or q1 is equal to 0 and p1 - p2 is less than 0", "            print \"-1\"", "            continue to next loop iteration", "        end of the block", "        create long long k = c / d", "        if the return value of exgcd(q1, -q2) is less than 0, set x to -x and set y to -y", "        set x to the result of x * k", "        set y to the result of y * k", "        if x is less than 0 or y is less than 0", "            while 1 is truthy", "                set x to the result of x + q2 / d", "                set y to the result of y + q1 / d", "                if x is greater than or equal to 0 and y is greater than or equal to 0, break loop", "            end of the block", "        end of the block", "        if x is greater than 0 and y is greater then 0", "            while 1 is truthy", "                set x to the result of x - q2 / d", "                set y to the result of y - q1 / d", "                if x is less than 0 or y is less than 0, break loop", "            end of the block", "            set x to the result of x + q2 / d", "            set y to the result of y + q1 / d", "        end of the block", "        create long long ans = x * q1 + p1", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long x, y;", "long long exgcd(long long a, long long b) {", "    if (b == 0) {", "        x = 1;", "        y = 0;", "        return a;", "    }", "    long long d = exgcd(b, a % b);", "    long long t = x;", "    x = y;", "    y = t - a / b * y;", "    return d;", "}", "int main() {", "    long long m, h1, a1, x1, y1, h2, a2, x2, y2;", "    long long p1, p2, q1, q2;", "    while (cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2) {", "        p1 = p2 = q1 = q2 = 0;", "        for (long long i = 1; i <= 2 * m; i++) {", "            h1 = (h1 * x1 + y1) % m;", "            if (h1 == a1) {", "                if (p1 == 0)", "                    p1 = i;", "                else if (q1 == 0) {", "                    q1 = i - p1;", "                    break;", "                }", "            }", "        }", "        for (long long i = 1; i <= 2 * m; i++) {", "            h2 = (h2 * x2 + y2) % m;", "            if (h2 == a2) {", "                if (p2 == 0)", "                    p2 = i;", "                else if (q2 == 0) {", "                    q2 = i - p2;", "                    break;", "                }", "            }", "        }", "        long long d = exgcd(q1, -q2);", "        long long c = p2 - p1;", "        if (d == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (c % d) {", "            puts(\"-1\");", "            continue;", "        }", "        if (d < 0) d = -d;", "        if (p1 == 0 || p2 == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (q2 == 0 && q1 == 0 && p1 != p2) {", "            puts(\"-1\");", "            continue;", "        }", "        if ((q2 == 0 && p2 - p1 < 0) || (q1 == 0 && p1 - p2 < 0)) {", "            puts(\"-1\");", "            continue;", "        }", "        long long k = c / d;", "        if (exgcd(q1, -q2) < 0) x = -x, y = -y;", "        x *= k;", "        y *= k;", "        if (x < 0 || y < 0) {", "            while (1) {", "                x += q2 / d;", "                y += q1 / d;", "                if (x >= 0 && y >= 0) break;", "            }", "        }", "        if (x > 0 && y > 0) {", "            while (1) {", "                x -= q2 / d;", "                y -= q1 / d;", "                if (x < 0 || y < 0) break;", "            }", "            x += q2 / d;", "            y += q1 / d;", "        }", "        long long ans = x * q1 + p1;", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["vis1 = array of long integers of length 1000005", "vis2 = array of long integers of length 1000005", "define the main function", "    let m be a long integer", "    let h1, a1 be long integers", "    let x1, y1 be long integers", "    let h2, a2 be long integers", "    let x2, y2 be long integers", "    read m, h1, a1, x1, y1, h2, a2, x2, y2", "    memset of vis1, 0, size of vis1", "    memset of vis2, 0, size of vis2", "    let t1, t2 be long integers with t1 = -1, t2 = -1", "    let c1, c2 be long integers with c1 = -1, c2 = -1", "    let q1, q2 be long integers with q1 = -1, q2 = -1", "    let f1, f2 be long integers with f1 = -1, f2 = -1", "    set boolean value flag to true", "    set boolean value fuck to false", "    for long integer i = 1 to 2 * m inclusive", "        the value of h1 = h1 * x1", "        the value of h1 = h1 modulo m", "        the value of h1 = h1 + y1", "        the value of h1 = h1 modulo m", "        the value of h2 = h2 * x2", "        the value of h2 = h2 modulo m", "        the value of h2 = h2 + y2", "        the value of h2 = h2 modulo m", "        if h1 is equal to a1 and a2 is equal to h2", "            set fuck to true", "            print i and newline", "            stop", "        end of the block", "        if vis1[a1] is equal to 0 and h1 is equal to a1, f1 is equal to i", "        if vis2[a2] is equal to 0 and h2 is equal to a2, f2 is equal to i", "        if h1 is equal to a1 and t1 is equal to -1, c1 is equal to i", "        if h2 is equal to a2 and t2 is equal to -1, c2 is equal to i", "        if vis1[h1] is not equal to 0 and q1 is equal to -1", "            the value of q1 is equal to vis1[h1]", "            the value of t1 is equal to i - q1", "            if c1 is less than q1", "                set flag to false", "                stop", "            else do the following", "                decrement c1 by q1", "            end of the block", "        end of the block", "        if vis2[h2] is not equal to 0 and q2 is equal to -1", "            the value of q2 is equal to vis2[h2]", "            the value of t2 is equal to i - q2", "            if c2 is less than q2", "                set flag to false", "                stop", "            else do the following", "                decrement c2 by q2", "            end of the block", "        end of the block", "        if t1 is not equal to -1 and t2 is not equal to -1, stop", "        if vis1[h1] is equal to 0, vis1[h1] is equal to i", "        if vis2[h2] is equal to 0, vis2[h2] is equal to i", "    end of the block", "    if fuck is true", "    else if not flag", "        if f1 is not equal to f2 or f1 is equal to -1 or f2 is equal to -1", "            print -1 and newline", "        else do the following", "            print f1 + 1 and newline", "    else do the following", "        if f1 is equal to f2 and f1 is not equal to -1 and f2 is not equal to -2", "            print f1 and newline", "        else if t1 is equal to t2 and (c1 is equal to c2 and f1 is not equal to f2) or c1 is not equal to c2", "            print -1 and newline", "        end of the block", "        else do the following", "            let x be a long integer with x = 0", "            while x * t1 + c1 + q1 - c2 - q2 modulo t2 is not equal to 0", "                increment x by 1", "                if x is greater than 1000000, stop", "            end of the block", "            if x is greater than 1000000", "                print -1 and newline", "            else do the following", "                print x * t1 + c1 + q1 and newline", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long vis1[1000005];", "long long vis2[1000005];", "int main() {", "    long long m;", "    long long h1, a1;", "    long long x1, y1;", "    long long h2, a2;", "    long long x2, y2;", "    cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2;", "    memset(vis1, 0, sizeof(vis1));", "    memset(vis2, 0, sizeof(vis2));", "    long long t1 = -1, t2 = -1;", "    long long c1 = -1, c2 = -1;", "    long long q1 = -1, q2 = -1;", "    long long f1 = -1, f2 = -1;", "    bool flag = true;", "    bool fuck = false;", "    for (long long i = 1; i <= 2 * m; i++) {", "        h1 *= x1;", "        h1 %= m;", "        h1 += y1;", "        h1 %= m;", "        h2 *= x2;", "        h2 %= m;", "        h2 += y2;", "        h2 %= m;", "        if (h1 == a1 && a2 == h2) {", "            fuck = true;", "            cout << i << endl;", "            break;", "        }", "        if (vis1[a1] == 0 && h1 == a1) { f1 = i; }", "        if (vis2[a2] == 0 && h2 == a2) { f2 = i; }", "        if (h1 == a1 && t1 == -1) { c1 = i; }", "        if (h2 == a2 && t2 == -1) { c2 = i; }", "        if (vis1[h1] != 0 && q1 == -1) {", "            q1 = vis1[h1];", "            t1 = i - q1;", "            if (c1 < q1) {", "                flag = false;", "                break;", "            } else {", "                c1 = c1 - q1;", "            }", "        }", "        if (vis2[h2] != 0 && q2 == -1) {", "            q2 = vis2[h2];", "            t2 = i - q2;", "            if (c2 < q2) {", "                flag = false;", "                break;", "            } else {", "                c2 = c2 - q2;", "            }", "        }", "        if (t1 != -1 && t2 != -1) { break; }", "        if (vis1[h1] == 0) vis1[h1] = i;", "        if (vis2[h2] == 0) vis2[h2] = i;", "    }", "    if (fuck) {", "    } else if (!flag) {", "        if (f1 != f2 || f1 == -1 || f2 == -1)", "            cout << \"-1\\n\";", "        else", "            cout << f1 + 1 << \"\\n\";", "    } else {", "        if (f1 == f2 && f1 != -1 && f2 != -2) {", "            cout << f1 << \"\\n\";", "        } else if (t1 == t2 && ((c1 == c2 && f1 != f2) || c1 != c2)) {", "            cout << \"-1\\n\";", "        }", "        else {", "            long long x = 0;", "            while ((x * t1 + c1 + q1 - c2 - q2) % t2 != 0) {", "                x++;", "                if (x > 1000000) { break; }", "            }", "            if (x > 1000000) {", "                cout << \"-1\" << endl;", "            } else", "                cout << x * t1 + c1 + q1 << \"\\n\";", "        }", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["create integers m, h, h2, a, a2, x, x2, y, y2", "declare get with integers s, e as arguments, returning integer", "    for i = 0 to m exclusive", "        set s to (1ll * s * x + y ) % m", "        if s is e, return i + 1", "    end of the block", "    return -1 from function", "end of the block", "declare get2 with integers s, e as arguments, returning integer", "    for i = 0 to m exclusive", "        set s to (1ll * s * x2 + y2 ) % m", "        if s is e, return i + 1 from function", "    end of the block", "    return -1 from function", "end of the block", "define the main function", "    read m read h read a read x read y read h2 read a2 read x2 read y2", "    create integers t, t2 with t = result of run get with h, a as arguments, t2 = result of run get2 with h2, a2 as arguments", "    if t is -1 or t2 is -1, return print \"-1\\n\", 0 from function", "    if t is t2, return print t print '\\n', 0 from function", "    create integers l, l2 with l = result of run get with a, a as arguments, l2 = result of run get2 with a2, a2, as arguments", "    if bitwise not l and t - t2 is greater than or equal to 0 and not ( (t-t2)%l2), return print t print '\\n', 0 from function", "    if bitwise not l2 and t - t2 is greater than or equal to 0 and not ( (t-t2) % l2 ), return print t print '\\n', 0 from function", "    if l is -1 or l2 is -1, return print \"-1\\n\", 0", "    create integer val with val = t2 - t", "    for i =1, lim = m bitshift left 1 to i is less than or equal to lim, incrementing i", "        if (val + 1ll * i * l2 is greater than or equal to 0 and not ((val + 1ll * i * l2) % l)) return print 1ll * i * l2 + t2 print '\\n', 0 from function", "    print \"-1\\n\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["int m, h, h2, a, a2, x, x2, y, y2;", "int get(int s, int e) {", "    for (int i = 0; i < m; ++i) {", "        s = (1ll * s * x + y) % m;", "        if (s == e) return i + 1;", "    }", "    return -1;", "}", "int get2(int s, int e) {", "    for (int i = 0; i < m; ++i) {", "        s = (1ll * s * x2 + y2) % m;", "        if (s == e) return i + 1;", "    }", "    return -1;", "}", "int main() {", "    cin >> m >> h >> a >> x >> y >> h2 >> a2 >> x2 >> y2;", "    int t = get(h, a), t2 = get2(h2, a2);", "    if (t == -1 || t2 == -1) return cout << \"-1\\n\", 0;", "    if (t == t2) return cout << t << '\\n', 0;", "    int l = get(a, a), l2 = get2(a2, a2);", "    if (~l && t2 - t >= 0 && !((t2 - t) % l)) return cout << t2 << '\\n', 0;", "    if (~l2 && t - t2 >= 0 && !((t - t2) % l2)) return cout << t << '\\n', 0;", "    if (l == -1 || l2 == -1) return cout << \"-1\\n\", 0;", "    int val = t2 - t;", "    for (int i = 1, lim = m << 1; i <= lim; ++i)", "        if (val + 1ll * i * l2 >= 0 && !((val + 1ll * i * l2) % l)) return cout << 1ll * i * l2 + t2 << '\\n', 0;", "    cout << \"-1\\n\";", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["create long longs x, y", "declare exgcd with long longs a, b as arguments returning long long", "    if b is 0", "        set x to 1", "        set y to 0", "        return a from function", "    end of the block", "    crate long long d with d = result of run exgcd with b, a % b as arguments", "    create long long t with t = x", "    set x to y", "    set y to t - a / b * y", "    return d from function", "end of the block", "define the main function", "    create long longs m, h1, a1, x1, y1, h2, a2, x2, y2", "    create long longs p1, p2, q1, q2", "    while read m read h1 read a1 read x1 read y1 read h2 read a2 read x2 read y2 is true", "        set p1 to p2 to q1 to q2 to 0", "        for i = 1 to 2 * m inclusive", "            set h1 to (h1 * x1 + y1) % m", "            if h1 is a1", "                if p1 is 0", "                    set p1 to i", "                else if q1 is 0", "                    set q1 to i - p1", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "        for i = 1 to 2 * m inclusive", "            set h2 to (h2 * x2 + y2) % m", "            if h2 is a2", "                if p2 is 0", "                    set p2 to i", "                else if q2 is 0", "                    set q2 to i - p2", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "        create long long d with d = result of run exgcd with q1, -q2 as arguments", "        create long long c with c = p2 - p1", "        if d is 0", "            print \"-1\"", "            break current loop iteration", "        end of the block", "        if c % d", "            print \"-1\"", "            break current loop iteration", "        end of the block", "        if p1 is 0 or p2 is 0", "            print \"-1\"", "            break current loop iteration", "        end of the block", "        if q2 is 0 and q1 is 0 and p1 is not p2", "            print \"-1\"", "            break current loop iteration", "        end of the block", "        if ( q2 is 0 and p2 - p1 is less than 0 ) or ( q2 is 0 and p1 - p2 is less than 0 )", "            print \"-1\"", "            break current loop iteration", "        end of the block", "        create long long k with k = c / d", "        set x to x * k", "        set y to y * k", "        if d is less than 0, set d to -d", "        if x is less than 0 or y is less than 0", "            while 1 is true", "                increment x by q2 / d", "                increment y by q1 / d", "                if x is greater than or equal to 0 and y is greater than or equal to 0, break loop", "            end of the block", "        end of the block", "        if x is greater than 0 and y is greater than 0", "            while 1 is true", "                decrement x by q2 / d", "                decrement y by q1 / d", "                if x is less than 0 or y is less than 0, break loop", "            end of the block", "            increment x by q2 / d", "            increment y by q1 / d", "        end of the block", "        create long long ans with ans = x * q1 + p1", "        print ans print newline", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long x, y;", "long long exgcd(long long a, long long b) {", "    if (b == 0) {", "        x = 1;", "        y = 0;", "        return a;", "    }", "    long long d = exgcd(b, a % b);", "    long long t = x;", "    x = y;", "    y = t - a / b * y;", "    return d;", "}", "int main() {", "    long long m, h1, a1, x1, y1, h2, a2, x2, y2;", "    long long p1, p2, q1, q2;", "    while (cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2) {", "        p1 = p2 = q1 = q2 = 0;", "        for (long long i = 1; i <= 2 * m; i++) {", "            h1 = (h1 * x1 + y1) % m;", "            if (h1 == a1) {", "                if (p1 == 0)", "                    p1 = i;", "                else if (q1 == 0) {", "                    q1 = i - p1;", "                    break;", "                }", "            }", "        }", "        for (long long i = 1; i <= 2 * m; i++) {", "            h2 = (h2 * x2 + y2) % m;", "            if (h2 == a2) {", "                if (p2 == 0)", "                    p2 = i;", "                else if (q2 == 0) {", "                    q2 = i - p2;", "                    break;", "                }", "            }", "        }", "        long long d = exgcd(q1, -q2);", "        long long c = p2 - p1;", "        if (d == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (c % d) {", "            puts(\"-1\");", "            continue;", "        }", "        if (p1 == 0 || p2 == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (q2 == 0 && q1 == 0 && p1 != p2) {", "            puts(\"-1\");", "            continue;", "        }", "        if ((q2 == 0 && p2 - p1 < 0) || (q1 == 0 && p1 - p2 < 0)) {", "            puts(\"-1\");", "            continue;", "        }", "        long long k = c / d;", "        x *= k;", "        y *= k;", "        if (d < 0) d = -d;", "        if (x < 0 || y < 0) {", "            while (1) {", "                x += q2 / d;", "                y += q1 / d;", "                if (x >= 0 && y >= 0) break;", "            }", "        }", "        if (x > 0 && y > 0) {", "            while (1) {", "                x -= q2 / d;", "                y -= q1 / d;", "                if (x < 0 || y < 0) break;", "            }", "            x += q2 / d;", "            y += q1 / d;", "        }", "        long long ans = x * q1 + p1;", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["define the main function", "    create long long integers m, x1, x2, y1, y2, h1, h2, a1, and a2", "    read m", "    read h1 and a1", "    read x1 and y1", "    read h2 and a2", "    read x2 and y2", "    create integer vector ans1", "    create integer vector ans2", "    create long long integer total = 0", "    while total is less than 2 * m", "        if h1 is equal to a1, append total to ans1", "        if h2 is equal to a2, append total to ans2", "        increment total", "        set h1 to the result of (h1 * x1 + y1) % m", "        set h2 to the result of (h2 * x2 + y2) % m;", "    end of the block", "    if ans1.empty() is truthy or ans2.empty() is truthy", "        print \"-1\"", "        return to indicate successful execution", "    end of the block", "    create long long integers t1 = ans1[0] and t2 = ans2[0]", "    create long long integer s1 = ans1[1] - ans1[0]", "    create long long integer s2 = ans2[1] - ans2[0]", "    for i = 0 to 5e6", "        if t1 is equal to t2", "            print t1", "            return to indicate successful execution", "        end of the block", "        if t1 is less than t2", "            set t1 to t1 + s1", "        else", "            set t2 to t2 + s2", "        end of the block", "    end of the block", "    print \"-1\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    long long m, x1, x2, y1, y2, h1, h2, a1, a2;", "    cin >> m;", "    cin >> h1 >> a1;", "    cin >> x1 >> y1;", "    cin >> h2 >> a2;", "    cin >> x2 >> y2;", "    vector<int> ans1;", "    vector<int> ans2;", "    long long total = 0;", "    while (total < 2 * m) {", "        if (h1 == a1) { ans1.push_back(total); }", "        if (h2 == a2) { ans2.push_back(total); }", "        total++;", "        h1 = (h1 * x1 + y1) % m;", "        h2 = (h2 * x2 + y2) % m;", "    }", "    if (ans1.empty() || ans2.empty()) {", "        cout << \"-1\" << endl;", "        return 0;", "    }", "    long long t1 = ans1[0], t2 = ans2[0];", "    long long s1 = ans1[1] - ans1[0];", "    long long s2 = ans2[1] - ans2[0];", "    for (int i = 0; i <= 5e6; i++) {", "        if (t1 == t2) {", "            cout << t1 << endl;", "            return 0;", "        }", "        if (t1 < t2) {", "            t1 += s1;", "        } else {", "            t2 += s2;", "        }", "    }", "    cout << \"-1\" << endl;", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["declare long long variables x and y", "exgcd is a long long function with long long arguments a and b", "    if b = 0", "        assign 1 to x", "        assign 0 to y", "        return a", "    end of the block", "    declare long long d = exgcd(b, a % b)", "    declare long long variable t = x", "    change x to y", "    set y to t - a / b * y", "    return d", "end of the block", "define the main function", "    create long longs m, h1, a1, x1, y1, h2, a2, x2 and y2", "    declare long longs p1, p2, q1 and q2", "    loop, reading m, h1, a1, x1, y1, h2, a2, x2 and y2 from the input", "        change p1, p2, q1 and q2 to 0", "        change i from 1 to 2 * m inclusive in a loop", "            set h1 to (h1 * x1 + y1) % m", "            if h1 is equal to a1", "                if p1 = 0", "                    assign i to p1", "                else if q1 is equal to 0", "                    assign i - p1 to q1", "                    break the loop", "                end of the block", "            end of the block", "        end of the block", "        for i = 1 to 2 * m inclusive", "            set h2 to (h2 * x2 + y2) % m", "            if h2 = a2", "                if p2 = 0", "                    set p2 to i", "                else if q2 = 0", "                    assign i - p2 to q2", "                    stop the loop", "                end of the block", "            end of the block", "        end of the block", "        declare long long d = exgcd(q1, -q2)", "        create long long c = p2 - p1", "        if d = 0", "            print \"-1\" to stdout", "            go to the start of the loop", "        end of the block", "        if c % d != 0", "            print \"-1\" to stdout", "            skip the rest of the loop", "        end of the block", "        if p1 = 0 or p2 is equal to 0", "            print \"-1\" to stdout", "            skip the rest of the loop", "        end of the block", "        if q2 = 0 and q1 = 0 and p1 != p2", "            print \"-1\" to stdout", "            skip the rest of the loop", "        end of the block", "        if (q2 = 0 and p2 - p1 < 0) is true or (q1 = 0 and p1 - p2 < 0) is true", "            print \"-1\" to standard output", "            skip the rest of the loop", "        end of the block", "        declare long long variable k = c / d", "        multiply x by k", "        multiply y by k", "        if d is less than 0, invert the sign of d", "        if x < 0 or y < 0", "            start infinite loop", "                add q2 / d to x", "                add q1 / d to y", "                if x >= 0 and y >= 0, stop the loop", "            end of the block", "        end of the block", "        if x > 0 and y > 0", "            start infinite loop", "                subtract q2 / d from x", "                decrease y by q1 / d", "                if x < 0 or y < 0", "                    add q2 / d to x", "                    add q1 / d to y", "                    break", "                end of the block", "            end of the block", "        end of the block", "        create long long ans = x * q1 + p1", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long x, y;", "long long exgcd(long long a, long long b) {", "    if (b == 0) {", "        x = 1;", "        y = 0;", "        return a;", "    }", "    long long d = exgcd(b, a % b);", "    long long t = x;", "    x = y;", "    y = t - a / b * y;", "    return d;", "}", "int main() {", "    long long m, h1, a1, x1, y1, h2, a2, x2, y2;", "    long long p1, p2, q1, q2;", "    while (cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2) {", "        p1 = p2 = q1 = q2 = 0;", "        for (long long i = 1; i <= 2 * m; i++) {", "            h1 = (h1 * x1 + y1) % m;", "            if (h1 == a1) {", "                if (p1 == 0)", "                    p1 = i;", "                else if (q1 == 0) {", "                    q1 = i - p1;", "                    break;", "                }", "            }", "        }", "        for (long long i = 1; i <= 2 * m; i++) {", "            h2 = (h2 * x2 + y2) % m;", "            if (h2 == a2) {", "                if (p2 == 0)", "                    p2 = i;", "                else if (q2 == 0) {", "                    q2 = i - p2;", "                    break;", "                }", "            }", "        }", "        long long d = exgcd(q1, -q2);", "        long long c = p2 - p1;", "        if (d == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (c % d) {", "            puts(\"-1\");", "            continue;", "        }", "        if (p1 == 0 || p2 == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (q2 == 0 && q1 == 0 && p1 != p2) {", "            puts(\"-1\");", "            continue;", "        }", "        if ((q2 == 0 && p2 - p1 < 0) || (q1 == 0 && p1 - p2 < 0)) {", "            puts(\"-1\");", "            continue;", "        }", "        long long k = c / d;", "        x *= k;", "        y *= k;", "        if (d < 0) d = -d;", "        if (x < 0 || y < 0) {", "            while (1) {", "                x += q2 / d;", "                y += q1 / d;", "                if (x >= 0 && y >= 0) break;", "            }", "        }", "        if (x > 0 && y > 0) {", "            while (1) {", "                x -= q2 / d;", "                y -= q1 / d;", "                if (x < 0 || y < 0) {", "                    x += q2 / d;", "                    y += q1 / d;", "                    break;", "                }", "            }", "        }", "        long long ans = x * q1 + p1;", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["x, y = long long integers", "declare exgcd that takes two arguments, long long integers a and b", "    if b is 0", "        set x to 1", "        set y to 0", "        return a", "    end of the block", "    d = long long integer set to exgcd of b and a modulo b", "    t = long long integer set to x", "    set x to y", "    set y to t - a / b * y", "    return d", "end of the block", "define the main function", "    m, h1, a1, x1, y1, h2, a2, x2, y2 = long long integers", "    p1, p2, q1, q2 = long long integers", "    while reading m, h1, a1, x1, y1, h2, a2, x2, and y2", "        set p1, p2, q1, q2 to 0", "        for i = 1 to 2 * m inclusive", "            set h1 to h1 * x1 + y1 modulo m", "            if h1 is a1", "                if p1 is 0", "                    set p1 to i", "                else if q1 is 0", "                    set q1 to i - p1", "                    break", "                end of the block", "            end of the block", "        end of the block", "        for i =1 to 2 * m inclusive", "            set h2 to h2 * x2 + y2 modulo m", "            if h2 is a2", "                if p2 is 0", "                    set p2 to i", "                else if q2 is 0", "                    set q2 to i - p2", "                    break", "                end of the block", "            end of the block", "        end of the block", "        d = long long integer set to exgcd of q1 and -q2", "        c = long long integer set to p2 - p1", "        if d is 0", "            puts \"-1\"", "            continue", "        end of the block", "        if c modulo d", "            puts \"-1\"", "            continue", "        end of the block", "        if p1 is 0 or p2 is 0", "            puts \"-1\"", "            continue", "        end of the block", "        if q2 is 0 and q1 is 0 and p1 != p2", "            puts \"-1\"", "            continue", "        end of the block", "        if q2 is 0 and p2 - p1 < 0 or q1 is 0 and p1 - p2 < 0", "            puts \"-1\"", "            continue", "        end of the block", "        k = long long integer set to c / d", "        multiply x by k", "        multiply y by k", "        if d < 0, set d to -d", "        if x < 0 or y < 0", "            while 1 exists", "                add q2 / d to x", "                add q1 / d to y", "                if x >= 0 and y >= 0, break", "            end of the block", "        end of the block", "        if x > 0 and y > 0", "            while 1 exists", "                subtract q2 / d from x", "                subtract q1 / d from y", "                if x < 0 or y < 0", "                    add q2 / d to x", "                    add q1 / d to y", "                    break", "                end of the block", "            end of the block", "        end of the block", "        ans = long long integer set to x * q1 + p1", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long x, y;", "long long exgcd(long long a, long long b) {", "    if (b == 0) {", "        x = 1;", "        y = 0;", "        return a;", "    }", "    long long d = exgcd(b, a % b);", "    long long t = x;", "    x = y;", "    y = t - a / b * y;", "    return d;", "}", "int main() {", "    long long m, h1, a1, x1, y1, h2, a2, x2, y2;", "    long long p1, p2, q1, q2;", "    while (cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2) {", "        p1 = p2 = q1 = q2 = 0;", "        for (long long i = 1; i <= 2 * m; i++) {", "            h1 = (h1 * x1 + y1) % m;", "            if (h1 == a1) {", "                if (p1 == 0)", "                    p1 = i;", "                else if (q1 == 0) {", "                    q1 = i - p1;", "                    break;", "                }", "            }", "        }", "        for (long long i = 1; i <= 2 * m; i++) {", "            h2 = (h2 * x2 + y2) % m;", "            if (h2 == a2) {", "                if (p2 == 0)", "                    p2 = i;", "                else if (q2 == 0) {", "                    q2 = i - p2;", "                    break;", "                }", "            }", "        }", "        long long d = exgcd(q1, -q2);", "        long long c = p2 - p1;", "        if (d == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (c % d) {", "            puts(\"-1\");", "            continue;", "        }", "        if (p1 == 0 || p2 == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (q2 == 0 && q1 == 0 && p1 != p2) {", "            puts(\"-1\");", "            continue;", "        }", "        if ((q2 == 0 && p2 - p1 < 0) || (q1 == 0 && p1 - p2 < 0)) {", "            puts(\"-1\");", "            continue;", "        }", "        long long k = c / d;", "        x *= k;", "        y *= k;", "        if (d < 0) d = -d;", "        if (x < 0 || y < 0) {", "            while (1) {", "                x += q2 / d;", "                y += q1 / d;", "                if (x >= 0 && y >= 0) break;", "            }", "        }", "        if (x > 0 && y > 0) {", "            while (1) {", "                x -= q2 / d;", "                y -= q1 / d;", "                if (x < 0 || y < 0) {", "                    x += q2 / d;", "                    y += q1 / d;", "                    break;", "                }", "            }", "        }", "        long long ans = x * q1 + p1;", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["n = long long and h, a, x, y = long long array of size 2 each", "vis = two dimensional long long array of sizes 1000001 and 2", "b = long long vector array of size 2", "ans = two dimensional long long array of sizes 2 and 2", "val = two dimensional long long array of sizes 1000001 and 2", "in function pass taking a long long i and returning a long long", "    set vis[h[i]][i] to 1", "    set val[h[i]][i] to 1", "    va = long long with va = 2", "    append h[i] to b[i]", "    loop while vis[h[i]][i] is 1", "        set h[i] to (x[i] * h[i] + y[i]) mod m", "        append h[i] to b[i]", "        if vis[h[i]][i] is 0", "            increment vis[h[i]][i]", "            set val[h[i]][i] to va", "            increment va", "        else", "            set ans[i][0] to val[h[i]][i] - 1", "            set ans[i][1] to va - val[h[i]][i]", "            return to indicate successful execution", "        end of the block", "    end of the block", "end of the block", "define the main function", "    read m then h[0] then a[0] then x[0] then y[0] then h[1] then a[1] then x[1] then y[1]", "    call pass of 0", "    call pass of 1", "    if vis[a[0]][0] or vis[a[1]][1] is 0", "        print -1", "        return to indicate successful execution", "    end of the block", "    va1, va2 = long long with va1 = val[a[0]][0] and va2 = val[a[1]][1]", "    cy1, cy2 = long long with cy1 = ans[0][1] and cy2 = ans[1][1]", "    if val[a[0]][0] is val[a[1]][1]", "        print val[a[0]][0] - 1", "        return to indicate successful execution", "    end of the block", "    if val[a[0]][0] is less or equal to ans[0][0] and val[a[1]][1] is less or equal to ans[1][0]", "        print -1", "        return to indicate successful execution", "    else if val[a[0]][0] is less or equal to ans[0][0] or val[a[1]][1] is less or equal to ans[1][0]", "        mo = long long with mo = absolute of val[a[1]][1] - val[a[0]][0]", "        if val[a[0]][0] is greater than val[a[1]][1] and val[a[0]][0] is less or equal to ans[0][0]", "            if mo is a multiple of ans[1][1]", "                print val[a[0]][0] - 1", "            else", "                print -1", "        else if val[a[0]][0] is less than val[a[1]][1] and val[a[1]][1] is less or equal to ans[1][0]", "            if mo is a multiple of ans[0][1]", "                print val[a[1]][1] - 1", "            else", "                print -1", "        else", "            print -1", "        end of the block", "        return to indicate successful execution", "    end of the block", "    if absolute of va1 - va2 mod __gcd of cy1 and cy2 is not 0", "        print -1", "        return to indicate successful execution", "    end of the block", "    for i = 0 to 1000001", "        va = long long with va = va1 - va2 + i * cy1", "        if va is a multiple of cy2 and va is greater or equal to 0", "            print va1 + i * cy1 - 1", "            return to indicate successful execution", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long m, h[2], a[2], x[2], y[2];", "long long vis[1000001][2];", "vector<long long> b[2];", "long long ans[2][2];", "long long val[1000001][2];", "long long pass(long long i) {", "    vis[h[i]][i] = 1;", "    val[h[i]][i] = 1;", "    long long va = 2;", "    b[i].push_back(h[i]);", "    while (vis[h[i]][i] == 1) {", "        h[i] = (x[i] * h[i] + y[i]) % m;", "        b[i].push_back(h[i]);", "        if (vis[h[i]][i] == 0) {", "            vis[h[i]][i]++;", "            val[h[i]][i] = va;", "            va++;", "        } else {", "            ans[i][0] = val[h[i]][i] - 1;", "            ans[i][1] = va - val[h[i]][i];", "            return 0;", "        }", "    }", "}", "int main() {", "    cin >> m >> h[0] >> a[0] >> x[0] >> y[0] >> h[1] >> a[1] >> x[1] >> y[1];", "    pass(0);", "    pass(1);", "    if (vis[a[0]][0] == 0 || vis[a[1]][1] == 0) {", "        cout << -1 << endl;", "        return 0;", "    }", "    long long va1 = val[a[0]][0], va2 = val[a[1]][1];", "    long long cy1 = ans[0][1], cy2 = ans[1][1];", "    if (val[a[0]][0] == val[a[1]][1]) {", "        cout << val[a[0]][0] - 1 << endl;", "        return 0;", "    }", "    if (val[a[0]][0] <= ans[0][0] && val[a[1]][1] <= ans[1][0]) {", "        cout << -1 << endl;", "        return 0;", "    } else if (val[a[0]][0] <= ans[0][0] || val[a[1]][1] <= ans[1][0]) {", "        long long mo = abs(val[a[1]][1] - val[a[0]][0]);", "        if (val[a[0]][0] > val[a[1]][1] && val[a[0]][0] <= ans[0][0]) {", "            if (mo % ans[1][1] == 0)", "                cout << val[a[0]][0] - 1 << endl;", "            else", "                cout << -1 << endl;", "        } else if (val[a[0]][0] < val[a[1]][1] && val[a[1]][1] <= ans[1][0]) {", "            if (mo % ans[0][1] == 0)", "                cout << val[a[1]][1] - 1 << endl;", "            else", "                cout << -1 << endl;", "        } else {", "            cout << -1 << endl;", "        }", "        return 0;", "    }", "    if (abs(va1 - va2) % __gcd(cy1, cy2) != 0) {", "        cout << -1 << endl;", "        return 0;", "    }", "    for (long long i = 0; i < 1000001; i++) {", "        long long va = va1 - va2 + i * cy1;", "        if (va % cy2 == 0 && va >= 0) {", "            cout << va1 + i * cy1 - 1 << endl;", "            return 0;", "        }", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["x, y = long long integers", "declare exgcd that takes two arguments, long long integers a and b", "    if b is 0", "        set x to 1", "        set y to 0", "        return a", "    end of the block", "    d = long long integer set to exgcd of b and a modulo b", "    t = long long integer set to x", "    set x to y", "    set y to t - a / b * y", "    return d", "end of the block", "define the main function", "    m, h1, a1, x1, y1, h2, a2, x2, y2 = long long integers", "    p1, p2, q1, q2 = long long integers", "    while reading m, h1, a1, x1, y1, h2, a2, x2, and y2", "        set p1, p2, q1, q2 to 0", "        for i = 1 to 2 * m inclusive", "            set h1 to h1 * x1 + y1 modulo m", "            if h1 is a1", "                if p1 is 0", "                    set p1 to i", "                else if q1 is 0", "                    set q1 to i - p1", "                    break", "                end of the block", "            end of the block", "        end of the block", "        for i =1 to 2 * m inclusive", "            set h2 to h2 * x2 + y2 modulo m", "            if h2 is a2", "                if p2 is 0", "                    set p2 to i", "                else if q2 is 0", "                    set q2 to i - p2", "                    break", "                end of the block", "            end of the block", "        end of the block", "        d = long long integer set to exgcd of q1 and -q2", "        c = long long integer set to p2 - p1", "        if d is 0", "            puts \"-1\"", "            continue", "        end of the block", "        if c modulo d", "            puts \"-1\"", "            continue", "        end of the block", "        if p1 is 0 or p2 is 0", "            puts \"-1\"", "            continue", "        end of the block", "        if q2 is 0 and q1 is 0 and p1 != p2", "            puts \"-1\"", "            continue", "        end of the block", "        if q2 is 0 and p2 - p1 < 0 or q1 is 0 and p1 - p2 < 0", "            puts \"-1\"", "            continue", "        end of the block", "        k = long long integer set to c / d", "        multiply x by k", "        multiply y by k", "        if d < 0, set d to -d", "        if x < 0 or y < 0", "            while 1 exists", "                add q2 / d to x", "                add q1 / d to y", "                if x >= 0 and y >= 0, break", "            end of the block", "        end of the block", "        if x > 0 and y > 0", "            while 1 exists", "                subtract q2 / d from x", "                subtract q1 / d from y", "                if x < 0 or y < 0", "                    add q2 / d to x", "                    add q1 / d to y", "                    break", "                end of the block", "            end of the block", "        end of the block", "        ans = long long integer set to x * q1 + p1", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long x, y;", "long long exgcd(long long a, long long b) {", "    if (b == 0) {", "        x = 1;", "        y = 0;", "        return a;", "    }", "    long long d = exgcd(b, a % b);", "    long long t = x;", "    x = y;", "    y = t - a / b * y;", "    return d;", "}", "int main() {", "    long long m, h1, a1, x1, y1, h2, a2, x2, y2;", "    long long p1, p2, q1, q2;", "    while (cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2) {", "        p1 = p2 = q1 = q2 = 0;", "        for (long long i = 1; i <= 2 * m; i++) {", "            h1 = (h1 * x1 + y1) % m;", "            if (h1 == a1) {", "                if (p1 == 0)", "                    p1 = i;", "                else if (q1 == 0) {", "                    q1 = i - p1;", "                    break;", "                }", "            }", "        }", "        for (long long i = 1; i <= 2 * m; i++) {", "            h2 = (h2 * x2 + y2) % m;", "            if (h2 == a2) {", "                if (p2 == 0)", "                    p2 = i;", "                else if (q2 == 0) {", "                    q2 = i - p2;", "                    break;", "                }", "            }", "        }", "        long long d = exgcd(q1, -q2);", "        long long c = p2 - p1;", "        if (d == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (c % d) {", "            puts(\"-1\");", "            continue;", "        }", "        if (p1 == 0 || p2 == 0) {", "            puts(\"-1\");", "            continue;", "        }", "        if (q2 == 0 && q1 == 0 && p1 != p2) {", "            puts(\"-1\");", "            continue;", "        }", "        if ((q2 == 0 && p2 - p1 < 0) || (q1 == 0 && p1 - p2 < 0)) {", "            puts(\"-1\");", "            continue;", "        }", "        long long k = c / d;", "        x *= k;", "        y *= k;", "        if (d < 0) d = -d;", "        if (x < 0 || y < 0) {", "            while (1) {", "                x += q2 / d;", "                y += q1 / d;", "                if (x >= 0 && y >= 0) break;", "            }", "        }", "        if (x > 0 && y > 0) {", "            while (1) {", "                x -= q2 / d;", "                y -= q1 / d;", "                if (x < 0 || y < 0) {", "                    x += q2 / d;", "                    y += q1 / d;", "                    break;", "                }", "            }", "        }", "        long long ans = x * q1 + p1;", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "547A", "pseudocode_lines": ["create long long variables m, h1, a1, x1, h2, a2, x2, y2, y, p1, p2, t1 and t2", "define the main function", "    read input to m, h1, a1, x1, y, h2, a2, x2 and y2", "    for i from 1 to 1e7 inclusive", "        declare long long ans1 = (((h1 * x1 * 1LL) + y) % m)", "        declare long long ans2 = (((h2 * x2 * 1LL) + y2) % m)", "        change h1 to ans1 and h2 to ans2", "        if a1 is equal to ans1", "            if p1 = 0", "                assign i to p1", "            else if t1 = 0", "                change t1 to i - p1", "        end of the block", "        if a2 is equal to ans2", "            if p2 is false", "                change p2 to i", "            else if t2 = 0", "                change t2 to i - p2", "        end of the block", "    end of the block", "    if p1 is false or p2 is false, return !(cout<< -1 << endl)", "    for i from 1 to 1e7 inclusive", "        if p1 is equal to p2, return !(cout << p1 << endl)", "        if p1 is less than p2", "            increase p1 by t1", "        else", "            add t2 to p2", "    end of the block", "    print -1", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long m, h1, a1, x1, h2, a2, x2, y2, y, p1, p2, t1, t2;", "int main() {", "    cin >> m >> h1 >> a1 >> x1 >> y >> h2 >> a2 >> x2 >> y2;", "    for (int i = 1; i <= 1e7; i++) {", "        long long ans1 = (((h1 * x1 * 1LL) + y) % m);", "        long long ans2 = (((h2 * x2 * 1LL) + y2) % m);", "        h1 = ans1, h2 = ans2;", "        if (a1 == ans1) {", "            if (!p1)", "                p1 = i;", "            else if (!t1)", "                t1 = i - p1;", "        }", "        if (a2 == ans2) {", "            if (!p2)", "                p2 = i;", "            else if (!t2)", "                t2 = i - p2;", "        }", "    }", "    if (!p1 || !p2) return !(cout << -1 << endl);", "    for (int i = 1; i <= 1e7; i++) {", "        if (p1 == p2) return !(cout << p1 << endl);", "        if (p1 < p2)", "            p1 += t1;", "        else", "            p2 += t2;", "    }", "    cout << -1 << endl;", "    return 0;", "}"], "testcases": [[["5", "4 2", "1 1", "0 1", "2 3"], ["3"]], [["1023", "1 2", "1 0", "1 2", "1 1"], ["-1"]], [["1023", "1 2", "1 2", "1 2", "1 2"], ["512"]], [["2", "0 1", "1 0", "1 0", "0 1"], ["-1"]], [["17", "15 12", "15 12", "12 14", "1 11"], ["-1"]], [["29", "4 0", "1 1", "25 20", "16 0"], ["170"]], [["91", "9 64", "75 32", "60 81", "35 46"], ["5"]], [["91", "38 74", "66 10", "40 76", "17 13"], ["-1"]], [["100", "11 20", "99 31", "60 44", "45 64"], ["3"]], [["9999", "4879 6224", "63 7313", "4279 6583", "438 1627"], ["4"]], [["10000", "8681 4319", "9740 5980", "24 137", "462 7971"], ["-1"]], [["100000", "76036 94415", "34870 43365", "56647 26095", "88580 30995"], ["5"]], [["100000", "90861 77058", "96282 30306", "45940 25601", "17117 48287"], ["-1"]], [["1000000", "220036 846131", "698020 485511", "656298 242999", "766802 905433"], ["5297"]], [["1000000", "536586 435396", "748740 34356", "135075 790803", "547356 534911"], ["9958"]], [["1000000", "661647 690400", "864868 326304", "581148 452012", "327910 197092"], ["1021"]], [["1000000", "233404 949288", "893747 751429", "692094 57207", "674400 583468"], ["-1"]], [["1000000", "358465 242431", "977171 267570", "170871 616951", "711850 180241"], ["-1"]], [["1000000", "707719 502871", "60595 816414", "649648 143990", "525107 66615"], ["-1"]], [["999983", "192005 690428", "971158 641039", "974183 1882", "127579 312317"], ["470479"]], [["999983", "420528 808305", "387096 497121", "596163 353326", "47177 758204"], ["548500"]], [["999983", "651224 992349", "803017 393514", "258455 402487", "888310 244420"], ["126531"]], [["999983", "151890 906425", "851007 9094", "696594 968184", "867017 157783"], ["-1"]], [["999983", "380412 325756", "266945 907644", "318575 83081", "786616 603671"], ["-1"]], [["999983", "570797 704759", "723177 763726", "978676 238272", "708387 89886"], ["-1"]], [["999983", "408725 408721", "1 1", "378562 294895", "984270 0"], ["499981500166"]], [["999983", "639420 639416", "1 1", "507684 954997", "466316 0"], ["499981500166"]], [["999983", "867942 867939", "1 1", "963840 536667", "899441 0"], ["999964000320"]], [["999961", "664221 931770", "530542 936292", "885122 515424", "868560 472225"], ["-1"]], [["999961", "744938 661980", "845908 76370", "237399 381935", "418010 938769"], ["203332"]], [["999961", "89288 89284", "1 1", "764559 727291", "999322 0"], ["999920001595"]], [["1000000", "661703 661699", "1 1", "425192 823944", "854093 0"], ["-1"]], [["100019", "98811 98807", "1 1", "91322 14787", "72253 0"], ["10003600319"]], [["524288", "199980 199978", "1 1", "236260 325076", "81773 0"], ["-1"]], [["524288", "47283 489031", "305624 183135", "141146 335913", "519614 150715"], ["19"]], [["524288", "83398 33987", "158854 211502", "36433 18758", "218812 517001"], ["-1"]], [["912488", "681639 518634", "168348 212018", "255428 4970", "31726 664998"], ["34838"]], [["129081", "128454 36771", "116353 2940", "95311 22200", "579 118683"], ["68409"]], [["129081", "45717 106320", "121816 69841", "5161 4872", "102076 100020"], ["-1"]], [["4", "1 2", "1 1", "0 1", "2 0"], ["-1"]], [["3", "1 0", "1 1", "1 2", "2 0"], ["5"]], [["3", "0 2", "1 0", "2 0", "2 1"], ["-1"]], [["2", "0 1", "0 1", "0 1", "0 1"], ["1"]], [["2", "0 1", "1 0", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 1", "0 1", "1 1"], ["1"]], [["2", "0 1", "1 1", "0 1", "1 0"], ["-1"]], [["2", "0 1", "1 0", "0 1", "1 1"], ["-1"]], [["1000000", "1 0", "1 1", "1 0", "1 1"], ["999999"]], [["1000000", "2 1", "1 1", "2 0", "1 2"], ["999999"]], [["6", "1 2", "3 5", "0 2", "4 2"], ["1"]], [["545", "26 40", "477 97", "454 394", "15 264"], ["90"]], [["3", "1 0", "0 1", "0 2", "1 0"], ["-1"]], [["1376", "1227 1349", "313 193", "1113 361", "1314 23"], ["338"]], [["1376", "1322 1320", "1 1", "776 495", "38 0"], ["-1"]], [["1376", "152 405", "1083 1328", "76 856", "49 629"], ["-1"]], [["1392", "1060 796", "512 242", "1386 1346", "1310 1199"], ["-1"]], [["100000", "5827 41281", "41285 70821", "99199 42807", "65667 94952"], ["13770"]], [["100000", "51157 27741", "40564 90740", "45270 52367", "31585 92150"], ["-1"]], [["100000", "70525 70522", "1 1", "89465 30265", "33279 0"], ["-1"]], [["10", "1 6", "7 9", "1 4", "4 0"], ["1"]], [["10", "9 6", "0 8", "3 0", "2 7"], ["-1"]], [["10", "4 2", "1 1", "7 3", "9 0"], ["-1"]], [["6", "5 1", "1 1", "3 1", "3 0"], ["-1"]], [["999983", "3 1", "1 1", "8 1", "2 0"], ["499981500168"]], [["18", "3 9", "3 0", "1 3", "3 0"], ["1"]], [["18", "1 3", "3 0", "3 9", "3 0"], ["1"]], [["16", "1 0", "2 0", "1 2", "2 0"], ["-1"]], [["16", "8 0", "2 0", "1 4", "2 0"], ["2"]], [["999983", "2 1", "2 0", "1 0", "1 1"], ["499982500152"]], [["324", "2 54", "3 0", "27 108", "2 0"], ["-1"]], [["999993", "499997 1", "2 3", "1 4", "1 1"], ["39325724721"]], [["999983", "1 37827", "1 1", "2 192083", "3 0"], ["404303164556"]], [["41222", "30759 26408", "31332 39118", "5026 25812", "1 9030"], ["58900566"]], [["100007", "2 1", "2 0", "3 1", "1 1"], ["434330399"]], [["8", "0 4", "4 4", "1 4", "2 0"], ["2"]]]}, {"problem_id": "475A", "pseudocode_lines": ["create integer k", "define the main function", "    read k", "    print \"+------------------------+\\n\"", "    print \"|\"", "    for i = 0 to 11 exclusive", "        if i is 0", "            if i + 1 is less than or equal to k", "                print \"O.\"", "            else", "                print \"#.\"", "        else", "            if i * 3 + 2 is less than or equal to k", "                print \"O.\"", "            else", "                print \"#.\"", "        end of the block", "    end of the block", "    print \"|D|)\\n\"", "    print \"|\"", "    for i = 0 to 11 exclusive", "        if i is 0", "            if i + 2 is less than or equal to k", "                print \"O.\"", "            else", "                print \"#.\"", "        else", "            if i * 3 + 3 is less than or equal to k", "                print \"O.\"", "            else", "                print \"#.\"", "        end of the block", "    end of the block", "    print \"|.|\\n\"", "    print \"|\"", "    for i = 0 to 11 exclusive", "        if 3 is less than or equal to k and i is 0", "            print \"O.\"", "        else if i is 0", "            print \"#.\"", "        else", "            print \"..\"", "    end of the block", "    print \"..|\\n\"", "    print \"|\"", "    for i = 0 to 11 exclusive", "        if i is 0", "            if i + 4 is less than or equal to k", "                print \"O.\"", "            else", "                print \"#.\"", "        else", "            if i * 3 + 4 is less than or equal to k", "                print \"O.\"", "            else", "                print \"#.\"", "        end of the block", "    end of the block", "    print \"|.|)\\n\"", "    print \"+------------------------+\\n\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["int k;", "int main() {", "    cin >> k;", "    cout << \"+------------------------+\\n\";", "    cout << \"|\";", "    for (int i = 0; i < 11; i++) {", "        if (i == 0) {", "            if (i + 1 <= k)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        } else {", "            if ((i)*3 + 2 <= k)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        }", "    }", "    cout << \"|D|)\\n\";", "    cout << \"|\";", "    for (int i = 0; i < 11; i++) {", "        if (i == 0) {", "            if (i + 2 <= k)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        } else {", "            if ((i)*3 + 3 <= k)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        }", "    }", "    cout << \"|.|\\n\";", "    cout << \"|\";", "    for (int i = 0; i < 11; i++) {", "        if (3 <= k && i == 0)", "            cout << \"O.\";", "        else if (i == 0)", "            cout << \"#.\";", "        else", "            cout << \"..\";", "    }", "    cout << \"..|\\n\";", "    cout << \"|\";", "    for (int i = 0; i < 11; i++) {", "        if (i == 0) {", "            if (i + 4 <= k)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        } else {", "            if ((i)*3 + 4 <= k)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        }", "    }", "    cout << \"|.|)\\n\";", "    cout << \"+------------------------+\\n\";", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["let Pi be a constant double with value is equal to arc cosine of (-1.0)", "define the main function", "    let k be a integer", "    read k", "    print +------------------------+ and newline", "    print |", "    if (k is greater than 0)", "        print O.", "    else do the following", "        print #.", "    let c be a integer with value c is equal to (k - 4) / 3", "    if ((k - 4) modulus 3 is greater than 0), increase c by 1", "    for ( i =0 to 10 exclusive )", "        if (i is less than c)", "            print O.", "        else do the following", "            print #.", "    end of the block", "    print |D| and newline", "    print |", "    if (k is greater than 1)", "        print O.", "    else do the following", "        print #.", "    let the value of c is equal to (k - 4) / 3", "    if ((k - 4) modulus 3 is greater than 1), increase c value by 1", "    for ( i = 0 to 10 exclusive )", "        if (i is less than c)", "            print O.", "        else, do the following", "            print #.", "    end of the block", "    print |.| and newline", "    print |", "    if (k is greater than 2)", "        print O", "    else do the following", "        print #", "    print .......................| and newline", "    print |", "    if (k is greater than 3)", "        print O.", "    else do the following", "        print #.", "    let the value of c is equal to (k - 4) / 3", "    for ( i =0 to 10 exclusive )", "        if (i is less than c)", "            print O.", "        else do the following", "            print #.", "    end of the block", "    print |.| and newline", "    print +------------------------+ and newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["const double Pi = acos(-1.0);", "int main() {", "    int k;", "    cin >> k;", "    cout << \"+------------------------+\\n\";", "    cout << \"|\";", "    if (k > 0)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    int c = (k - 4) / 3;", "    if ((k - 4) % 3 > 0) c++;", "    for (int i = 0; i < 10; i++) {", "        if (i < c)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "    }", "    cout << \"|D|)\\n\";", "    cout << \"|\";", "    if (k > 1)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    c = (k - 4) / 3;", "    if ((k - 4) % 3 > 1) c++;", "    for (int i = 0; i < 10; i++) {", "        if (i < c)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "    }", "    cout << \"|.|\\n\";", "    cout << \"|\";", "    if (k > 2)", "        cout << \"O\";", "    else", "        cout << \"#\";", "    cout << \".......................|\\n\";", "    cout << \"|\";", "    if (k > 3)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    c = (k - 4) / 3;", "    for (int i = 0; i < 10; i++) {", "        if (i < c)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "    }", "    cout << \"|.|)\\n\";", "    cout << \"+------------------------+\\n\";", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["define the main function", "    create int n", "    read n", "    print +------------------------+", "    print |", "    if n >= 1", "        print O.", "    else", "        print #.", "    for a=1 to 10 inclusive", "        if n >= 3* a +2", "            print O.", "        else", "            print #.", "    print |D| and a newline", "    print |", "    if n >= 2", "        print O.", "    otherwise", "        print #.", "    for a=1 to 10 inclusive", "        if n >= 3 * a + 3", "            print O.", "        otherwise", "            print #.", "    print |.| and a newline", "    print |", "    if n >= 3", "        print O.", "    else", "        print #.", "    print ......................| and a newline", "    print |", "    if n >= 4", "        print O.", "    else", "        print #.", "    for a=1 to 10 inclusive", "        if n >= 3*a+4", "            print O.", "        else", "            print #.", "    print |.|) and a newline", "    print +------------------------+ and a newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n;", "    cin >> n;", "    cout << \"+------------------------+\" << endl;", "    cout << \"|\";", "    if (n >= 1)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    for (int a = 1; a <= 10; a++)", "        if (n >= 3 * a + 2)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "    cout << \"|D|)\" << endl;", "    cout << \"|\";", "    if (n >= 2)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    for (int a = 1; a <= 10; a++)", "        if (n >= 3 * a + 3)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "    cout << \"|.|\" << endl;", "    cout << \"|\";", "    if (n >= 3)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    cout << \"......................|\" << endl;", "    cout << \"|\";", "    if (n >= 4)", "        cout << \"O.\";", "    else", "        cout << \"#.\";", "    for (int a = 1; a <= 10; a++)", "        if (n >= 3 * a + 4)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "    cout << \"|.|)\" << endl;", "    cout << \"+------------------------+\" << endl;", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["define the main function", "    let p be an int", "    read p", "    if p is equal to 0", "        print +------------------------+", "        print |#.#.#.#.#.#.#.#.#.#.#.|D|)", "        print |#.#.#.#.#.#.#.#.#.#.#.|.|", "        print |#.......................|", "        print |#.#.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 1", "        print +------------------------+ and a newline", "        print |O.#.#.#.#.#.#.#.#.#.#.|D|) and a newline", "        print |#.#.#.#.#.#.#.#.#.#.#.|.| and a newline", "        print |#.......................|", "        print |#.#.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 2", "        print +------------------------+", "        print |O.#.#.#.#.#.#.#.#.#.#.|D|) and a newline", "        print |O.#.#.#.#.#.#.#.#.#.#.|.|", "        print |#.......................|", "        print |#.#.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+ and a newline", "    end of the block", "    if p is equal to 3", "        print +------------------------+", "        print |O.#.#.#.#.#.#.#.#.#.#.|D|)", "        print |O.#.#.#.#.#.#.#.#.#.#.|.| and a newline", "        print |O.......................| and a newline", "        print |#.#.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 4", "        print +------------------------+", "        print |O.#.#.#.#.#.#.#.#.#.#.|D|)", "        print |O.#.#.#.#.#.#.#.#.#.#.|.| and a newline", "        print |O.......................|", "        print |O.#.#.#.#.#.#.#.#.#.#.|.|) and a newline", "        print +------------------------+", "    end of the block", "    if p is equal to 5", "        print +------------------------+", "        print |O.O.#.#.#.#.#.#.#.#.#.|D|)", "        print |O.#.#.#.#.#.#.#.#.#.#.|.|", "        print |O.......................| and a newline", "        print |O.#.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+ and a newline", "    end of the block", "    if p is 6", "        print +------------------------+", "        print |O.O.#.#.#.#.#.#.#.#.#.|D|)", "        print |O.O.#.#.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.#.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 7", "        print +------------------------+", "        print |O.O.#.#.#.#.#.#.#.#.#.|D|)", "        print |O.O.#.#.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 8", "        print +------------------------+", "        print |O.O.O.#.#.#.#.#.#.#.#.|D|)", "        print |O.O.#.#.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 9", "        print +------------------------+", "        print |O.O.O.#.#.#.#.#.#.#.#.|D|)", "        print |O.O.O.#.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.#.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 10", "        print +------------------------+", "        print |O.O.O.#.#.#.#.#.#.#.#.|D|)", "        print |O.O.O.#.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 11", "        print +------------------------+", "        print |O.O.O.O.#.#.#.#.#.#.#.|D|)", "        print |O.O.O.#.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.#.#.#.#.#.#.#.#.|.|) and a newline", "        print +------------------------+", "    end of the block", "    if p is 12", "        print +------------------------+", "        print |O.O.O.O.#.#.#.#.#.#.#.|D|)", "        print |O.O.O.O.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.#.#.#.#.#.#.#.#.|.|)", "        print +------------------------+ and a newline", "    end of the block", "    if p is 13", "        print +------------------------+", "        print |O.O.O.O.#.#.#.#.#.#.#.|D|)", "        print |O.O.O.O.#.#.#.#.#.#.#.|.| and a newline", "        print |O.......................|", "        print |O.O.O.O.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 14", "        print +------------------------+", "        print |O.O.O.O.O.#.#.#.#.#.#.|D|)", "        print |O.O.O.O.#.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 15", "        print +------------------------+ and a newline", "        print |O.O.O.O.O.#.#.#.#.#.#.|D|)", "        print |O.O.O.O.O.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.#.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 16", "        print +------------------------+", "        print |O.O.O.O.O.#.#.#.#.#.#.|D|)", "        print |O.O.O.O.O.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 17", "        print +------------------------+ and a newline", "        print |O.O.O.O.O.O.#.#.#.#.#.|D|)", "        print |O.O.O.O.O.#.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 18", "        print +------------------------+", "        print |O.O.O.O.O.O.#.#.#.#.#.|D|)", "        print |O.O.O.O.O.O.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.#.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 19", "        print +------------------------+", "        print |O.O.O.O.O.O.#.#.#.#.#.|D|)", "        print |O.O.O.O.O.O.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 20", "        print +------------------------+", "        print |O.O.O.O.O.O.O.#.#.#.#.|D|)", "        print |O.O.O.O.O.O.#.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 21", "        print +------------------------+", "        print |O.O.O.O.O.O.O.#.#.#.#.|D|)", "        print |O.O.O.O.O.O.O.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.#.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 22", "        print +------------------------+", "        print |O.O.O.O.O.O.O.#.#.#.#.|D|)", "        print |O.O.O.O.O.O.O.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 23", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.#.#.#.|D|)", "        print |O.O.O.O.O.O.O.#.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 24", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.#.#.#.|D|)", "        print |O.O.O.O.O.O.O.O.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.#.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 25", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.#.#.#.|D|)", "        print |O.O.O.O.O.O.O.O.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 26", "        print +------------------------+ and a newline", "        print |O.O.O.O.O.O.O.O.O.#.#.|D|)", "        print |O.O.O.O.O.O.O.O.#.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 27", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.#.#.|D|)", "        print |O.O.O.O.O.O.O.O.O.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.#.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 28", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.#.#.|D|)", "        print |O.O.O.O.O.O.O.O.O.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 29", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.O.#.|D|)", "        print |O.O.O.O.O.O.O.O.O.#.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 30", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.O.#.|D|)", "        print |O.O.O.O.O.O.O.O.O.O.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.#.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 31", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.O.#.|D|)", "        print |O.O.O.O.O.O.O.O.O.O.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.O.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 32", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.O.O.|D|)", "        print |O.O.O.O.O.O.O.O.O.O.#.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.O.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is 33", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.O.O.|D|)", "        print |O.O.O.O.O.O.O.O.O.O.O.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.O.#.|.|)", "        print +------------------------+", "    end of the block", "    if p is equal to 34", "        print +------------------------+", "        print |O.O.O.O.O.O.O.O.O.O.O.|D|)", "        print |O.O.O.O.O.O.O.O.O.O.O.|.|", "        print |O.......................|", "        print |O.O.O.O.O.O.O.O.O.O.O.|.|)", "        print +------------------------+", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int p;", "    cin >> p;", "    if (p == 0) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|#.......................|\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 1) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|#.......................|\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 2) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|#.......................|\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 3) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 4) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 5) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 6) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 7) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 8) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 9) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 10) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 11) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 12) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.#.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 13) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 14) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 15) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.#.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 16) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 17) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 18) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.#.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 19) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 20) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 21) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.#.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 22) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 23) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 24) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.#.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 25) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 26) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 27) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.#.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 28) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 29) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 30) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.#.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 31) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 32) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.O.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 33) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.O.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.O.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.#.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    if (p == 34) {", "        cout << \"+------------------------+\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.O.|D|)\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.O.|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << \"|O.O.O.O.O.O.O.O.O.O.O.|.|)\" << endl;", "        cout << \"+------------------------+\" << endl;", "    }", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["define the main function", "    declare integer variable n", "    read n", "    print \"+------------------------+\\n\"", "    create 2d character array arr 4 by 11 elements", "    for i = 0 to 4 exclusive", "        for integer j = 0 to 11 exclusive set arr[i][j] to '#'", "    for integer j = 0 to 11 exclusive", "        for integer i = 0 to 4 exclusive", "            if i = 2 && j is greater than 0", "                set arr[i][j] to '.'", "            else if n", "                set arr[i][j] to 'O'", "                decrease n", "            end of the block", "        end of the block", "    end of the block", "    for i = 0 to 4 exclusive", "        print \"|\"", "        for integer j = 0 to 11 exclusive print arr[i][j] and '.'", "        if i = 0", "            print \"|D|)\\n\"", "        else if i = 1", "            print \"|.|\\n\"", "        else if i = 2", "            print \"..|\\n\"", "        else", "            print \"|.|)\\n\"", "    end of the block", "    print \"+------------------------+\\n\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n;", "    cin >> n;", "    cout << \"+------------------------+\\n\";", "    char arr[4][11];", "    for (int i = 0; i < 4; i++)", "        for (int j = 0; j < 11; j++) arr[i][j] = '#';", "    for (int j = 0; j < 11; j++) {", "        for (int i = 0; i < 4; i++) {", "            if (i == 2 && j > 0)", "                arr[i][j] = '.';", "            else if (n) {", "                arr[i][j] = 'O';", "                n--;", "            }", "        }", "    }", "    for (int i = 0; i < 4; i++) {", "        cout << \"|\";", "        for (int j = 0; j < 11; j++) { cout << arr[i][j] << \".\"; }", "        if (i == 0)", "            cout << \"|D|)\\n\";", "        else if (i == 1)", "            cout << \"|.|\\n\";", "        else if (i == 2)", "            cout << \"..|\\n\";", "        else", "            cout << \"|.|)\\n\";", "    }", "    cout << \"+------------------------+\\n\";", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["define the main function", "    create integer k", "    read k", "    create string array s with length 6", "    set s[0] to \"+------------------------+\"", "    set s[1] to \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\"", "    set s[2] to \"|#.#.#.#.#.#.#.#.#.#.#.|.|\"", "    set s[3] to \"|#.......................|\"", "    set s[4] to \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\"", "    set s[5] to \"+------------------------+\"", "    create integer idx to 0", "    while k", "        for i=0 to 6 exclusive", "            if s[i][idx] is equal to '#'", "                decrement k", "                set s[i][idx] to 'O'", "                if not k break", "            end of the block", "        increment idx", "    end of the block", "    for i=0 to 6 exclusive print s[i]", "end of the block"], "code_lines": ["int main() {", "    int k;", "    cin >> k;", "    string s[6];", "    s[0] = \"+------------------------+\";", "    s[1] = \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\";", "    s[2] = \"|#.#.#.#.#.#.#.#.#.#.#.|.|\";", "    s[3] = \"|#.......................|\";", "    s[4] = \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\";", "    s[5] = \"+------------------------+\";", "    int idx = 0;", "    while (k) {", "        for (int i = 0; i < 6; i++)", "            if (s[i][idx] == '#') {", "                k--;", "                s[i][idx] = 'O';", "                if (!k) break;", "            }", "        idx++;", "    }", "    for (int i = 0; i < 6; i++) cout << s[i] << endl;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["define the main function", "    create integer k", "    read k", "    create string array str with size 6", "    set str[0] to \"+------------------------+\"", "    set str[1] to \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\"", "    set str[2] to \"|#.#.#.#.#.#.#.#.#.#.#.|.|\"", "    set str[3] to \"|#.......................|\"", "    set str[4] to \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\"", "    set str[5] to \"+------------------------+\"", "    for j = 1 to 23 exclusive, increment j by 2", "        for i = 1 to 5 exclusive", "            if k is greater than 0", "                if i is 3 and j is not 1, break current loop iteration", "                set str[i][j] to 'O', decrement k", "            end of the block", "        end of the block", "    end of the block", "    for i = 0 to 6 exclusive, print str[i] print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int k;", "    cin >> k;", "    string str[6];", "    str[0] = \"+------------------------+\";", "    str[1] = \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\";", "    str[2] = \"|#.#.#.#.#.#.#.#.#.#.#.|.|\";", "    str[3] = \"|#.......................|\";", "    str[4] = \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\";", "    str[5] = \"+------------------------+\";", "    for (int j = 1; j < 23; j += 2) {", "        for (int i = 1; i < 5; i++) {", "            if (k > 0) {", "                if (i == 3 && j != 1) continue;", "                str[i][j] = 'O', k--;", "            }", "        }", "    }", "    for (int i = 0; i < 6; i++) { cout << str[i] << endl; }", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["n, i, j, ans = long long with ans = 9999999999999 and a,db = two dimensional arrays of long longs with the sizes 201 and 201 each", "define the main function", "    read n", "    print \"+------------------------+\"", "    if n is greater than 2", "        decrement n", "        print '|'", "        for i = 1 to 11 inclusive", "            if (n + 2) / 3 is greater or equal to i", "                print \"O.\"", "            else", "                print \"#.\"", "        end of the block", "        print \"|D|)\"", "        print '|'", "        for i = 1 to 11 inclusive", "            if (n + 1) / 3 is greater or equal to i", "                print \"O.\"", "            else", "                print \"#.\"", "        end of the block", "        print \"|.|\"", "        print \"|O.......................|\"", "        print '|'", "        for i = 1 to 11 inclusive", "            if n / 3 is greater or equal to i", "                print \"O.\"", "            else", "                print \"#.\"", "        end of the block", "        print \"|.|)\"", "    else", "        print '|'", "        if n is greater than 0", "            print \"O.\"", "        else", "            print \"#.\"", "        print \"#.#.#.#.#.#.#.#.#.#.|D|)\"", "        print '|'", "        if n is greater than 1", "            print \"O.\"", "        else", "            print \"#.\"", "        print \"#.#.#.#.#.#.#.#.#.#.|.|\"", "        print \"|#.......................|\"", "        print \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\"", "    end of the block", "    print \"+------------------------+\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long n, a[201][201], i, j, dp[201][201], ans = 9999999999999;", "int main() {", "    cin >> n;", "    cout << \"+------------------------+\" << endl;", "    if (n >= 3) {", "        n -= 1;", "        cout << '|';", "        for (i = 1; i <= 11; i++) {", "            if ((n + 2) / 3 >= i)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        }", "        cout << \"|D|)\" << endl;", "        cout << '|';", "        for (i = 1; i <= 11; i++) {", "            if ((n + 1) / 3 >= i)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        }", "        cout << \"|.|\" << endl;", "        cout << \"|O.......................|\" << endl;", "        cout << '|';", "        for (i = 1; i <= 11; i++) {", "            if (n / 3 >= i)", "                cout << \"O.\";", "            else", "                cout << \"#.\";", "        }", "        cout << \"|.|)\" << endl;", "    } else {", "        cout << '|';", "        if (n >= 1)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "        cout << \"#.#.#.#.#.#.#.#.#.#.|D|)\" << endl;", "        cout << '|';", "        if (n >= 2)", "            cout << \"O.\";", "        else", "            cout << \"#.\";", "        cout << \"#.#.#.#.#.#.#.#.#.#.|.|\" << endl;", "        cout << \"|#.......................|\" << endl;", "        cout << \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\" << endl;", "    }", "    cout << \"+------------------------+\" << endl;", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["declare long long variable k", "create string array s with 8 elements", "define the main function", "    set s[1] to \"+------------------------+\"", "    set s[2] to \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\"", "    set s[3] to \"|#.#.#.#.#.#.#.#.#.#.#.|.|\"", "    set s[4] to \"|#.......................|\"", "    set s[5] to \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\"", "    change s[6] to \" +------------------------+\"", "    read k", "    loop j from 1 to 25 inclusive", "        loop i from 2 to 5 inclusive", "            break if k = 0", "            if s[i][j] is '#', change s[i][j] to 'O' and decrement k by one", "        end of the block", "        break if k = 0", "    end of the block", "    for i from 1 to 6 inclusive, print s[i] and \"\\n\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long k;", "string s[8];", "int main() {", "    s[1] = \"+------------------------+\";", "    s[2] = \"|#.#.#.#.#.#.#.#.#.#.#.|D|)\";", "    s[3] = \"|#.#.#.#.#.#.#.#.#.#.#.|.|\";", "    s[4] = \"|#.......................|\";", "    s[5] = \"|#.#.#.#.#.#.#.#.#.#.#.|.|)\";", "    s[6] = \"+------------------------+\";", "    cin >> k;", "    for (long long j = 1; j <= 25; j++) {", "        for (long long i = 2; i <= 5; i++) {", "            if (k == 0) break;", "            if (s[i][j] == '#') s[i][j] = 'O', k--;", "        }", "        if (k == 0) break;", "    }", "    for (long long i = 1; i <= 6; i++) cout << s[i] << \"\\n\";", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "475A", "pseudocode_lines": ["create int k", "create char matrix s of dimensions 4x11", "define the main function", "    for i = 0 to 4 exclusive", "        for j = 0 to 11 exclusive set s[i][j] to #", "    set the elements of the second row of s to .", "    read k", "    for j=0 to 11 exclusive", "        for i=0 to 4 exclusive", "            if k is true and s[i][j] is #", "                set s[i][j] to character O", "                decrease k by 1", "            end of the block", "    print +------------------------+ and move to newline", "    for i = 0 to 4 exclusive", "        print |", "        for j = 0 to 11 exclusive print s[i][j] and .", "        if i is 0", "            print |D|) and move to newline", "        else if i is equal to 1", "            print |.| and move to newline", "        else if i is 2", "            print ..| and move to newline", "        else do the following", "            print |.|) and move to newline", "    end of the block", "    print +------------------------+", "    return to indicate successful execution", "end of the block"], "code_lines": ["int k;", "char s[4][11];", "int main() {", "    for (int i = 0; i < 4; i++)", "        for (int j = 0; j < 11; j++) s[i][j] = '#';", "    for (int i = 1; i < 11; i++) s[2][i] = '.';", "    cin >> k;", "    for (int j = 0; j < 11; j++)", "        for (int i = 0; i < 4; i++)", "            if (k && s[i][j] == '#') {", "                s[i][j] = 'O';", "                k--;", "            }", "    cout << \"+------------------------+\\n\";", "    for (int i = 0; i < 4; i++) {", "        cout << '|';", "        for (int j = 0; j < 11; j++) cout << s[i][j] << '.';", "        if (i == 0)", "            cout << \"|D|)\\n\";", "        else if (i == 1)", "            cout << \"|.|\\n\";", "        else if (i == 2)", "            cout << \"..|\\n\";", "        else", "            cout << \"|.|)\\n\";", "    }", "    cout << \"+------------------------+\\n\";", "    return 0;", "}"], "testcases": [[["9"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["20"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["30"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["5"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["0"], ["+------------------------+", "|#.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["1"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|#.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["2"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|#.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["3"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|#.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["4"], ["+------------------------+", "|O.#.#.#.#.#.#.#.#.#.#.|D|)", "|O.#.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["6"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.#.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["7"], ["+------------------------+", "|O.O.#.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["8"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.#.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.#.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["10"], ["+------------------------+", "|O.O.O.#.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["11"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.#.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["12"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.#.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["13"], ["+------------------------+", "|O.O.O.O.#.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["14"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.#.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["15"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.#.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["16"], ["+------------------------+", "|O.O.O.O.O.#.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["17"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.#.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["18"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.#.#.#.#.#.#.|.|)", "+------------------------+"]], [["19"], ["+------------------------+", "|O.O.O.O.O.O.#.#.#.#.#.|D|)", "|O.O.O.O.O.O.#.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["21"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.#.#.#.#.#.|.|)", "+------------------------+"]], [["22"], ["+------------------------+", "|O.O.O.O.O.O.O.#.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["23"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.#.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["24"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.#.#.#.#.|.|)", "+------------------------+"]], [["25"], ["+------------------------+", "|O.O.O.O.O.O.O.O.#.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["26"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.#.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["27"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.#.#.#.|.|)", "+------------------------+"]], [["28"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.#.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["29"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.#.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.#.#.|.|)", "+------------------------+"]], [["31"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.#.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["32"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.#.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["33"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.#.|.|)", "+------------------------+"]], [["34"], ["+------------------------+", "|O.O.O.O.O.O.O.O.O.O.O.|D|)", "|O.O.O.O.O.O.O.O.O.O.O.|.|", "|O.......................|", "|O.O.O.O.O.O.O.O.O.O.O.|.|)", "+------------------------+"]]]}, {"problem_id": "718A", "pseudocode_lines": ["Grades = char array of size 200005", "define the main function", "    let lfp, zp, n, i, t, last be integers with lfp = -1", "    let carryFlag, pf be boolean with carryFlag = false, pf = false", "    read n, t, Grades[1]", "    for i = 1 to n inclusive", "        if Grades[i] == '.'", "            increment i", "            break out of for loop", "        end of the block", "    end of the block", "    while Grades[i] and t > 0", "        if Grades[i] is greater than or equal to '5'", "            set lfp to i", "            break", "        end of the block", "        increment i", "    end of the block", "    while (-lfp) is not zero and t > 0 and pf is false", "        if Grades[lfp - 1] == '.'", "            set Grades[lfp - 1] to 0", "            increment Grades[lfp - 2]", "            update last to lfp - 2", "            set pf to true", "        else", "            update Grades[lfp] to 0", "            increment Grades[lfp - 1]", "            update last to lfp - 1", "        end of the block", "        set lfp to -1", "        decrement t", "        if Grades[last] > '9'", "            let c be integer with c = 1", "            set Grades[last] to '0'", "            decrement last", "            while c is not zero", "                set c to 0", "                if Grades[last] == '.'", "                    set Grades[last] to '\\0'", "                    increment Grades[last - 1]", "                    decrement last by 2", "                    set pf to true", "                else if last == '\\0'", "                    set carryFlag to true", "                    set Grades[0] to '1'", "                    break", "                else", "                    increment Grades[last]", "                end of the block", "                if Grades[last] > '9'", "                    if not pf", "                        set Grades[last] to '\\0'", "                    else", "                        set Grades[last] to '0'", "                    decrement last", "                    set c to 1", "                end of the block", "                if Grades[last] >= '5', set lfp to last", "            end of the block", "        else if Grades[last] >= '5'", "            set lfp to last", "        end of the block", "    end of the block", "    if carryFlag is true", "        print out first element of Grades", "    else", "        print out second element of Grades", "    return to indicate successful execution", "end of the block"], "code_lines": ["char Grades[200005];", "int main() {", "    int lfp = -1, zp, n, i, t, last;", "    bool carryFlag = false, pf = false;", "    cin >> n >> t >> (Grades + 1);", "    for (i = 1; i <= n; ++i) {", "        if (Grades[i] == '.') {", "            ++i;", "            break;", "        }", "    }", "    while (Grades[i] && t > 0) {", "        if (Grades[i] >= '5') {", "            lfp = i;", "            break;", "        }", "        ++i;", "    }", "    while ((~lfp) && t > 0 && !pf) {", "        if (Grades[lfp - 1] == '.') {", "            Grades[lfp - 1] = 0;", "            Grades[lfp - 2]++;", "            last = lfp - 2;", "            pf = true;", "        } else {", "            Grades[lfp] = 0;", "            Grades[lfp - 1]++;", "            last = lfp - 1;", "        }", "        lfp = -1;", "        t--;", "        if (Grades[last] > '9') {", "            int c = 1;", "            Grades[last] = '0';", "            last--;", "            while (c) {", "                c = 0;", "                if (Grades[last] == '.') {", "                    Grades[last] = '\\0';", "                    Grades[last - 1]++;", "                    last -= 2;", "                    pf = true;", "                } else if (last == '\\0') {", "                    carryFlag = true;", "                    Grades[0] = '1';", "                    break;", "                } else {", "                    Grades[last]++;", "                }", "                if (Grades[last] > '9') {", "                    if (!pf)", "                        Grades[last] = '\\0';", "                    else", "                        Grades[last] = '0';", "                    last--;", "                    c = 1;", "                }", "                if (Grades[last] >= '5') lfp = last;", "            }", "        } else if (Grades[last] >= '5') {", "            lfp = last;", "        }", "    }", "    if (carryFlag)", "        cout << Grades << endl;", "    else", "        cout << (Grades + 1) << endl;", "    return 0;", "}"], "testcases": [[["6 1", "10.245"], ["10.25"]], [["6 2", "10.245"], ["10.3"]], [["3 100", "9.2"], ["9.2"]], [["12 5", "872.04488525"], ["872.1"]], [["35 8", "984227318.2031144444444444494637612"], ["984227318.2031144445"]], [["320 142", "2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367"], ["2704701300865535.4322233122334341141300111132201024201313230103441442011243032"]], [["5 10", "1.555"], ["2"]], [["6 1", "0.9454"], ["1"]], [["7 1000000000", "239.923"], ["240"]], [["7 235562", "999.999"], ["1000"]], [["9 2", "23999.448"], ["23999.5"]], [["9 3", "23999.448"], ["24000"]], [["13 1", "761.044449428"], ["761.04445"]], [["3 1", "0.1"], ["0.1"]], [["3 1", "9.9"], ["10"]], [["3 1", "0.9"], ["1"]], [["31 15", "2707786.24030444444444444724166"], ["2707786.24031"]], [["4 100", "99.9"], ["100"]], [["3 10", "9.9"], ["10"]], [["22 100", "11111111111111111111.5"], ["11111111111111111112"]], [["3 1", "9.5"], ["10"]], [["8 100", "9.444445"], ["10"]], [["6 2", "999.45"], ["1000"]], [["3 100", "9.9"], ["10"]], [["18 100", "9.4444444444454444"], ["10"]], [["16 999", "9595959.95959595"], ["9595960"]], [["4 100", "99.5"], ["100"]], [["5 1", "999.9"], ["1000"]], [["4 1", "5.59"], ["6"]], [["4 1", "99.5"], ["100"]], [["4 1", "99.9"], ["100"]], [["18 6", "102345678999.44449"], ["102345679000"]], [["3 3", "9.9"], ["10"]], [["5 1", "99.99"], ["100"]], [["7 1", "99999.9"], ["100000"]], [["3 121", "9.9"], ["10"]], [["8 6", "9.444445"], ["10"]], [["3 100", "8.9"], ["9"]], [["10 1", "999.999999"], ["1000"]], [["5 100", "6.666"], ["7"]], [["4 100", "9.99"], ["10"]], [["6 1", "9.9999"], ["10"]], [["4 10", "99.9"], ["100"]], [["5 1", "9.999"], ["10"]], [["3 1231", "9.9"], ["10"]], [["5 2", "999.9"], ["1000"]], [["5 100", "144.5"], ["145"]], [["5 100", "99.45"], ["100"]], [["10 1", "0.50444445"], ["1"]], [["7 1", "1.51111"], ["2"]], [["5 1", "199.9"], ["200"]], [["3 100", "9.5"], ["10"]], [["7 1000", "409.659"], ["410"]], [["4 10", "99.5"], ["100"]], [["4 10", "10.9"], ["11"]], [["4 1", "19.5"], ["20"]]]}, {"problem_id": "718A", "pseudocode_lines": ["Grades = char array of size 200005", "define the main function", "    let lfp, zp, n, i, t, last be integers with lfp = -1", "    let carryFlag, pf be boolean with carryFlag = false, pf = false", "    read n, t, Grades[1]", "    for i = 1 to n inclusive", "        if Grades[i] == '.'", "            increment i", "            break out of for loop", "        end of the block", "    end of the block", "    while Grades[i] and t > 0", "        if Grades[i] is greater than or equal to '5'", "            set lfp to i", "            break", "        end of the block", "        increment i", "    end of the block", "    while (-lfp) is not zero and t > 0 and pf is false", "        if Grades[lfp - 1] == '.'", "            set Grades[lfp - 1] to 0", "            increment Grades[lfp - 2]", "            update last to lfp - 2", "            set pf to true", "        else", "            update Grades[lfp] to 0", "            increment Grades[lfp - 1]", "            update last to lfp - 1", "        end of the block", "        set lfp to -1", "        decrement t", "        if Grades[last] > '9'", "            let c be integer with c = 1", "            set Grades[last] to '0'", "            decrement last", "            while c is not zero", "                set c to 0", "                if Grades[last] == '.'", "                    set Grades[last] to '\\0'", "                    increment Grades[last - 1]", "                    decrement last by 2", "                    set pf to true", "                else if last == '\\0'", "                    set carryFlag to true", "                    set Grades[0] to '1'", "                    break", "                else", "                    increment Grades[last]", "                end of the block", "                if Grades[last] > '9'", "                    if not pf", "                        set Grades[last] to '\\0'", "                    else", "                        set Grades[last] to '0'", "                    decrement last", "                    set c to 1", "                end of the block", "                if Grades[last] >= '5', set lfp to last", "            end of the block", "        else if Grades[last] >= '5'", "            set lfp to last", "        end of the block", "    end of the block", "    if carryFlag is true", "        print out first element of Grades", "    else", "        print out second element of Grades", "    return to indicate successful execution", "end of the block"], "code_lines": ["char Grades[200005];", "int main() {", "    int lfp = -1, zp, n, i, t, last;", "    bool carryFlag = false, pf = false;", "    cin >> n >> t >> (Grades + 1);", "    for (i = 1; i <= n; ++i) {", "        if (Grades[i] == '.') {", "            ++i;", "            break;", "        }", "    }", "    while (Grades[i] && t > 0) {", "        if (Grades[i] >= '5') {", "            lfp = i;", "            break;", "        }", "        ++i;", "    }", "    while ((~lfp) && t > 0 && !pf) {", "        if (Grades[lfp - 1] == '.') {", "            Grades[lfp - 1] = 0;", "            Grades[lfp - 2]++;", "            last = lfp - 2;", "            pf = true;", "        } else {", "            Grades[lfp] = 0;", "            Grades[lfp - 1]++;", "            last = lfp - 1;", "        }", "        lfp = -1;", "        t--;", "        if (Grades[last] > '9') {", "            int c = 1;", "            Grades[last] = '0';", "            last--;", "            while (c) {", "                c = 0;", "                if (Grades[last] == '.') {", "                    Grades[last] = '\\0';", "                    Grades[last - 1]++;", "                    last -= 2;", "                    pf = true;", "                } else if (last == '\\0') {", "                    carryFlag = true;", "                    Grades[0] = '1';", "                    break;", "                } else {", "                    Grades[last]++;", "                }", "                if (Grades[last] > '9') {", "                    if (!pf)", "                        Grades[last] = '\\0';", "                    else", "                        Grades[last] = '0';", "                    last--;", "                    c = 1;", "                }", "                if (Grades[last] >= '5') lfp = last;", "            }", "        } else if (Grades[last] >= '5') {", "            lfp = last;", "        }", "    }", "    if (carryFlag)", "        cout << Grades << endl;", "    else", "        cout << (Grades + 1) << endl;", "    return 0;", "}"], "testcases": [[["6 1", "10.245"], ["10.25"]], [["6 2", "10.245"], ["10.3"]], [["3 100", "9.2"], ["9.2"]], [["12 5", "872.04488525"], ["872.1"]], [["35 8", "984227318.2031144444444444494637612"], ["984227318.2031144445"]], [["320 142", "2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367"], ["2704701300865535.4322233122334341141300111132201024201313230103441442011243032"]], [["5 10", "1.555"], ["2"]], [["6 1", "0.9454"], ["1"]], [["7 1000000000", "239.923"], ["240"]], [["7 235562", "999.999"], ["1000"]], [["9 2", "23999.448"], ["23999.5"]], [["9 3", "23999.448"], ["24000"]], [["13 1", "761.044449428"], ["761.04445"]], [["3 1", "0.1"], ["0.1"]], [["3 1", "9.9"], ["10"]], [["3 1", "0.9"], ["1"]], [["31 15", "2707786.24030444444444444724166"], ["2707786.24031"]], [["4 100", "99.9"], ["100"]], [["3 10", "9.9"], ["10"]], [["22 100", "11111111111111111111.5"], ["11111111111111111112"]], [["3 1", "9.5"], ["10"]], [["8 100", "9.444445"], ["10"]], [["6 2", "999.45"], ["1000"]], [["3 100", "9.9"], ["10"]], [["18 100", "9.4444444444454444"], ["10"]], [["16 999", "9595959.95959595"], ["9595960"]], [["4 100", "99.5"], ["100"]], [["5 1", "999.9"], ["1000"]], [["4 1", "5.59"], ["6"]], [["4 1", "99.5"], ["100"]], [["4 1", "99.9"], ["100"]], [["18 6", "102345678999.44449"], ["102345679000"]], [["3 3", "9.9"], ["10"]], [["5 1", "99.99"], ["100"]], [["7 1", "99999.9"], ["100000"]], [["3 121", "9.9"], ["10"]], [["8 6", "9.444445"], ["10"]], [["3 100", "8.9"], ["9"]], [["10 1", "999.999999"], ["1000"]], [["5 100", "6.666"], ["7"]], [["4 100", "9.99"], ["10"]], [["6 1", "9.9999"], ["10"]], [["4 10", "99.9"], ["100"]], [["5 1", "9.999"], ["10"]], [["3 1231", "9.9"], ["10"]], [["5 2", "999.9"], ["1000"]], [["5 100", "144.5"], ["145"]], [["5 100", "99.45"], ["100"]], [["10 1", "0.50444445"], ["1"]], [["7 1", "1.51111"], ["2"]], [["5 1", "199.9"], ["200"]], [["3 100", "9.5"], ["10"]], [["7 1000", "409.659"], ["410"]], [["4 10", "99.5"], ["100"]], [["4 10", "10.9"], ["11"]], [["4 1", "19.5"], ["20"]]]}, {"problem_id": "718A", "pseudocode_lines": ["define the main function", "    declare ints n and t", "    read user input to n and t", "    new string variable s", "    read variable s from the input", "    define new integer called pointPos = -1", "    declare integer variable with name start = -1", "    start for loop from i = 0 to length of s exclusive incrementing i", "        if pointPos != -1 and s[i] - '0' >= 5", "            set start to i", "            break", "        end of the block", "        if s[i] is equal to '.', set the value of pointPos to i", "    end of the block", "    if start != - 1", "        define new boolean called next with value true", "        while start > pointPos and next and t > 0", "            if start - pointPos is equal to 1", "                create integer variable nextVal = s[start - 2] - '0' + 1", "                if nextVal is equal to 10", "                    set the value of s[start - 2] to '0'", "                else", "                    assign nextVal + '0' to s[start - 2]", "                    set the value of next to false", "                end of the block", "            else", "                create integer variable nextVal with value s[start-1] - '0' + 1", "                if nextVal < 5 or t - 1 = 0, assign false to next", "                assign the new value = nextVal + '0' to s[start - 1]", "            end of the block", "            decrement start", "            decrement t", "        end of the block", "        remove elements from the start + 1 to the end of s", "        if *(--s.end()) == '.', remove last element of s", "        change start to pointPos - 1", "        while next and start >= 0", "            if start is equal to 0", "                insert '0' to the start of s", "                set start to 1", "            end of the block", "            declare integer variable with name nextVal and value s[start-1] - '0' + 1", "            if nextVal is equal to 10", "                assign '0' to s[start - 1]", "            else", "                assign the new value = nextVal + '0' to s[start - 1]", "                set next to false", "            end of the block", "            decrement start", "        end of the block", "    end of the block", "    print s to the standard output", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n, t;", "    cin >> n >> t;", "    string s;", "    cin >> s;", "    int pointPos = -1;", "    int start = -1;", "    for (int i = 0; i < s.size(); i++) {", "        if (pointPos != -1 && s[i] - '0' >= 5) {", "            start = i;", "            break;", "        };", "        if (s[i] == '.') pointPos = i;", "    }", "    if (start != -1) {", "        bool next = true;", "        while (start > pointPos && next && t > 0) {", "            if (start - pointPos == 1) {", "                int nextVal = s[start - 2] - '0' + 1;", "                if (nextVal == 10)", "                    s[start - 2] = '0';", "                else {", "                    s[start - 2] = nextVal + '0';", "                    next = false;", "                }", "            } else {", "                int nextVal = s[start - 1] - '0' + 1;", "                if (nextVal < 5 || t - 1 == 0) next = false;", "                s[start - 1] = nextVal + '0';", "            }", "            --start;", "            --t;", "        }", "        s.erase(s.begin() + start + 1, s.end());", "        if (*(--s.end()) == '.') s.erase(--s.end());", "        start = pointPos - 1;", "        while (next && start >= 0) {", "            if (start == 0) {", "                s.insert(s.begin(), '0');", "                start = 1;", "            }", "            int nextVal = s[start - 1] - '0' + 1;", "            if (nextVal == 10)", "                s[start - 1] = '0';", "            else {", "                s[start - 1] = nextVal + '0';", "                next = false;", "            }", "            --start;", "        }", "    }", "    cout << s << endl;", "    return 0;", "}"], "testcases": [[["6 1", "10.245"], ["10.25"]], [["6 2", "10.245"], ["10.3"]], [["3 100", "9.2"], ["9.2"]], [["12 5", "872.04488525"], ["872.1"]], [["35 8", "984227318.2031144444444444494637612"], ["984227318.2031144445"]], [["320 142", "2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367"], ["2704701300865535.4322233122334341141300111132201024201313230103441442011243032"]], [["5 10", "1.555"], ["2"]], [["6 1", "0.9454"], ["1"]], [["7 1000000000", "239.923"], ["240"]], [["7 235562", "999.999"], ["1000"]], [["9 2", "23999.448"], ["23999.5"]], [["9 3", "23999.448"], ["24000"]], [["13 1", "761.044449428"], ["761.04445"]], [["3 1", "0.1"], ["0.1"]], [["3 1", "9.9"], ["10"]], [["3 1", "0.9"], ["1"]], [["31 15", "2707786.24030444444444444724166"], ["2707786.24031"]], [["4 100", "99.9"], ["100"]], [["3 10", "9.9"], ["10"]], [["22 100", "11111111111111111111.5"], ["11111111111111111112"]], [["3 1", "9.5"], ["10"]], [["8 100", "9.444445"], ["10"]], [["6 2", "999.45"], ["1000"]], [["3 100", "9.9"], ["10"]], [["18 100", "9.4444444444454444"], ["10"]], [["16 999", "9595959.95959595"], ["9595960"]], [["4 100", "99.5"], ["100"]], [["5 1", "999.9"], ["1000"]], [["4 1", "5.59"], ["6"]], [["4 1", "99.5"], ["100"]], [["4 1", "99.9"], ["100"]], [["18 6", "102345678999.44449"], ["102345679000"]], [["3 3", "9.9"], ["10"]], [["5 1", "99.99"], ["100"]], [["7 1", "99999.9"], ["100000"]], [["3 121", "9.9"], ["10"]], [["8 6", "9.444445"], ["10"]], [["3 100", "8.9"], ["9"]], [["10 1", "999.999999"], ["1000"]], [["5 100", "6.666"], ["7"]], [["4 100", "9.99"], ["10"]], [["6 1", "9.9999"], ["10"]], [["4 10", "99.9"], ["100"]], [["5 1", "9.999"], ["10"]], [["3 1231", "9.9"], ["10"]], [["5 2", "999.9"], ["1000"]], [["5 100", "144.5"], ["145"]], [["5 100", "99.45"], ["100"]], [["10 1", "0.50444445"], ["1"]], [["7 1", "1.51111"], ["2"]], [["5 1", "199.9"], ["200"]], [["3 100", "9.5"], ["10"]], [["7 1000", "409.659"], ["410"]], [["4 10", "99.5"], ["100"]], [["4 10", "10.9"], ["11"]], [["4 1", "19.5"], ["20"]]]}, {"problem_id": "718A", "pseudocode_lines": ["define the main function", "    make ints n and t", "    read n and t", "    create string s", "    read s", "    make integer i = 0", "    while i is less than n and s[i] is not equal to '.', increment i", "    if i is not equal to n and t is greater than 0", "        make integer p = i", "        increment i", "        while i is less than n and s[i] is less than '5', add 1 to i", "        if i is not equal to n", "            set s to s.substr(0, i)", "            subtract 1 from i", "            add 1 to s[i]", "            take away 1 from t", "            decrease i by 1", "            while i is greater than p, s[i + 1] is more than '4', and t is greater than 0", "                increment s[i]", "                set s[i + 1] to '0'", "                decrease t by 1", "                decrease i by 1", "            end of the block", "            if s[i + 1] is equal to '/'", "                set s to s.substr(0, i + 1)", "                while i is greater than or equal to 0 and s[i] is equal to '9'", "                    set s[i] to '0'", "                    decrease i by 1", "                end of the block", "                if i is not equal to -1", "                    increment s[i]", "                else", "                    output 1", "                end of the block", "            else if i is equal to p, s[p + 1] is greater than '4', and t is greater than 0", "                take away 1 from t", "                set s to s.substr(0, i)", "                decrease i by 1", "                while i is greater than or equal to 0 and s[i] is equal to '9'", "                    set s[i] to '0'", "                    reduce i by 1", "                end of the block", "                if i not equal to -1", "                    increment s[i] by 1", "                else do", "                    print 1", "                end of the block", "            otherwise", "                set s to s.substr(0, i + 2)", "            end of the block", "        end of the block", "    end of the block", "    print s", "end of the block"], "code_lines": ["int main() {", "    int n, t;", "    cin >> n >> t;", "    string s;", "    cin >> s;", "    int i = 0;", "    while (i < n && s[i] != '.') { i++; }", "    if (i != n && t > 0) {", "        int p = i;", "        i++;", "        while (i < n && s[i] < '5') { i++; }", "        if (i != n) {", "            s = s.substr(0, i);", "            i--;", "            s[i]++;", "            t--;", "            i--;", "            while (i > p && s[i + 1] > '4' && t > 0) {", "                s[i]++;", "                s[i + 1] = '0';", "                t--;", "                i--;", "            }", "            if (s[i + 1] == '/') {", "                s = s.substr(0, i + 1);", "                while (i >= 0 && s[i] == '9') {", "                    s[i] = '0';", "                    i--;", "                }", "                if (i != -1) {", "                    s[i]++;", "                } else {", "                    cout << 1;", "                }", "            } else if (i == p && s[p + 1] > '4' && t > 0) {", "                t--;", "                s = s.substr(0, i);", "                i--;", "                while (i >= 0 && s[i] == '9') {", "                    s[i] = '0';", "                    i--;", "                }", "                if (i != -1) {", "                    s[i]++;", "                } else {", "                    cout << 1;", "                }", "            } else {", "                s = s.substr(0, i + 2);", "            }", "        }", "    }", "    cout << s << '\\n';", "}"], "testcases": [[["6 1", "10.245"], ["10.25"]], [["6 2", "10.245"], ["10.3"]], [["3 100", "9.2"], ["9.2"]], [["12 5", "872.04488525"], ["872.1"]], [["35 8", "984227318.2031144444444444494637612"], ["984227318.2031144445"]], [["320 142", "2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367"], ["2704701300865535.4322233122334341141300111132201024201313230103441442011243032"]], [["5 10", "1.555"], ["2"]], [["6 1", "0.9454"], ["1"]], [["7 1000000000", "239.923"], ["240"]], [["7 235562", "999.999"], ["1000"]], [["9 2", "23999.448"], ["23999.5"]], [["9 3", "23999.448"], ["24000"]], [["13 1", "761.044449428"], ["761.04445"]], [["3 1", "0.1"], ["0.1"]], [["3 1", "9.9"], ["10"]], [["3 1", "0.9"], ["1"]], [["31 15", "2707786.24030444444444444724166"], ["2707786.24031"]], [["4 100", "99.9"], ["100"]], [["3 10", "9.9"], ["10"]], [["22 100", "11111111111111111111.5"], ["11111111111111111112"]], [["3 1", "9.5"], ["10"]], [["8 100", "9.444445"], ["10"]], [["6 2", "999.45"], ["1000"]], [["3 100", "9.9"], ["10"]], [["18 100", "9.4444444444454444"], ["10"]], [["16 999", "9595959.95959595"], ["9595960"]], [["4 100", "99.5"], ["100"]], [["5 1", "999.9"], ["1000"]], [["4 1", "5.59"], ["6"]], [["4 1", "99.5"], ["100"]], [["4 1", "99.9"], ["100"]], [["18 6", "102345678999.44449"], ["102345679000"]], [["3 3", "9.9"], ["10"]], [["5 1", "99.99"], ["100"]], [["7 1", "99999.9"], ["100000"]], [["3 121", "9.9"], ["10"]], [["8 6", "9.444445"], ["10"]], [["3 100", "8.9"], ["9"]], [["10 1", "999.999999"], ["1000"]], [["5 100", "6.666"], ["7"]], [["4 100", "9.99"], ["10"]], [["6 1", "9.9999"], ["10"]], [["4 10", "99.9"], ["100"]], [["5 1", "9.999"], ["10"]], [["3 1231", "9.9"], ["10"]], [["5 2", "999.9"], ["1000"]], [["5 100", "144.5"], ["145"]], [["5 100", "99.45"], ["100"]], [["10 1", "0.50444445"], ["1"]], [["7 1", "1.51111"], ["2"]], [["5 1", "199.9"], ["200"]], [["3 100", "9.5"], ["10"]], [["7 1000", "409.659"], ["410"]], [["4 10", "99.5"], ["100"]], [["4 10", "10.9"], ["11"]], [["4 1", "19.5"], ["20"]]]}, {"problem_id": "193A", "pseudocode_lines": ["declare integer array tab size 55 by 55", "declare integer array vis size 55 by 55", "declare integers n, m", "declare czysc with no arguments, returning void", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive, let vis[i][j] be 0", "    end of the block", "    return from function", "end of the block", "declare dfs with integers i, j as arguments, returning void", "    let vis[i][j] be 1", "    if tab[i+1][j] is 1 and vis[i+1][j] is 0, run dfs(i+1 and j)", "    if tab[i-1][j] is 1 and vis[i-1][j] is 0, run dfs(i-1, j)", "    if tab[i][j+1] is 1 and vis[i][j+1] is 0, run dfs with i, j + 1 as arguments", "    if tab[i][j-1] is 1 and vis[i][j-1] is 0, run dfs(i,j-1)", "    return from function", "end of the block", "define the main function", "    declare character c", "    read n, m", "    declare integers licz = 0", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            read c", "            if c is '#'", "                let tab[i][j] be 1", "                increment licz", "            end of the block", "        end of the block", "    end of the block", "    if licz is less than 3", "        print \"-1\" and newline", "        return to indicate successful execution", "    end of the block", "    declare integers wynik = 5", "    declare integer akt", "    declare integer odw", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if tab[i][j] is 1", "                let akt be 0", "                let akt be tab[i + 1][j] + tab[i - 1][j] + tab[i][j + 1] + tab[i][j - 1]", "                if akt is 1", "                    print \"1\" and newline", "                    return to indicate successful execution", "                else", "                    run czysc", "                    let tab[i][j] be 0", "                    if tab[i+1][j] is 1", "                        run dfs with i + 1, j as arguments", "                    else", "                        if tab[i-1][j] is 1", "                            run dfs(i-1,j)", "                        else", "                            run dfs(i,j+1)", "                        end of the block", "                    end of the block", "                    let tab[i][j] be 1", "                end of the block", "                let odw be vis[i + 1][j] + vis[i - 1][j] + vis[i][j + 1] + vis[i][j - 1]", "                if odw is less than akt", "                    print \"1\" and newline", "                    return to indicate successful execution", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    print \"2\" and newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int tab[55][55];", "int vis[55][55];", "int n, m;", "void czysc() {", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) { vis[i][j] = 0; }", "    }", "    return;", "}", "void dfs(int i, int j) {", "    vis[i][j] = 1;", "    if (tab[i + 1][j] == 1 && vis[i + 1][j] == 0) { dfs(i + 1, j); }", "    if (tab[i - 1][j] == 1 && vis[i - 1][j] == 0) { dfs(i - 1, j); }", "    if (tab[i][j + 1] == 1 && vis[i][j + 1] == 0) { dfs(i, j + 1); }", "    if (tab[i][j - 1] == 1 && vis[i][j - 1] == 0) { dfs(i, j - 1); }", "    return;", "}", "int main() {", "    char c;", "    cin >> n >> m;", "    int licz = 0;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            cin >> c;", "            if (c == '#') {", "                tab[i][j] = 1;", "                licz++;", "            }", "        }", "    }", "    if (licz < 3) {", "        cout << \"-1\" << endl;", "        return 0;", "    }", "    int wynik = 5;", "    int akt;", "    int odw;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            if (tab[i][j] == 1) {", "                akt = 0;", "                akt = tab[i + 1][j] + tab[i - 1][j] + tab[i][j + 1] + tab[i][j - 1];", "                if (akt == 1) {", "                    cout << \"1\" << endl;", "                    return 0;", "                } else {", "                    czysc();", "                    tab[i][j] = 0;", "                    if (tab[i + 1][j] == 1) {", "                        dfs(i + 1, j);", "                    } else {", "                        if (tab[i - 1][j] == 1) {", "                            dfs(i - 1, j);", "                        } else {", "                            dfs(i, j + 1);", "                        }", "                    }", "                    tab[i][j] = 1;", "                }", "                odw = vis[i + 1][j] + vis[i - 1][j] + vis[i][j + 1] + vis[i][j - 1];", "                if (odw < akt) {", "                    cout << \"1\" << endl;", "                    return 0;", "                }", "            }", "        }", "    }", "    cout << \"2\" << endl;", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["data=array of 51 by 51 char", "visited=array of 51 by 51 bool", "dr=array of 4 int filled with 0,0,1,-1", "dc=array of 4 int filled with 1,-1,0,0", "function Counter (get int i and j, return int)", "    if visited[i][j] return 0", "    visited[i][j]=true", "    ans=0", "    if data[i][j] is '#'", "        increment ans", "        for x=0 to 4 exclusive add Counter(i+dr[x],j+dc[x]) to ans", "    end of the block", "    return ans", "end of the block", "define the main function", "    n,m=int", "    read n,m", "    Total=0", "    start=pair of int, int", "    for i=0 to n exclusive", "        for j=o to m exclusive", "            read data[i][j]", "            if data[i][j] is '#' increment Total, start=i,j", "        end of the block", "    end of the block", "    fill visited with false", "    t=Counter(first item of start, second item of start)", "    if t < Total", "        print 0", "        return to indicate successful execution", "    else if Total < 3", "        print -1", "        return to indicate successful execution", "    else", "        ans=0", "        for i=0 to n exclusive", "            for j=0 to m exclusive", "                if data[i][j] is '#'", "                    if i is 6 and j is 5 r=1", "                    fill visited with false", "                    visited[i][j]=true", "                    x,y=int", "                    for k=0 to 4 exclusive", "                        if data[i+dr[k]][j+dc[k]] is '#'", "                            x=i+dr[k]", "                            y=j+dc[k]", "                            break", "                        end of the block", "                    end of the block", "                    t=Counter(x,y)", "                    if t<Total-1", "                        print 1", "                        return to indicate successful execution", "                    end of the block", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    print 2", "    return to indicate successful execution", "end of the block"], "code_lines": ["char data[51][51];", "bool visited[51][51];", "int dr[] = {0, 0, 1, -1};", "int dc[] = {1, -1, 0, 0};", "int Counter(int i, int j) {", "    if (visited[i][j]) return 0;", "    visited[i][j] = true;", "    int ans = 0;", "    if (data[i][j] == '#') {", "        ans++;", "        for (int x = 0; x < 4; x++) { ans += Counter(i + dr[x], j + dc[x]); }", "    }", "    return ans;", "}", "int main() {", "    int n, m;", "    cin >> n >> m;", "    int Total = 0;", "    pair<int, int> start;", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < m; j++) {", "            cin >> data[i][j];", "            if (data[i][j] == '#') Total++, start = pair<int, int>(i, j);", "        }", "    }", "    memset(visited, false, sizeof visited);", "    int t = Counter(start.first, start.second);", "    if (t < Total) {", "        cout << 0 << endl;", "        return 0;", "    } else if (Total < 3) {", "        cout << -1 << endl;", "        return 0;", "    } else {", "        int ans = 0;", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < m; j++) {", "                if (data[i][j] == '#') {", "                    if (i == 6 && j == 5) { int r = 1; }", "                    memset(visited, false, sizeof visited);", "                    visited[i][j] = true;", "                    int x, y;", "                    for (int k = 0; k < 4; k++) {", "                        if (data[i + dr[k]][j + dc[k]] == '#') {", "                            x = i + dr[k];", "                            y = j + dc[k];", "                            break;", "                        }", "                    }", "                    int t = Counter(x, y);", "                    if (t < Total - 1) {", "                        cout << \"1\" << endl;", "                        return 0;", "                    }", "                }", "            }", "        }", "    }", "    cout << 2 << endl;", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["create constant integer MAXN = 55", "let char array mp of size MAXN with array of size MAXN", "make bool vis of size MAXN with array of size MAXN", "create constant integer array go of size 4 with array of size 2 containing {0, 1, 0, -1, -1, 0, 1, 0}", "make ints n, m, and all = 0", "declare dfs taking in ints x and y and returning integer", "    create int ans = 1", "    for i = 0 to 4 exclusive", "        create ints xx = x + go [i][0] and yy = y + go[i][1]", "        if mp[xx][yy] is equal to '#' and vis[xx][yy] is falsy", "            set vis[xx][yy] to true", "            set ans to ans + dfs(x + go[i][0], y + go[i][1])", "        end of the block", "    end of the block", "    return ans", "end of the block", "declare solve", "    if all is less than or equal to 2, return -1", "    for i = 1 to n", "        for j = 1 to m", "            if mp[i][j] is equal to '#'", "                set mp[i][j] to '.'", "                create integer t = 0", "                for k = 0 to 4 exclusive", "                    make ints xx = i + go[k][0] and yy = j + go[k][1]", "                    if mp[xx][yy] is equal to '#'", "                        set all contents of vis to 0", "                        set vis[xx][yy] to true", "                        set t to dfs(xx, yy)", "                        break loop", "                    end of the block", "                end of the block", "                set mp[i][j] to '#'", "                if t is 0, return -1", "                if t is not all - 1, return 1", "            end of the block", "        end of the block", "    end of the block", "    return 2", "end of the block", "define the main function", "    read n and m", "    set all contents of mp to '.'", "    for i = 1 to n", "        for j = 1 to m", "            read mp[i][j]", "            if mp[i][j] is equal to '#', increment all", "        end of the block", "    end of the block", "    print result of solve()", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 55;", "char mp[MAXN][MAXN];", "bool vis[MAXN][MAXN];", "const int go[4][2] = {0, 1, 0, -1, -1, 0, 1, 0};", "int n, m, all = 0;", "int dfs(int x, int y) {", "    int ans = 1;", "    for (int i = 0; i < 4; i++) {", "        int xx = x + go[i][0], yy = y + go[i][1];", "        if (mp[xx][yy] == '#' && !vis[xx][yy]) {", "            vis[xx][yy] = true;", "            ans += dfs(x + go[i][0], y + go[i][1]);", "        }", "    }", "    return ans;", "}", "int solve() {", "    if (all <= 2) return -1;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            if (mp[i][j] == '#') {", "                mp[i][j] = '.';", "                int t = 0;", "                for (int k = 0; k < 4; k++) {", "                    int xx = i + go[k][0], yy = j + go[k][1];", "                    if (mp[xx][yy] == '#') {", "                        memset(vis, 0, sizeof(vis));", "                        vis[xx][yy] = true;", "                        t = dfs(xx, yy);", "                        break;", "                    }", "                }", "                mp[i][j] = '#';", "                if (t == 0) return -1;", "                if (t != all - 1) { return 1; }", "            }", "        }", "    }", "    return 2;", "}", "int main() {", "    cin >> n >> m;", "    memset(mp, '.', sizeof(mp));", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            cin >> mp[i][j];", "            if (mp[i][j] == '#') ++all;", "        }", "    }", "    cout << solve() << endl;", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["mnx=8000009", "mod=1000000007", "dx=array of 4 long long filled with -1, 0, 0, 1", "dy=array of 4 long long filled with 0, -1, 1, 0", "n,m=long long", "s=array of 111 by 111 char", "u=array of 111 by 111 bool", "function check (get long long x and y, return bool)", "    return 0 < x and x < n+1 and 0 < y and y < m+1", "end of the block", "function dfs (get long long x and y, return nothing)", "    if u[x][y] return", "    u[x][y]=true", "    for i=0 to 4 exclusive", "        if check(x+dx[i], y+dy[i]) and s[x+dx[i]][y+dy[i]] is '#' dfs(x+dx[i], y+dy[i])", "    end of the block", "end of the block", "define the main function", "    read n,m", "    for i=1 to n inclusive", "        for j=1 to m inclusive read s[i][j]", "    end of the block", "    qwe=0", "    for i=1 to n inclusive", "        for j=1 to m inclusive", "            if s[i][j] is '#' increment qwe", "        end of the block", "    end of the block", "    res=11111111111111", "    for i=1 to n inclusive", "        for j=1 to m inclusive", "            if s[i][j] is '#'", "                q=0", "                for k=0 to 4 exclusive", "                    if check(i+dx[k], j+dy[k]) and s[i+dx[k]][j+dy[k]] is '#' increment q", "                end of the block", "                if q+1 < qwe res=min(res, q)", "                if qwe>1", "                    s[i][j]='0'", "                    for k=1 to n inclusive", "                        for l=1 to m inclusive u[k][l]=false", "                    end of the block", "                    cnt=0", "                    for k=1 to n inclusive", "                        for l=1 to m inclusive", "                            if s[k][l] is '#' and not u[k][l]", "                                dfs(k,l)", "                                increment cnt", "                            end of the block", "                        end of the block", "                    end of the block", "                    if cnt>1 res=min(res, 1)", "                    s[i][j]='#'", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    if res is 11111111111111 subtract 11111111111112 from res", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["const long long mnx = 8e6 + 9;", "const long long mod = 1e9 + 7;", "const long long dx[4] = {-1, 0, 0, 1};", "const long long dy[4] = {0, -1, 1, 0};", "long long n, m;", "char s[111][111];", "bool u[111][111];", "bool check(long long x, long long y) {", "    return 0 < x && x < n + 1 && 0 < y && y < m + 1;", "}", "void dfs(long long x, long long y) {", "    if (u[x][y]) { return; }", "    u[x][y] = true;", "    for (long long i = 0; i < 4; i++) {", "        if (check(x + dx[i], y + dy[i]) && s[x + dx[i]][y + dy[i]] == '#') { dfs(x + dx[i], y + dy[i]); }", "    }", "}", "int main() {", "    cin >> n >> m;", "    for (long long i = 1; i <= n; i++) {", "        for (long long j = 1; j <= m; j++) { cin >> s[i][j]; }", "    }", "    long long qwe = 0;", "    for (long long i = 1; i <= n; i++) {", "        for (long long j = 1; j <= m; j++) {", "            if (s[i][j] == '#') { qwe++; }", "        }", "    }", "    long long res = 11111111111111;", "    for (long long i = 1; i <= n; i++) {", "        for (long long j = 1; j <= m; j++) {", "            if (s[i][j] == '#') {", "                long long q = 0;", "                for (long long k = 0; k < 4; k++) {", "                    if (check(i + dx[k], j + dy[k]) && s[i + dx[k]][j + dy[k]] == '#') q++;", "                }", "                if (q + 1 < qwe) { res = min(res, q); }", "                if (qwe > 1) {", "                    s[i][j] = '0';", "                    for (long long k = 1; k <= n; k++) {", "                        for (long long l = 1; l <= m; l++) { u[k][l] = false; }", "                    }", "                    long long cnt = 0;", "                    for (long long k = 1; k <= n; k++) {", "                        for (long long l = 1; l <= m; l++) {", "                            if (s[k][l] == '#' && !u[k][l]) {", "                                dfs(k, l);", "                                cnt++;", "                            }", "                        }", "                    }", "                    if (cnt > 1) { res = min(res, 1LL); }", "                    s[i][j] = '#';", "                }", "            }", "        }", "    }", "    if (res == 11111111111111) res -= 11111111111112;", "    cout << res << '\\n';", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["declare constant integer MAXN = 55", "declare integers n, m, area", "declare integer array dx = {-1, 0, 1, 0}", "declare integer array dy = {0, 1, 0, -1}", "declare integer array bio size MAXN by MAXN", "declare character array grid size MAXN by MAXN", "declare valid with integers x, y as arguments, returning boolean", "    if x is less than 0 or x is greater than or equal to n, return false from function", "    if y is less than 0 or y is greater than or equal to m, return false from function", "    return true from function", "end of the block", "declare dfs with integers x, y as arguments, returning void", "    let bio[x][y] be 1", "    for i = 0 to 4 exclusive", "        declare integer xx = x + dx[i]", "        declare integer yy = y + dy[i]", "        if result of run valid(xx,yy) and grid[xx][yy] is '#' and not bio[xx][yy], run dfs(xx,yy)", "    end of the block", "end of the block", "declare nc with no arguments, returning integer", "    for i = 0 to n exclusive", "        for j = 0 to m exclusive, let bio[i][j] be 0", "    end of the block", "    declare integer bk = 0", "    for i = 0 to n exclusive", "        for j = 0 to m exclusive", "            if grid[i][j] is '.', end current loop iteration", "            if bio[i][j], end current loop iteration", "            run dfs(i,j)", "            increment bk", "        end of the block", "    end of the block", "    return bk", "end of the block", "define the main function", "    read n and m", "    for i = 0 to n exclusive, read grid[i]", "    for i = 0 to n exclusive", "        for j = 0 to m exclusive", "            if grid[i][j] is '#', increment area", "        end of the block", "    end of the block", "    if area is less than 3", "        print \"-1\\n\"", "        return to indicate successful execution", "    else if area is 3", "        print \"1\\n\"", "        return to indicate successful execution", "    else", "        for i = 0 to n exclusive", "            for j = 0 to m exclusive", "                if grid[i][j] is '.', end current loop iteration", "                let gird[i][j] be '.'", "                if result of run nc is greater than 1", "                    print \"1\\n\"", "                    return to indicate successful execution", "                end of the block", "                let grid[i][j] be '#'", "            end of the block", "        end of the block", "        print \"2\\n\"", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 55;", "int n, m, area;", "int dx[] = {-1, 0, 1, 0};", "int dy[] = {0, 1, 0, -1};", "int bio[MAXN][MAXN];", "char grid[MAXN][MAXN];", "bool valid(int x, int y) {", "    if (x < 0 || x >= n) return false;", "    if (y < 0 || y >= m) return false;", "    return true;", "}", "void dfs(int x, int y) {", "    bio[x][y] = 1;", "    for (int i = 0; i < 4; i++) {", "        int xx = x + dx[i];", "        int yy = y + dy[i];", "        if (valid(xx, yy) && grid[xx][yy] == '#' && !bio[xx][yy]) { dfs(xx, yy); }", "    }", "}", "int nc() {", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < m; j++) { bio[i][j] = 0; }", "    }", "    int bk = 0;", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < m; j++) {", "            if (grid[i][j] == '.') continue;", "            if (bio[i][j]) continue;", "            dfs(i, j);", "            bk++;", "        }", "    }", "    return bk;", "}", "int main() {", "    cin >> n >> m;", "    for (int i = 0; i < n; i++) { cin >> grid[i]; }", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < m; j++) {", "            if (grid[i][j] == '#') area++;", "        }", "    }", "    if (area < 3) {", "        cout << \"-1\\n\";", "        return 0;", "    } else if (area == 3) {", "        cout << \"1\\n\";", "        return 0;", "    } else {", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < m; j++) {", "                if (grid[i][j] == '.') continue;", "                grid[i][j] = '.';", "                if (nc() > 1) {", "                    cout << \"1\\n\";", "                    return 0;", "                }", "                grid[i][j] = '#';", "            }", "        }", "        cout << \"2\\n\";", "    }", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["create integer array A of size 100 X 100", "create integer array B of size 26000", "create vector integer array NEB of size 27000", "let yy be integer with yy=0", "create integer arrays vis,low,malow,tim,F of sizes 27000 each", "create integer t=1", "create integer uu=0", "create integer vector check", "in the function dfs which takes a integer s", "    set low[s] = t", "    set vis[s] = 1", "    set tim[s] =t", "    add 1 to t", "    create integer pp=0", "    for i=0 to NEB[s].size exclusive", "        create integer l = NEB[s][i]", "        if F[s] is not equal to 1", "            if vis[l] is equal to 1", "                set low[s] to minimum of low[s] and tim[l]", "            else do the following", "                add 1 to pp", "                set F[l] =s", "                call dfs with argument l", "                create integer u=s", "                set low[u] = minimum of low[u] and low[l]", "                set malow[w] to maximum of malow[u] and low[l]", "            end of the block", "        end of the block", "    end of the block", "    create integer u = s", "    is s=yy and pp>1", "        set uu=1", "        add s to the end of check", "    else if ss is not equal to yy and malow[u] >= tim[u]", "        set uu to 1", "        add s to end of check", "    end of the block", "end of the block", "define the main function", "    n,m = integers", "    read n and m", "    create integer no=0", "    for i=1 to n inclusive", "        for j=1 to m inclusive", "            c= char", "            read c", "            if c is equal to #", "                increment no", "                set A[i][j] to 1", "                set B[(m + 1) * i + j] = 1", "                set yy = (m + 1) * i + j", "            end of the block", "        end of the block", "    end of the block", "    create integer array of size 4 P = {-1, 1, (0 - m - 1), m + 1}{-1, 1, (0 - m - 1), m + 1}", "    for i=1 to 2700 exclusive", "        for j=0 to 4 exclusive", "            if i + P[j] >= 0 and B[i + P[j]] = 1 then add i+P[j] to the end of NEB[i]", "        end of the block", "    end of the block", "    call dfs on yy", "    if no<3", "        then print -1", "    else do the following", "        if uu is 1", "            print 1 and new line", "        else do the following", "            print 2", "    end of the block", "end of the block"], "code_lines": ["int A[100][100];", "int B[26000];", "vector<int> NEB[27000];", "int yy = 0;", "int vis[27000], low[27000], malow[27000], tim[27000], F[27000];", "int t = 1;", "int uu = 0;", "vector<int> check;", "void dfs(int s) {", "    low[s] = t;", "    vis[s] = 1;", "    tim[s] = t;", "    t++;", "    int pp = 0;", "    for (int i = 0; i < NEB[s].size(); i++) {", "        int l = NEB[s][i];", "        if (F[s] != l) {", "            if (vis[l] == 1) {", "                low[s] = min(low[s], tim[l]);", "            } else {", "                pp++;", "                F[l] = s;", "                dfs(l);", "                int u = s;", "                low[u] = min(low[u], low[l]);", "                malow[u] = max(malow[u], low[l]);", "            }", "        }", "    }", "    int u = s;", "    if (s == yy && pp > 1) {", "        uu = 1;", "        check.push_back(s);", "    } else if (s != yy && malow[u] >= tim[u]) {", "        uu = 1;", "        check.push_back(s);", "    }", "}", "int main() {", "    int n, m;", "    cin >> n >> m;", "    int no = 0;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            char c;", "            cin >> c;", "            if (c == '#') {", "                no++;", "                A[i][j] = 1;", "                B[(m + 1) * i + j] = 1;", "                yy = (m + 1) * i + j;", "            }", "        }", "    }", "    int P[4] = {-1, 1, (0 - m - 1), m + 1};", "    for (int i = 1; i < 2700; i++) {", "        for (int j = 0; j < 4; j++) {", "            if (i + P[j] >= 0 && B[i + P[j]] == 1) NEB[i].push_back(i + P[j]);", "        }", "    }", "    dfs(yy);", "    if (no < 3)", "        cout << -1 << endl;", "    else {", "        if (uu == 1)", "            cout << 1 << endl;", "        else", "            cout << 2 << endl;", "    }", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["create new constant integer MAX_N = 50", "new integer constant MAX_M with value 50", "define new 2d array of integers v with size MAX_N by MAX_M", "define new 2d array of integers u MAX_N by MAX_M elements", "define new integers n and m", "void function dfs with int arguments x, y and first", "    if first is false, assign the new value = 1 to u[y][x]", "    if x > 0 and v[y][x - 1] is true and u[y][x - 1] is false, call dfs(x - 1, y)", "    call dfs(x + 1, y) if x < m - 1 and v[y][x + 1] is true and u[y][x + 1] is false", "    if y > 0 and v[y - 1][x] is true and u[y - 1][x] is false, run function dfs(x, y - 1)", "    if y < n - 1 and v[y + 1][x] is true and u[y + 1][x] is false, call method dfs(x, y + 1)", "end of the block", "define the main function", "    read n and m from the user input", "    create new integer called k = 0", "    for i from 0 to n exclusive", "        new string variable s", "        read variable s from the input", "        start for loop from j = 0 to m exclusive", "            assign the new value = (true if s[j]='#' or false otherwise), to v[i][j]", "            add v[i][j] to k", "        end of the block", "    end of the block", "    if k <= 2", "        print - 1", "        return to indicate successful execution", "    end of the block", "    define boolean f = false", "    start for loop from i = 0 to n exclusive", "        increment j in a loop from 0 to m exclusive", "            if v[i][j] is false, skip the rest of the loop", "            set first MAX_N * MAX_M *sizeof(int) bytes at the pointer u to 0", "            assign 0 to v[i][j]", "            create boolean variable with name f = false", "            for integer ii = 0 to n exclusive incrementing ii, while f is false", "                in a for loop, change jj from 0 to m exclusive, while f is false", "                    if v[ii][jj] != 0", "                        call dfs(jj, ii)", "                        assign true to f", "                    end of the block", "                end of the block", "            end of the block", "            start for loop from ii = 0 to n exclusive", "                loop through jj from 0 to m exclusive incrementing by 1", "                    if i = ii and j = jj, go to the start of the loop", "                    if v[ii][jj] != u[ii][jj]", "                        print 1 and a new line", "                        return to indicate successful execution", "                    end of the block", "                end of the block", "            end of the block", "            change the value of v[i][j] to 1", "        end of the block", "    end of the block", "    print 2", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAX_N = 50;", "const int MAX_M = 50;", "int v[MAX_N][MAX_M];", "int u[MAX_N][MAX_M];", "int n, m;", "void dfs(int x, int y, int first = 0) {", "    if (!first) u[y][x] = 1;", "    if (x > 0 && v[y][x - 1] && !u[y][x - 1]) dfs(x - 1, y);", "    if (x < m - 1 && v[y][x + 1] && !u[y][x + 1]) dfs(x + 1, y);", "    if (y > 0 && v[y - 1][x] && !u[y - 1][x]) dfs(x, y - 1);", "    if (y < n - 1 && v[y + 1][x] && !u[y + 1][x]) dfs(x, y + 1);", "}", "int main() {", "    cin >> n >> m;", "    int k = 0;", "    for (int i = 0; i < n; ++i) {", "        string s;", "        cin >> s;", "        for (int j = 0; j < m; ++j) {", "            v[i][j] = (s[j] == '#');", "            k += v[i][j];", "        }", "    }", "    if (k <= 2) {", "        cout << -1 << endl;", "        return 0;", "    }", "    bool f = false;", "    for (int i = 0; i < n; ++i) {", "        for (int j = 0; j < m; ++j) {", "            if (!v[i][j]) continue;", "            memset(u, 0, MAX_N * MAX_M * sizeof(int));", "            v[i][j] = 0;", "            bool f = false;", "            for (int ii = 0; ii < n && !f; ++ii) {", "                for (int jj = 0; jj < m && !f; ++jj) {", "                    if (v[ii][jj] != 0) {", "                        dfs(jj, ii);", "                        f = true;", "                    }", "                }", "            }", "            for (int ii = 0; ii < n; ++ii) {", "                for (int jj = 0; jj < m; ++jj) {", "                    if (i == ii && j == jj) continue;", "                    if (v[ii][jj] != u[ii][jj]) {", "                        cout << 1 << endl;", "                        return 0;", "                    }", "                }", "            }", "            v[i][j] = 1;", "        }", "    }", "    cout << 2 << endl;", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["create integer array A of size 100 X 100", "create integer array B of size 26000", "create vector integer array NEB of size 27000", "let yy be integer with yy=0", "create integer arrays vis,low,malow,tim,F of sizes 27000 each", "create integer t=1", "create integer uu=0", "create integer vector check", "in the function dfs which takes a integer s", "    set low[s] = t", "    set vis[s] = 1", "    set tim[s] =t", "    add 1 to t", "    create integer pp=0", "    for i=0 to NEB[s].size exclusive", "        create integer l = NEB[s][i]", "        if F[s] is not equal to 1", "            if vis[l] is equal to 1", "                set low[s] to minimum of low[s] and tim[l]", "            else do the following", "                add 1 to pp", "                set F[l] =s", "                call dfs with argument l", "                create integer u=s", "                set low[u] = minimum of low[u] and low[l]", "                set malow[w] to maximum of malow[u] and low[l]", "            end of the block", "        end of the block", "    end of the block", "    create integer u = s", "    is s=yy and pp>1", "        set uu=1", "        add s to the end of check", "    else if ss is not equal to yy and malow[u] >= tim[u]", "        set uu to 1", "        add s to end of check", "    end of the block", "end of the block", "define the main function", "    n,m = integers", "    read n and m", "    create integer no=0", "    for i=1 to n inclusive", "        for j=1 to m inclusive", "            c= char", "            read c", "            if c is equal to #", "                increment no", "                set A[i][j] to 1", "                set B[(m + 1) * i + j] = 1", "                set yy = (m + 1) * i + j", "            end of the block", "        end of the block", "    end of the block", "    create integer array of size 4 P = {-1, 1, (0 - m - 1), m + 1}{-1, 1, (0 - m - 1), m + 1}", "    for i=1 to 2700 exclusive", "        for j=0 to 4 exclusive", "            if i + P[j] >= 0 and B[i + P[j]] = 1 then add i+P[j] to the end of NEB[i]", "        end of the block", "    end of the block", "    call dfs on yy", "    if no<3", "        then print -1", "    else do the following", "        if uu is 1", "            print 1 and new line", "        else do the following", "            print 2", "    end of the block", "end of the block"], "code_lines": ["int A[100][100];", "int B[26000];", "vector<int> NEB[27000];", "int yy = 0;", "int vis[27000], low[27000], malow[27000], tim[27000], F[27000];", "int t = 1;", "int uu = 0;", "vector<int> check;", "void dfs(int s) {", "    low[s] = t;", "    vis[s] = 1;", "    tim[s] = t;", "    t++;", "    int pp = 0;", "    for (int i = 0; i < NEB[s].size(); i++) {", "        int l = NEB[s][i];", "        if (F[s] != l) {", "            if (vis[l] == 1) {", "                low[s] = min(low[s], tim[l]);", "            } else {", "                pp++;", "                F[l] = s;", "                dfs(l);", "                int u = s;", "                low[u] = min(low[u], low[l]);", "                malow[u] = max(malow[u], low[l]);", "            }", "        }", "    }", "    int u = s;", "    if (s == yy && pp > 1) {", "        uu = 1;", "        check.push_back(s);", "    } else if (s != yy && malow[u] >= tim[u]) {", "        uu = 1;", "        check.push_back(s);", "    }", "}", "int main() {", "    int n, m;", "    cin >> n >> m;", "    int no = 0;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            char c;", "            cin >> c;", "            if (c == '#') {", "                no++;", "                A[i][j] = 1;", "                B[(m + 1) * i + j] = 1;", "                yy = (m + 1) * i + j;", "            }", "        }", "    }", "    int P[4] = {-1, 1, (0 - m - 1), m + 1};", "    for (int i = 1; i < 2700; i++) {", "        for (int j = 0; j < 4; j++) {", "            if (i + P[j] >= 0 && B[i + P[j]] == 1) NEB[i].push_back(i + P[j]);", "        }", "    }", "    dfs(yy);", "    if (no < 3)", "        cout << -1 << endl;", "    else {", "        if (uu == 1)", "            cout << 1 << endl;", "        else", "            cout << 2 << endl;", "    }", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "193A", "pseudocode_lines": ["declare character array a size 55 by 55", "declare integer array is size 55 by 55", "declare integers n, m", "declare integer arrays dx size 4 = {-1, 1, 0, 0}, dy size 4 = {0, 0, -1, 1}", "declare inline work with integers x, y as arguments, returning void", "    if is[x][y] is 1, return from function", "    if a[x][y] is not '#', return from function", "    let is[x][y] be 1", "    declare integer i", "    for i = 0 to 4 exclusive, run work with x + dx[i], y + dy[i] as arguments", "end of the block", "declare inline check with integers x, y as arguments, returning boolean", "    let a[x][y] be '.'", "    declare integer kk = 0", "    set bytes from is to size of is to value 0", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            if a[i][j] is '#' and is[i][j] is 0", "                increment kk", "                run work(i,j)", "            end of the block", "    end of the block", "    let a[x][y] be '#'", "    return kk is greater than 1", "end of the block", "define the main function", "    read n, m", "    declare integer kk = 0", "    for i = 1 to n inclusive", "        for j = 1 to m inclusive", "            read a[i][j]", "            if a[i][j] is '#', increment kk", "        end of the block", "    end of the block", "    if kk is less than 3", "        print -1 and newline", "        return to indicate successful execution", "    end of the block", "    declare integer ans = 2", "    for i = 0 to n inclusive", "        for j = 1 to m inclusive", "            if a[i][j] is '#'", "                if result of run check(i,j) is true, let ans be 1", "            end of the block", "    end of the block", "    print ans and newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["char a[55][55];", "int is[55][55];", "int n, m;", "int dx[4] = {-1, 1, 0, 0}, dy[4] = {0, 0, -1, 1};", "inline void work(int x, int y) {", "    if (is[x][y] == 1) return;", "    if (a[x][y] != '#') return;", "    is[x][y] = 1;", "    int i;", "    for (i = 0; i < 4; i++) work(x + dx[i], y + dy[i]);", "}", "inline bool check(int x, int y) {", "    a[x][y] = '.';", "    int kk = 0;", "    memset(is, 0, sizeof(is));", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++)", "            if (a[i][j] == '#' && (is[i][j] == 0)) {", "                kk++;", "                work(i, j);", "            }", "    }", "    a[x][y] = '#';", "    return kk > 1;", "}", "int main() {", "    cin >> n >> m;", "    int kk = 0;", "    for (int i = 1; i <= n; i++) {", "        for (int j = 1; j <= m; j++) {", "            cin >> a[i][j];", "            if (a[i][j] == '#') kk++;", "        }", "    }", "    if (kk < 3) {", "        cout << -1 << endl;", "        return 0;", "    }", "    int ans = 2;", "    for (int i = 0; i <= n; i++) {", "        for (int j = 1; j <= m; j++)", "            if (a[i][j] == '#') {", "                if (check(i, j)) ans = 1;", "            }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["5 4", "####", "#..#", "#..#", "#..#", "####"], ["2"]], [["5 5", "#####", "#...#", "#####", "#...#", "#####"], ["2"]], [["1 10", ".########."], ["1"]], [["1 1", "#"], ["-1"]], [["3 3", ".#.", "###", ".#."], ["1"]], [["1 2", "##"], ["-1"]], [["2 1", "#", "#"], ["-1"]], [["3 3", "###", "#.#", "###"], ["2"]], [["2 2", "##", "#."], ["1"]], [["2 2", "##", "##"], ["2"]], [["2 2", ".#", "##"], ["1"]], [["2 2", ".#", ".#"], ["-1"]], [["9 9", "#########", "#.......#", "#.#####.#", "#.#.#.#.#", "#.#.#.#.#", "#.#.#.#.#", "#.#####.#", "#...#...#", "#########"], ["1"]], [["50 1", "#", "#", "#", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["1"]], [["3 50", "....##############################################", "....#.......#...#..#....#..............#.........#", "....##############################################"], ["2"]], [["2 2", "##", ".."], ["-1"]], [["5 5", "#####", "#####", "#....", "#####", "#####"], ["1"]], [["3 5", "##.##", "#####", "##.##"], ["1"]], [["4 4", "####", "####", "####", "####"], ["2"]], [["5 7", ".#####.", ".#...#.", "###.###", "#.#.#.#", "###.###"], ["1"]], [["2 5", "#####", "##.##"], ["1"]], [["6 2", "##", "##", "#.", "##", "##", "##"], ["1"]], [["2 5", "##.##", "#####"], ["1"]], [["5 5", "#####", "#####", "##.##", "##.##", "##.##"], ["2"]], [["5 3", "###", "###", ".#.", "###", "###"], ["1"]], [["5 5", "###..", "###..", "#..##", "#####", "#####"], ["1"]]]}, {"problem_id": "993A", "pseudocode_lines": ["define the main function", "    make ints i and j", "    make int array vis of size 220 with array of size 220 with {0}", "    make integer array vis1 of size 220 with array of size 220 with {0}", "    make int arrays x of size 5, y of size 5, x1 of size 5, and y1 of size 5", "    for i = 0 to 4 exclusive, read x[i] and y[i]", "    for i = 0 to 4 exclusive, read x1[i] and y1[i]", "    sort x using x + 4", "    sort x1 using x1 + 4", "    sort y using y + 4", "    sort y1 using y1 + 4", "    make integer ox = min(x[0], x1[0])", "    create int oy = min(y[0], y1[0])", "    if ox is less than 0, set ox to -ox", "    if oy is less than 0, set oy to -oy", "    for i = x[0] + ox to x[3] + ox", "        for j = y[0] + oy to y[3] + oy, set vis[i][j] to 1", "    make integer mid = (x1[0] + ox + x1[3] + ox) / 2", "    create int s = y1[0] + oy", "    let int t = y1[3] + oy", "    for i = mid to x1[0] + ox", "        for j = s to t, set vis1[i][j] to 1", "        increment s", "        decrease t by 1", "    end of the block", "    set s to y1[0] + oy", "    set t to y1[3] + oy", "    for i = mid to x1[3] + ox", "        for j = s to t, set vis1[i][j] to 1", "        increment s", "        decrease t by 1", "    end of the block", "    for i = 0 to 220 exclusive", "        for j = 0 to 220 exclusive", "            if vis[i][j] is equal to 1 and vis1[i][j] is equal to 1", "                print \"YES\"", "                return to indicate successful execution", "            end of the block", "        end of the block", "    end of the block", "    show \"NO\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int i, j;", "    int vis[220][220] = {0};", "    int vis1[220][220] = {0};", "    int x[5], y[5], x1[5], y1[5];", "    for (i = 0; i < 4; i++) cin >> x[i] >> y[i];", "    for (i = 0; i < 4; i++) cin >> x1[i] >> y1[i];", "    sort(x, x + 4);", "    sort(x1, x1 + 4);", "    sort(y, y + 4);", "    sort(y1, y1 + 4);", "    int ox = min(x[0], x1[0]);", "    int oy = min(y[0], y1[0]);", "    if (ox < 0) ox = -ox;", "    if (oy < 0) oy = -oy;", "    for (i = x[0] + ox; i <= x[3] + ox; i++)", "        for (j = y[0] + oy; j <= y[3] + oy; j++) vis[i][j] = 1;", "    int mid = (x1[0] + ox + x1[3] + ox) / 2;", "    int s = y1[0] + oy;", "    int t = y1[3] + oy;", "    for (i = mid; i >= x1[0] + ox; i--) {", "        for (j = s; j <= t; j++) { vis1[i][j] = 1; }", "        s++;", "        t--;", "    }", "    s = y1[0] + oy;", "    t = y1[3] + oy;", "    for (i = mid; i <= x1[3] + ox; i++) {", "        for (j = s; j <= t; j++) { vis1[i][j] = 1; }", "        s++;", "        t--;", "    }", "    for (i = 0; i < 220; i++) {", "        for (j = 0; j < 220; j++) {", "            if (vis[i][j] == 1 && vis1[i][j] == 1) {", "                cout << \"YES\" << endl;", "                return 0;", "            }", "        }", "    }", "    cout << \"NO\" << endl;", "    return 0;", "}"], "testcases": [[["0 0 6 0 6 6 0 6", "1 3 3 5 5 3 3 1"], ["YES"]], [["0 0 6 0 6 6 0 6", "7 3 9 5 11 3 9 1"], ["NO"]], [["6 0 6 6 0 6 0 0", "7 4 4 7 7 10 10 7"], ["YES"]], [["0 0 6 0 6 6 0 6", "8 4 4 8 8 12 12 8"], ["YES"]], [["2 2 4 2 4 4 2 4", "0 3 3 6 6 3 3 0"], ["YES"]], [["-5 -5 5 -5 5 5 -5 5", "-5 7 0 2 5 7 0 12"], ["YES"]], [["-5 -5 5 -5 5 5 -5 5", "-5 12 0 7 5 12 0 17"], ["NO"]], [["-5 -5 5 -5 5 5 -5 5", "6 0 0 6 -6 0 0 -6"], ["YES"]], [["-100 -100 100 -100 100 100 -100 100", "-100 0 0 -100 100 0 0 100"], ["YES"]], [["92 1 92 98 -5 98 -5 1", "44 60 56 48 44 36 32 48"], ["YES"]], [["-12 -54 -12 33 -99 33 -99 -54", "-77 -40 -86 -31 -77 -22 -68 -31"], ["YES"]], [["3 45 19 45 19 61 3 61", "-29 45 -13 29 3 45 -13 61"], ["YES"]], [["79 -19 79 15 45 15 45 -19", "-1 24 -29 52 -1 80 27 52"], ["NO"]], [["75 -57 75 -21 39 -21 39 -57", "10 -42 -32 0 10 42 52 0"], ["NO"]], [["-11 53 9 53 9 73 -11 73", "-10 9 -43 42 -10 75 23 42"], ["YES"]], [["-10 -36 -10 27 -73 27 -73 -36", "44 -28 71 -55 44 -82 17 -55"], ["NO"]], [["-63 -15 6 -15 6 54 -63 54", "15 -13 -8 10 15 33 38 10"], ["YES"]], [["47 15 51 15 51 19 47 19", "19 0 -27 46 19 92 65 46"], ["NO"]], [["87 -5 87 79 3 79 3 -5", "36 36 78 -6 36 -48 -6 -6"], ["YES"]], [["-4 56 10 56 10 70 -4 70", "-11 47 -35 71 -11 95 13 71"], ["YES"]], [["-41 6 -41 8 -43 8 -43 6", "-7 27 43 -23 -7 -73 -57 -23"], ["NO"]], [["44 -58 44 7 -21 7 -21 -58", "22 19 47 -6 22 -31 -3 -6"], ["YES"]], [["-37 -63 49 -63 49 23 -37 23", "-52 68 -21 37 -52 6 -83 37"], ["YES"]], [["93 20 93 55 58 55 58 20", "61 -17 39 5 61 27 83 5"], ["YES"]], [["-7 4 -7 58 -61 58 -61 4", "-28 45 -17 34 -28 23 -39 34"], ["YES"]], [["24 -79 87 -79 87 -16 24 -16", "-59 21 -85 47 -59 73 -33 47"], ["NO"]], [["-68 -15 6 -15 6 59 -68 59", "48 -18 57 -27 48 -36 39 -27"], ["NO"]], [["25 1 25 91 -65 91 -65 1", "24 3 15 12 24 21 33 12"], ["YES"]], [["55 24 73 24 73 42 55 42", "49 17 10 56 49 95 88 56"], ["YES"]], [["69 -65 69 -28 32 -28 32 -65", "-1 50 43 6 -1 -38 -45 6"], ["NO"]], [["86 -26 86 18 42 18 42 -26", "3 -22 -40 21 3 64 46 21"], ["YES"]], [["52 -47 52 -30 35 -30 35 -47", "49 -22 64 -37 49 -52 34 -37"], ["YES"]], [["27 -59 27 9 -41 9 -41 -59", "-10 -17 2 -29 -10 -41 -22 -29"], ["YES"]], [["-90 2 0 2 0 92 -90 92", "-66 31 -86 51 -66 71 -46 51"], ["YES"]], [["-93 -86 -85 -86 -85 -78 -93 -78", "-13 61 0 48 -13 35 -26 48"], ["NO"]], [["-3 -45 85 -45 85 43 -3 43", "-22 0 -66 44 -22 88 22 44"], ["YES"]], [["-27 -73 72 -73 72 26 -27 26", "58 11 100 -31 58 -73 16 -31"], ["YES"]], [["-40 -31 8 -31 8 17 -40 17", "0 18 -35 53 0 88 35 53"], ["NO"]], [["-15 -63 -15 7 -85 7 -85 -63", "-35 -40 -33 -42 -35 -44 -37 -42"], ["YES"]], [["-100 -100 -100 100 100 100 100 -100", "-100 0 0 100 100 0 0 -100"], ["YES"]], [["67 33 67 67 33 67 33 33", "43 11 9 45 43 79 77 45"], ["YES"]], [["14 8 9 8 9 3 14 3", "-2 -13 14 3 30 -13 14 -29"], ["YES"]], [["4 3 7 3 7 6 4 6", "7 29 20 16 7 3 -6 16"], ["YES"]], [["14 30 3 30 3 19 14 19", "19 -13 11 -5 19 3 27 -5"], ["NO"]], [["-54 3 -50 3 -50 -1 -54 -1", "3 -50 -6 -41 -15 -50 -6 -59"], ["NO"]], [["3 8 3 -10 21 -10 21 8", "-9 2 -21 -10 -9 -22 3 -10"], ["YES"]], [["-35 3 -21 3 -21 -11 -35 -11", "-8 -10 3 -21 -8 -32 -19 -21"], ["NO"]], [["-5 -23 -5 -31 3 -31 3 -23", "-7 -23 -2 -28 3 -23 -2 -18"], ["YES"]], [["3 20 10 20 10 13 3 13", "3 20 21 38 39 20 21 2"], ["YES"]], [["25 3 16 3 16 12 25 12", "21 -2 16 -7 11 -2 16 3"], ["YES"]], [["-1 18 -1 3 14 3 14 18", "14 3 19 8 14 13 9 8"], ["YES"]], [["-44 -17 -64 -17 -64 3 -44 3", "-56 15 -44 27 -32 15 -44 3"], ["YES"]], [["17 3 2 3 2 18 17 18", "22 23 2 3 -18 23 2 43"], ["YES"]], [["3 -22 3 -36 -11 -36 -11 -22", "11 -44 19 -36 11 -28 3 -36"], ["YES"]], [["3 45 3 48 0 48 0 45", "13 38 4 47 13 56 22 47"], ["NO"]], [["3 -10 2 -10 2 -9 3 -9", "38 -10 20 -28 2 -10 20 8"], ["YES"]], [["-66 3 -47 3 -47 22 -66 22", "-52 -2 -45 5 -52 12 -59 5"], ["YES"]], [["3 37 -1 37 -1 41 3 41", "6 31 9 34 6 37 3 34"], ["NO"]], [["13 1 15 1 15 3 13 3", "13 19 21 11 13 3 5 11"], ["YES"]], [["20 8 3 8 3 -9 20 -9", "2 -11 3 -10 2 -9 1 -10"], ["NO"]], [["3 41 3 21 -17 21 -17 41", "26 12 10 28 26 44 42 28"], ["NO"]], [["11 11 11 3 3 3 3 11", "-12 26 -27 11 -12 -4 3 11"], ["YES"]], [["-29 3 -29 12 -38 12 -38 3", "-35 9 -29 15 -23 9 -29 3"], ["YES"]], [["3 -32 1 -32 1 -30 3 -30", "4 -32 -16 -52 -36 -32 -16 -12"], ["YES"]], [["-16 -10 -16 9 3 9 3 -10", "-8 -1 2 9 12 -1 2 -11"], ["YES"]], [["3 -42 -5 -42 -5 -34 3 -34", "-8 -54 -19 -43 -8 -32 3 -43"], ["YES"]], [["-47 3 -37 3 -37 -7 -47 -7", "-37 3 -33 -1 -37 -5 -41 -1"], ["YES"]], [["10 3 12 3 12 5 10 5", "12 4 20 12 12 20 4 12"], ["YES"]], [["3 -41 -9 -41 -9 -53 3 -53", "18 -16 38 -36 18 -56 -2 -36"], ["YES"]], [["3 40 2 40 2 41 3 41", "22 39 13 48 4 39 13 30"], ["NO"]], [["21 26 21 44 3 44 3 26", "-20 38 -32 26 -20 14 -8 26"], ["NO"]], [["0 7 3 7 3 10 0 10", "3 9 -17 29 -37 9 -17 -11"], ["YES"]], [["3 21 3 18 6 18 6 21", "-27 18 -11 2 5 18 -11 34"], ["YES"]], [["-29 13 -39 13 -39 3 -29 3", "-36 -4 -50 -18 -36 -32 -22 -18"], ["NO"]], [["3 -26 -2 -26 -2 -21 3 -21", "-5 -37 -16 -26 -5 -15 6 -26"], ["YES"]], [["3 9 -1 9 -1 13 3 13", "-9 17 -1 9 -9 1 -17 9"], ["YES"]], [["48 8 43 8 43 3 48 3", "31 -4 43 8 55 -4 43 -16"], ["YES"]], [["-3 1 3 1 3 -5 -3 -5", "20 -22 3 -5 20 12 37 -5"], ["YES"]], [["14 3 14 -16 -5 -16 -5 3", "14 2 15 1 14 0 13 1"], ["YES"]], [["-10 12 -10 -1 3 -1 3 12", "1 10 -2 7 -5 10 -2 13"], ["YES"]], [["39 21 21 21 21 3 39 3", "27 3 47 -17 27 -37 7 -17"], ["YES"]], [["3 1 3 17 -13 17 -13 1", "17 20 10 27 3 20 10 13"], ["NO"]], [["15 -18 3 -18 3 -6 15 -6", "29 -1 16 -14 3 -1 16 12"], ["YES"]], [["41 -6 41 3 32 3 32 -6", "33 3 35 5 33 7 31 5"], ["YES"]], [["7 35 3 35 3 39 7 39", "23 15 3 35 23 55 43 35"], ["YES"]], [["19 19 35 19 35 3 19 3", "25 -9 16 -18 7 -9 16 0"], ["NO"]], [["-20 3 -20 9 -26 9 -26 3", "-19 4 -21 2 -19 0 -17 2"], ["YES"]], [["13 3 22 3 22 -6 13 -6", "26 3 22 -1 18 3 22 7"], ["YES"]], [["-4 -8 -4 -15 3 -15 3 -8", "-10 5 -27 -12 -10 -29 7 -12"], ["YES"]], [["3 15 7 15 7 19 3 19", "-12 30 -23 19 -12 8 -1 19"], ["NO"]], [["-12 3 5 3 5 -14 -12 -14", "-14 22 5 3 24 22 5 41"], ["YES"]], [["-37 3 -17 3 -17 -17 -37 -17", "-9 -41 9 -23 -9 -5 -27 -23"], ["YES"]], [["3 57 3 45 -9 45 -9 57", "8 50 21 37 8 24 -5 37"], ["YES"]], [["42 3 42 -6 33 -6 33 3", "42 4 41 3 40 4 41 5"], ["YES"]], [["3 59 3 45 -11 45 -11 59", "-2 50 -8 44 -2 38 4 44"], ["YES"]], [["-51 3 -39 3 -39 15 -51 15", "-39 14 -53 0 -39 -14 -25 0"], ["YES"]], [["-7 -15 -7 3 11 3 11 -15", "15 -1 22 -8 15 -15 8 -8"], ["YES"]], [["3 -39 14 -39 14 -50 3 -50", "17 -39 5 -27 -7 -39 5 -51"], ["YES"]], [["91 -27 91 29 35 29 35 -27", "59 39 95 3 59 -33 23 3"], ["YES"]], [["-81 -60 -31 -60 -31 -10 -81 -10", "-58 -68 -95 -31 -58 6 -21 -31"], ["YES"]], [["78 -59 78 -2 21 -2 21 -59", "48 1 86 -37 48 -75 10 -37"], ["YES"]], [["-38 -26 32 -26 32 44 -38 44", "2 -27 -44 19 2 65 48 19"], ["YES"]], [["73 -54 73 -4 23 -4 23 -54", "47 1 77 -29 47 -59 17 -29"], ["YES"]], [["-6 -25 46 -25 46 27 -6 27", "21 -43 -21 -1 21 41 63 -1"], ["YES"]], [["-17 -91 -17 -27 -81 -27 -81 -91", "-48 -21 -12 -57 -48 -93 -84 -57"], ["YES"]], [["-7 16 43 16 43 66 -7 66", "18 -7 -27 38 18 83 63 38"], ["YES"]], [["-46 11 16 11 16 73 -46 73", "-18 -8 -67 41 -18 90 31 41"], ["YES"]], [["-33 -64 25 -64 25 -6 -33 -6", "-5 -74 -51 -28 -5 18 41 -28"], ["YES"]], [["99 -100 100 -100 100 -99 99 -99", "99 -99 100 -98 99 -97 98 -98"], ["YES"]], [["-100 -100 -100 -99 -99 -99 -99 -100", "-10 -10 -9 -9 -10 -8 -11 -9"], ["NO"]], [["-4 3 -3 3 -3 4 -4 4", "0 -4 4 0 0 4 -4 0"], ["NO"]], [["0 0 10 0 10 10 0 10", "11 9 13 7 15 9 13 11"], ["NO"]], [["1 1 1 6 6 6 6 1", "5 8 8 11 11 8 8 5"], ["NO"]], [["99 99 99 100 100 100 100 99", "-100 0 0 100 100 0 0 -100"], ["NO"]], [["0 0 0 2 2 2 2 0", "5 1 9 5 5 9 1 5"], ["NO"]], [["3 2 3 3 4 3 4 2", "0 4 4 0 0 -4 -4 0"], ["NO"]], [["0 0 2 0 2 2 0 2", "4 1 7 4 4 7 1 4"], ["NO"]], [["3 6 3 8 5 8 5 6", "2 9 4 11 6 9 4 7"], ["YES"]], [["0 0 10 0 10 10 0 10", "-1 5 5 -1 11 5 5 11"], ["YES"]], [["0 0 1 0 1 1 0 1", "3 0 6 3 3 6 0 3"], ["NO"]], [["3 7 4 7 4 6 3 6", "0 0 10 10 20 0 10 -10"], ["NO"]], [["0 0 0 1 1 1 1 0", "0 3 3 6 6 3 3 0"], ["NO"]], [["0 0 0 4 4 4 4 0", "3 6 7 10 11 6 7 2"], ["NO"]], [["0 0 0 1 1 1 1 0", "0 10 10 0 20 10 10 20"], ["NO"]]]}, {"problem_id": "993A", "pseudocode_lines": ["create integer adj of size 1000 with array of size 1000", "declare swap taking in floats &a and &b", "    if b is less than a", "        create float temp = b", "        set b to a", "        set a to temp", "    end of the block", "    return", "end of the block", "declare inside taking in float arrays p of size 2 and s of size 4 with array of size 2 and returning bool", "    if s[0][0] is equal to s[1][0]", "        create float l = s[0][0] and u = s[2][0]", "        swap values of l and u", "        if p[0] is less than or equal to u and p[0] is greater than or equal to 1", "            set l to s[0][1]", "            set u to s[1][1]", "            swap values of l and u", "            if p[1] is greater than or equal to 1 and p[1] is less than or equal to u", "                return true", "            otherwise do", "                return false", "        else do", "            return false", "        end of the block", "    else", "        make floats l = s[0][1] and u = s[2][1]", "        swap values of l and u", "        if p[1] is less than or equal to u and p[1] is greater than or equal to 1", "            set l to s[0][0]", "            set u to s[1][0]", "            swap values of l and u", "            if p[0] is greater than or equal to 1 and p[0] is less than or equal to u", "                return true", "            else", "                return false", "        otherwise", "            return false", "        end of the block", "    end of the block", "end of the block", "define the main function", "    make float arrays p1 of size 4 with array of size 2 and p2 of size 4 with array of size 2", "    for i = 0 to (4) exclusive", "        for j = 0 to (2) exclusive, read p1[i][j]", "    end of the block", "    for i = 0 to (4) exclusive", "        for j = 0 to (2) exclusive, read p2[i][j]", "    end of the block", "    create bool ans = false", "    for i = 0 to (4) exclusive", "        if inside(p2[i], p1) is truthy, set ans to true", "    end of the block", "    make float array p of size 2 containing {0, 0}", "    for i = 0 to (4) exclusive", "        set p[0] to p[0] + p2[i][0]", "        set p[1] to p[1] + p2[i][1]", "    end of the block", "    set p[0] to p[0] * 1.0 / 4", "    set p[1] to p[1] * 1.0 / 4", "    if inside(p, p1) is truthy, set ans to true", "    for i = 0 to (4) exclusive", "        make floats x = p1[i][0] - p1[i][1] and y = p1[i][0] + p1[i][1]", "        set p1[i][0] to x", "        set p1[i][1] to y", "    end of the block", "    for i = 0 to (4) exclusive", "        make floats x = p2[i][0] - p2[i][1] and y = p2[i][0] + p2[i][1]", "        set p2[i][0] to x", "        set p2[i][1] to y", "    end of the block", "    for i = 0 to (4) exclusive", "        if inside(p1[i], p2) is truthy, set ans to true", "    end of the block", "    if ans is truthy", "        print \"YES\\n\"", "    else do", "        show \"NO\\n\"", "    end of the block", "end of the block"], "code_lines": ["int adj[1000][1000];", "void swap(float &a, float &b) {", "    if (b < a) {", "        float temp = b;", "        b = a;", "        a = temp;", "    }", "    return;", "}", "bool inside(float p[2], float s[4][2]) {", "    if (s[0][0] == s[1][0]) {", "        float l = s[0][0], u = s[2][0];", "        swap(l, u);", "        if (p[0] <= u && p[0] >= l) {", "            l = s[0][1];", "            u = s[1][1];", "            swap(l, u);", "            if (p[1] >= l && p[1] <= u) {", "                return true;", "            } else", "                return false;", "        } else {", "            return false;", "        }", "    } else {", "        float l = s[0][1], u = s[2][1];", "        swap(l, u);", "        if (p[1] <= u && p[1] >= l) {", "            l = s[0][0];", "            u = s[1][0];", "            swap(l, u);", "            if (p[0] >= l && p[0] <= u) {", "                return true;", "            } else", "                return false;", "        } else {", "            return false;", "        }", "    }", "}", "int main() {", "    float p1[4][2], p2[4][2];", "    for (int i = 0; i < (4); i++) {", "        for (int j = 0; j < (2); j++) cin >> p1[i][j];", "    }", "    for (int i = 0; i < (4); i++) {", "        for (int j = 0; j < (2); j++) cin >> p2[i][j];", "    }", "    bool ans = false;", "    for (int i = 0; i < (4); i++) {", "        if (inside(p2[i], p1)) ans = true;", "    }", "    float p[2] = {0, 0};", "    for (int i = 0; i < (4); i++) {", "        p[0] += p2[i][0];", "        p[1] += p2[i][1];", "    }", "    p[0] = p[0] * 1.0 / 4;", "    p[1] = p[1] * 1.0 / 4;", "    if (inside(p, p1)) ans = true;", "    for (int i = 0; i < (4); i++) {", "        float x = p1[i][0] - p1[i][1], y = p1[i][0] + p1[i][1];", "        p1[i][0] = x;", "        p1[i][1] = y;", "    }", "    for (int i = 0; i < (4); i++) {", "        float x = p2[i][0] - p2[i][1], y = p2[i][0] + p2[i][1];", "        p2[i][0] = x;", "        p2[i][1] = y;", "    }", "    for (int i = 0; i < (4); i++) {", "        if (inside(p1[i], p2)) ans = true;", "    }", "    if (ans) {", "        cout << \"YES\\n\";", "    } else {", "        cout << \"NO\\n\";", "    }", "}"], "testcases": [[["0 0 6 0 6 6 0 6", "1 3 3 5 5 3 3 1"], ["YES"]], [["0 0 6 0 6 6 0 6", "7 3 9 5 11 3 9 1"], ["NO"]], [["6 0 6 6 0 6 0 0", "7 4 4 7 7 10 10 7"], ["YES"]], [["0 0 6 0 6 6 0 6", "8 4 4 8 8 12 12 8"], ["YES"]], [["2 2 4 2 4 4 2 4", "0 3 3 6 6 3 3 0"], ["YES"]], [["-5 -5 5 -5 5 5 -5 5", "-5 7 0 2 5 7 0 12"], ["YES"]], [["-5 -5 5 -5 5 5 -5 5", "-5 12 0 7 5 12 0 17"], ["NO"]], [["-5 -5 5 -5 5 5 -5 5", "6 0 0 6 -6 0 0 -6"], ["YES"]], [["-100 -100 100 -100 100 100 -100 100", "-100 0 0 -100 100 0 0 100"], ["YES"]], [["92 1 92 98 -5 98 -5 1", "44 60 56 48 44 36 32 48"], ["YES"]], [["-12 -54 -12 33 -99 33 -99 -54", "-77 -40 -86 -31 -77 -22 -68 -31"], ["YES"]], [["3 45 19 45 19 61 3 61", "-29 45 -13 29 3 45 -13 61"], ["YES"]], [["79 -19 79 15 45 15 45 -19", "-1 24 -29 52 -1 80 27 52"], ["NO"]], [["75 -57 75 -21 39 -21 39 -57", "10 -42 -32 0 10 42 52 0"], ["NO"]], [["-11 53 9 53 9 73 -11 73", "-10 9 -43 42 -10 75 23 42"], ["YES"]], [["-10 -36 -10 27 -73 27 -73 -36", "44 -28 71 -55 44 -82 17 -55"], ["NO"]], [["-63 -15 6 -15 6 54 -63 54", "15 -13 -8 10 15 33 38 10"], ["YES"]], [["47 15 51 15 51 19 47 19", "19 0 -27 46 19 92 65 46"], ["NO"]], [["87 -5 87 79 3 79 3 -5", "36 36 78 -6 36 -48 -6 -6"], ["YES"]], [["-4 56 10 56 10 70 -4 70", "-11 47 -35 71 -11 95 13 71"], ["YES"]], [["-41 6 -41 8 -43 8 -43 6", "-7 27 43 -23 -7 -73 -57 -23"], ["NO"]], [["44 -58 44 7 -21 7 -21 -58", "22 19 47 -6 22 -31 -3 -6"], ["YES"]], [["-37 -63 49 -63 49 23 -37 23", "-52 68 -21 37 -52 6 -83 37"], ["YES"]], [["93 20 93 55 58 55 58 20", "61 -17 39 5 61 27 83 5"], ["YES"]], [["-7 4 -7 58 -61 58 -61 4", "-28 45 -17 34 -28 23 -39 34"], ["YES"]], [["24 -79 87 -79 87 -16 24 -16", "-59 21 -85 47 -59 73 -33 47"], ["NO"]], [["-68 -15 6 -15 6 59 -68 59", "48 -18 57 -27 48 -36 39 -27"], ["NO"]], [["25 1 25 91 -65 91 -65 1", "24 3 15 12 24 21 33 12"], ["YES"]], [["55 24 73 24 73 42 55 42", "49 17 10 56 49 95 88 56"], ["YES"]], [["69 -65 69 -28 32 -28 32 -65", "-1 50 43 6 -1 -38 -45 6"], ["NO"]], [["86 -26 86 18 42 18 42 -26", "3 -22 -40 21 3 64 46 21"], ["YES"]], [["52 -47 52 -30 35 -30 35 -47", "49 -22 64 -37 49 -52 34 -37"], ["YES"]], [["27 -59 27 9 -41 9 -41 -59", "-10 -17 2 -29 -10 -41 -22 -29"], ["YES"]], [["-90 2 0 2 0 92 -90 92", "-66 31 -86 51 -66 71 -46 51"], ["YES"]], [["-93 -86 -85 -86 -85 -78 -93 -78", "-13 61 0 48 -13 35 -26 48"], ["NO"]], [["-3 -45 85 -45 85 43 -3 43", "-22 0 -66 44 -22 88 22 44"], ["YES"]], [["-27 -73 72 -73 72 26 -27 26", "58 11 100 -31 58 -73 16 -31"], ["YES"]], [["-40 -31 8 -31 8 17 -40 17", "0 18 -35 53 0 88 35 53"], ["NO"]], [["-15 -63 -15 7 -85 7 -85 -63", "-35 -40 -33 -42 -35 -44 -37 -42"], ["YES"]], [["-100 -100 -100 100 100 100 100 -100", "-100 0 0 100 100 0 0 -100"], ["YES"]], [["67 33 67 67 33 67 33 33", "43 11 9 45 43 79 77 45"], ["YES"]], [["14 8 9 8 9 3 14 3", "-2 -13 14 3 30 -13 14 -29"], ["YES"]], [["4 3 7 3 7 6 4 6", "7 29 20 16 7 3 -6 16"], ["YES"]], [["14 30 3 30 3 19 14 19", "19 -13 11 -5 19 3 27 -5"], ["NO"]], [["-54 3 -50 3 -50 -1 -54 -1", "3 -50 -6 -41 -15 -50 -6 -59"], ["NO"]], [["3 8 3 -10 21 -10 21 8", "-9 2 -21 -10 -9 -22 3 -10"], ["YES"]], [["-35 3 -21 3 -21 -11 -35 -11", "-8 -10 3 -21 -8 -32 -19 -21"], ["NO"]], [["-5 -23 -5 -31 3 -31 3 -23", "-7 -23 -2 -28 3 -23 -2 -18"], ["YES"]], [["3 20 10 20 10 13 3 13", "3 20 21 38 39 20 21 2"], ["YES"]], [["25 3 16 3 16 12 25 12", "21 -2 16 -7 11 -2 16 3"], ["YES"]], [["-1 18 -1 3 14 3 14 18", "14 3 19 8 14 13 9 8"], ["YES"]], [["-44 -17 -64 -17 -64 3 -44 3", "-56 15 -44 27 -32 15 -44 3"], ["YES"]], [["17 3 2 3 2 18 17 18", "22 23 2 3 -18 23 2 43"], ["YES"]], [["3 -22 3 -36 -11 -36 -11 -22", "11 -44 19 -36 11 -28 3 -36"], ["YES"]], [["3 45 3 48 0 48 0 45", "13 38 4 47 13 56 22 47"], ["NO"]], [["3 -10 2 -10 2 -9 3 -9", "38 -10 20 -28 2 -10 20 8"], ["YES"]], [["-66 3 -47 3 -47 22 -66 22", "-52 -2 -45 5 -52 12 -59 5"], ["YES"]], [["3 37 -1 37 -1 41 3 41", "6 31 9 34 6 37 3 34"], ["NO"]], [["13 1 15 1 15 3 13 3", "13 19 21 11 13 3 5 11"], ["YES"]], [["20 8 3 8 3 -9 20 -9", "2 -11 3 -10 2 -9 1 -10"], ["NO"]], [["3 41 3 21 -17 21 -17 41", "26 12 10 28 26 44 42 28"], ["NO"]], [["11 11 11 3 3 3 3 11", "-12 26 -27 11 -12 -4 3 11"], ["YES"]], [["-29 3 -29 12 -38 12 -38 3", "-35 9 -29 15 -23 9 -29 3"], ["YES"]], [["3 -32 1 -32 1 -30 3 -30", "4 -32 -16 -52 -36 -32 -16 -12"], ["YES"]], [["-16 -10 -16 9 3 9 3 -10", "-8 -1 2 9 12 -1 2 -11"], ["YES"]], [["3 -42 -5 -42 -5 -34 3 -34", "-8 -54 -19 -43 -8 -32 3 -43"], ["YES"]], [["-47 3 -37 3 -37 -7 -47 -7", "-37 3 -33 -1 -37 -5 -41 -1"], ["YES"]], [["10 3 12 3 12 5 10 5", "12 4 20 12 12 20 4 12"], ["YES"]], [["3 -41 -9 -41 -9 -53 3 -53", "18 -16 38 -36 18 -56 -2 -36"], ["YES"]], [["3 40 2 40 2 41 3 41", "22 39 13 48 4 39 13 30"], ["NO"]], [["21 26 21 44 3 44 3 26", "-20 38 -32 26 -20 14 -8 26"], ["NO"]], [["0 7 3 7 3 10 0 10", "3 9 -17 29 -37 9 -17 -11"], ["YES"]], [["3 21 3 18 6 18 6 21", "-27 18 -11 2 5 18 -11 34"], ["YES"]], [["-29 13 -39 13 -39 3 -29 3", "-36 -4 -50 -18 -36 -32 -22 -18"], ["NO"]], [["3 -26 -2 -26 -2 -21 3 -21", "-5 -37 -16 -26 -5 -15 6 -26"], ["YES"]], [["3 9 -1 9 -1 13 3 13", "-9 17 -1 9 -9 1 -17 9"], ["YES"]], [["48 8 43 8 43 3 48 3", "31 -4 43 8 55 -4 43 -16"], ["YES"]], [["-3 1 3 1 3 -5 -3 -5", "20 -22 3 -5 20 12 37 -5"], ["YES"]], [["14 3 14 -16 -5 -16 -5 3", "14 2 15 1 14 0 13 1"], ["YES"]], [["-10 12 -10 -1 3 -1 3 12", "1 10 -2 7 -5 10 -2 13"], ["YES"]], [["39 21 21 21 21 3 39 3", "27 3 47 -17 27 -37 7 -17"], ["YES"]], [["3 1 3 17 -13 17 -13 1", "17 20 10 27 3 20 10 13"], ["NO"]], [["15 -18 3 -18 3 -6 15 -6", "29 -1 16 -14 3 -1 16 12"], ["YES"]], [["41 -6 41 3 32 3 32 -6", "33 3 35 5 33 7 31 5"], ["YES"]], [["7 35 3 35 3 39 7 39", "23 15 3 35 23 55 43 35"], ["YES"]], [["19 19 35 19 35 3 19 3", "25 -9 16 -18 7 -9 16 0"], ["NO"]], [["-20 3 -20 9 -26 9 -26 3", "-19 4 -21 2 -19 0 -17 2"], ["YES"]], [["13 3 22 3 22 -6 13 -6", "26 3 22 -1 18 3 22 7"], ["YES"]], [["-4 -8 -4 -15 3 -15 3 -8", "-10 5 -27 -12 -10 -29 7 -12"], ["YES"]], [["3 15 7 15 7 19 3 19", "-12 30 -23 19 -12 8 -1 19"], ["NO"]], [["-12 3 5 3 5 -14 -12 -14", "-14 22 5 3 24 22 5 41"], ["YES"]], [["-37 3 -17 3 -17 -17 -37 -17", "-9 -41 9 -23 -9 -5 -27 -23"], ["YES"]], [["3 57 3 45 -9 45 -9 57", "8 50 21 37 8 24 -5 37"], ["YES"]], [["42 3 42 -6 33 -6 33 3", "42 4 41 3 40 4 41 5"], ["YES"]], [["3 59 3 45 -11 45 -11 59", "-2 50 -8 44 -2 38 4 44"], ["YES"]], [["-51 3 -39 3 -39 15 -51 15", "-39 14 -53 0 -39 -14 -25 0"], ["YES"]], [["-7 -15 -7 3 11 3 11 -15", "15 -1 22 -8 15 -15 8 -8"], ["YES"]], [["3 -39 14 -39 14 -50 3 -50", "17 -39 5 -27 -7 -39 5 -51"], ["YES"]], [["91 -27 91 29 35 29 35 -27", "59 39 95 3 59 -33 23 3"], ["YES"]], [["-81 -60 -31 -60 -31 -10 -81 -10", "-58 -68 -95 -31 -58 6 -21 -31"], ["YES"]], [["78 -59 78 -2 21 -2 21 -59", "48 1 86 -37 48 -75 10 -37"], ["YES"]], [["-38 -26 32 -26 32 44 -38 44", "2 -27 -44 19 2 65 48 19"], ["YES"]], [["73 -54 73 -4 23 -4 23 -54", "47 1 77 -29 47 -59 17 -29"], ["YES"]], [["-6 -25 46 -25 46 27 -6 27", "21 -43 -21 -1 21 41 63 -1"], ["YES"]], [["-17 -91 -17 -27 -81 -27 -81 -91", "-48 -21 -12 -57 -48 -93 -84 -57"], ["YES"]], [["-7 16 43 16 43 66 -7 66", "18 -7 -27 38 18 83 63 38"], ["YES"]], [["-46 11 16 11 16 73 -46 73", "-18 -8 -67 41 -18 90 31 41"], ["YES"]], [["-33 -64 25 -64 25 -6 -33 -6", "-5 -74 -51 -28 -5 18 41 -28"], ["YES"]], [["99 -100 100 -100 100 -99 99 -99", "99 -99 100 -98 99 -97 98 -98"], ["YES"]], [["-100 -100 -100 -99 -99 -99 -99 -100", "-10 -10 -9 -9 -10 -8 -11 -9"], ["NO"]], [["-4 3 -3 3 -3 4 -4 4", "0 -4 4 0 0 4 -4 0"], ["NO"]], [["0 0 10 0 10 10 0 10", "11 9 13 7 15 9 13 11"], ["NO"]], [["1 1 1 6 6 6 6 1", "5 8 8 11 11 8 8 5"], ["NO"]], [["99 99 99 100 100 100 100 99", "-100 0 0 100 100 0 0 -100"], ["NO"]], [["0 0 0 2 2 2 2 0", "5 1 9 5 5 9 1 5"], ["NO"]], [["3 2 3 3 4 3 4 2", "0 4 4 0 0 -4 -4 0"], ["NO"]], [["0 0 2 0 2 2 0 2", "4 1 7 4 4 7 1 4"], ["NO"]], [["3 6 3 8 5 8 5 6", "2 9 4 11 6 9 4 7"], ["YES"]], [["0 0 10 0 10 10 0 10", "-1 5 5 -1 11 5 5 11"], ["YES"]], [["0 0 1 0 1 1 0 1", "3 0 6 3 3 6 0 3"], ["NO"]], [["3 7 4 7 4 6 3 6", "0 0 10 10 20 0 10 -10"], ["NO"]], [["0 0 0 1 1 1 1 0", "0 3 3 6 6 3 3 0"], ["NO"]], [["0 0 0 4 4 4 4 0", "3 6 7 10 11 6 7 2"], ["NO"]], [["0 0 0 1 1 1 1 0", "0 10 10 0 20 10 10 20"], ["NO"]]]}, {"problem_id": "1051A", "pseudocode_lines": ["make string s", "in function ok with return type boolean and parameter string t", "    make int msk = 0", "    for i = 0 to (cast t size to int) exclusive", "        if isupper(t[i]) then set msk to msk bitwise or 1", "        if islower(t[i]) then set msk to msk bitwise or1", "        if isdigit(t[i]) then set msk to msk bitwise or 1", "    end of the block", "    return msk is equal to 7", "end of the block", "define the main function", "    make integer t", "    read t", "    for i = 0 to t exclusive", "        read s", "        if ok(s)", "            print s", "            continue", "        end of the block", "        make boolean fnd = false", "        for i = 0 to (cast s size to int) exclusive", "            make string t = s", "            set t[i] to '1'", "            if ok(t)", "                print t", "                set fnd to true", "                break", "            end of the block", "            set t[i] to 'a'", "            if ok(t)", "                print t", "                set fnd to true", "                break", "            end of the block", "            set t[i] to 'A'", "            if ok(t)", "                print t", "                set fnd to true", "                break", "            end of the block", "        end of the block", "        if fnd then continue", "        if isupper(s[2])", "            set s[0] to 'a'", "            set s[1] to '1'", "            print s", "            continue", "        end of the block", "        if islower(s[2])", "            set s[0] to 'A'", "            set s[1] to '1'", "            print s", "            continue", "        end of the block", "        if isdigit(s[2])", "            set s[0] to 'a'", "            set s[1] to 'A'", "            print s", "            continue", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["string s;", "bool ok(string t) {", "    int msk = 0;", "    for (int i = 0; i < int(t.size()); ++i) {", "        if (isupper(t[i])) msk |= 1;", "        if (islower(t[i])) msk |= 2;", "        if (isdigit(t[i])) msk |= 4;", "    }", "    return msk == 7;", "}", "int main() {", "    int t;", "    cin >> t;", "    for (int i = 0; i < t; ++i) {", "        cin >> s;", "        if (ok(s)) {", "            cout << s << endl;", "            continue;", "        }", "        bool fnd = false;", "        for (int i = 0; i < int(s.size()); ++i) {", "            string t = s;", "            t[i] = '1';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "            t[i] = 'a';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "            t[i] = 'A';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "        }", "        if (fnd) continue;", "        if (isupper(s[2])) {", "            s[0] = 'a';", "            s[1] = '1';", "            cout << s << endl;", "            continue;", "        }", "        if (islower(s[2])) {", "            s[0] = 'A';", "            s[1] = '1';", "            cout << s << endl;", "            continue;", "        }", "        if (isdigit(s[2])) {", "            s[0] = 'a';", "            s[1] = 'A';", "            cout << s << endl;", "            continue;", "        }", "    }", "    return 0;", "}"], "testcases": [[["2", "abcDCE", "htQw27"], ["1bcDCE", "htQw27"]], [["3", "afd", "142", "TRE"], ["A1d", "aA2", "a1E"]], [["4", "YtG3", "33Yo", "123n", "m23m"], ["YtG3", "33Yo", "A23n", "A23m"]], [["6", "11b", "4bh", "Beh", "TuY", "1YJ", "P28"], ["A1b", "4Ah", "B1h", "1uY", "1aJ", "Pa8"]], [["1", "aAbAcDeF"], ["1AbAcDeF"]], [["1", "000"], ["aA0"]], [["1", "a00"], ["aA0"]], [["1", "M62H"], ["a62H"]], [["1", "NV641"], ["aV641"]], [["1", "825"], ["aA5"]], [["1", "A00"], ["Aa0"]], [["1", "Gfxqp2"], ["Gfxqp2"]], [["1", "oypS"], ["1ypS"]], [["1", "R0FYRZ"], ["a0FYRZ"]], [["1", "11g9"], ["A1g9"]], [["1", "0a0"], ["Aa0"]], [["1", "WK7S"], ["aK7S"]], [["1", "0aa"], ["0Aa"]]]}, {"problem_id": "1051A", "pseudocode_lines": ["make string s", "in function ok with return type boolean and parameter string t", "    make int msk = 0", "    for i = 0 to (cast t size to int) exclusive", "        if isupper(t[i]) then set msk to msk bitwise or 1", "        if islower(t[i]) then set msk to msk bitwise or1", "        if isdigit(t[i]) then set msk to msk bitwise or 1", "    end of the block", "    return msk is equal to 7", "end of the block", "define the main function", "    make integer t", "    read t", "    for i = 0 to t exclusive", "        read s", "        if ok(s)", "            print s", "            continue", "        end of the block", "        make boolean fnd = false", "        for i = 0 to (cast s size to int) exclusive", "            make string t = s", "            set t[i] to '1'", "            if ok(t)", "                print t", "                set fnd to true", "                break", "            end of the block", "            set t[i] to 'a'", "            if ok(t)", "                print t", "                set fnd to true", "                break", "            end of the block", "            set t[i] to 'A'", "            if ok(t)", "                print t", "                set fnd to true", "                break", "            end of the block", "        end of the block", "        if fnd then continue", "        if isupper(s[2])", "            set s[0] to 'a'", "            set s[1] to '1'", "            print s", "            continue", "        end of the block", "        if islower(s[2])", "            set s[0] to 'A'", "            set s[1] to '1'", "            print s", "            continue", "        end of the block", "        if isdigit(s[2])", "            set s[0] to 'a'", "            set s[1] to 'A'", "            print s", "            continue", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["string s;", "bool ok(string t) {", "    int msk = 0;", "    for (int i = 0; i < int(t.size()); ++i) {", "        if (isupper(t[i])) msk |= 1;", "        if (islower(t[i])) msk |= 2;", "        if (isdigit(t[i])) msk |= 4;", "    }", "    return msk == 7;", "}", "int main() {", "    int t;", "    cin >> t;", "    for (int i = 0; i < t; ++i) {", "        cin >> s;", "        if (ok(s)) {", "            cout << s << endl;", "            continue;", "        }", "        bool fnd = false;", "        for (int i = 0; i < int(s.size()); ++i) {", "            string t = s;", "            t[i] = '1';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "            t[i] = 'a';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "            t[i] = 'A';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "        }", "        if (fnd) continue;", "        if (isupper(s[2])) {", "            s[0] = 'a';", "            s[1] = '1';", "            cout << s << endl;", "            continue;", "        }", "        if (islower(s[2])) {", "            s[0] = 'A';", "            s[1] = '1';", "            cout << s << endl;", "            continue;", "        }", "        if (isdigit(s[2])) {", "            s[0] = 'a';", "            s[1] = 'A';", "            cout << s << endl;", "            continue;", "        }", "    }", "    return 0;", "}"], "testcases": [[["2", "abcDCE", "htQw27"], ["1bcDCE", "htQw27"]], [["3", "afd", "142", "TRE"], ["A1d", "aA2", "a1E"]], [["4", "YtG3", "33Yo", "123n", "m23m"], ["YtG3", "33Yo", "A23n", "A23m"]], [["6", "11b", "4bh", "Beh", "TuY", "1YJ", "P28"], ["A1b", "4Ah", "B1h", "1uY", "1aJ", "Pa8"]], [["1", "aAbAcDeF"], ["1AbAcDeF"]], [["1", "000"], ["aA0"]], [["1", "a00"], ["aA0"]], [["1", "M62H"], ["a62H"]], [["1", "NV641"], ["aV641"]], [["1", "825"], ["aA5"]], [["1", "A00"], ["Aa0"]], [["1", "Gfxqp2"], ["Gfxqp2"]], [["1", "oypS"], ["1ypS"]], [["1", "R0FYRZ"], ["a0FYRZ"]], [["1", "11g9"], ["A1g9"]], [["1", "0a0"], ["Aa0"]], [["1", "WK7S"], ["aK7S"]], [["1", "0aa"], ["0Aa"]]]}, {"problem_id": "1051A", "pseudocode_lines": ["declare constant integer INF = 1e9 + 10", "declare map from integer to character rep", "declare integer arrays cnt size 3, tp size 110", "declare con with character ch as argument, returning integer", "    if 'a' is less than or equal to ch and ch is less than or equal to 'z', return 0 from function", "    if 'A' is less than or equal to ch and ch is less than or equal to 'Z', return 1 from function", "    return 2", "end of the block", "define the main function", "    let rep[1] be 'a'", "    let rep[2] be 'A'", "    let rep[4] be '1'", "    declare integer Tst", "    read Tst", "    while decrement Tst is true", "        declare string s", "        read s", "        declare integer msk = 0", "        let cnt[0] be cnt[1] be cnt[2] be 0", "        for i = 0 to integer casted size of s exclusive", "            let tp[i] be result of run con(s[i])", "            let msk be msk bitwise or ( 1 bitshift left tp[i] )", "            increment cnt[tp[i]]", "        end of the block", "        if msk is 7", "            print s, '\\n'", "        else if result of run __builtin_popcount(msk) is 2", "            for i = 0 to integer casted size of s exclusive", "                if cnt[tp[i]] is greater than 1", "                    let s[i] be rep[7 bitwise xor msk]", "                    end loop", "                end of the block", "            print s, '\\n'", "        else", "            declare integer M = 7 bitwise xor msk", "            declare integer t = result of run __builtin_ctz(M)", "            let M be M bitwise xor ( 1 bitshift left t )", "            let s[0] be rep[1 bitshift left t]", "            let s[1] be rep[1 bitshift left result of run __builtin_ctz(M)]", "            print s, '\\n'", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int INF = 1e9 + 10;", "map<int, char> rep;", "int cnt[3], tp[110];", "int con(char ch) {", "    if ('a' <= ch && ch <= 'z') return 0;", "    if ('A' <= ch && ch <= 'Z') return 1;", "    return 2;", "}", "int main() {", "    rep[1] = 'a';", "    rep[2] = 'A';", "    rep[4] = '1';", "    int Tst;", "    cin >> Tst;", "    while (Tst--) {", "        string s;", "        cin >> s;", "        int msk = 0;", "        cnt[0] = cnt[1] = cnt[2] = 0;", "        for (int i = 0; i < ((int)(s).size()); i++) {", "            tp[i] = con(s[i]);", "            msk |= 1 << tp[i];", "            ++cnt[tp[i]];", "        }", "        if (msk == 7)", "            cout << s << '\\n';", "        else if (__builtin_popcount(msk) == 2) {", "            for (int i = 0; i < ((int)(s).size()); i++)", "                if (cnt[tp[i]] > 1) {", "                    s[i] = rep[7 ^ msk];", "                    break;", "                }", "            cout << s << '\\n';", "        } else {", "            int M = 7 ^ msk;", "            int t = __builtin_ctz(M);", "            M ^= 1 << t;", "            s[0] = rep[1 << t];", "            s[1] = rep[1 << (__builtin_ctz(M))];", "            cout << s << '\\n';", "        }", "    }", "    return 0;", "}"], "testcases": [[["2", "abcDCE", "htQw27"], ["1bcDCE", "htQw27"]], [["3", "afd", "142", "TRE"], ["A1d", "aA2", "a1E"]], [["4", "YtG3", "33Yo", "123n", "m23m"], ["YtG3", "33Yo", "A23n", "A23m"]], [["6", "11b", "4bh", "Beh", "TuY", "1YJ", "P28"], ["A1b", "4Ah", "B1h", "1uY", "1aJ", "Pa8"]], [["1", "aAbAcDeF"], ["1AbAcDeF"]], [["1", "000"], ["aA0"]], [["1", "a00"], ["aA0"]], [["1", "M62H"], ["a62H"]], [["1", "NV641"], ["aV641"]], [["1", "825"], ["aA5"]], [["1", "A00"], ["Aa0"]], [["1", "Gfxqp2"], ["Gfxqp2"]], [["1", "oypS"], ["1ypS"]], [["1", "R0FYRZ"], ["a0FYRZ"]], [["1", "11g9"], ["A1g9"]], [["1", "0a0"], ["Aa0"]], [["1", "WK7S"], ["aK7S"]], [["1", "0aa"], ["0Aa"]]]}, {"problem_id": "1051A", "pseudocode_lines": ["define the main function", "    n = int", "    read n", "    let num = 0, chr = 0, CHR = 0 be ints", "    str = string", "    for i = 0 to n exclusvie", "        read str", "        for j = 0 to length of str exclusive", "            if str at j is between 'a' and 'z' both inclusive", "                increment chr", "            else if str at j is between 'A' and 'Z' both inclusive", "                increment CHR", "            else", "                increment num", "            end of the block", "        end of the block", "        if chr = and CHR = 0", "            insert \"aA\" int str at 0", "            call erase on str with args 2, 2", "        else if chr and num are both = 0", "            insert \"a1\" into str[0]", "            call erase on str with args 2, 2", "        else if CHR and num are both = 0", "            insert \"A1\" into str[0]", "            erase 2, 2 form str", "        else if chr = 0", "            for j = 0 to length of str", "                if str at j >= 'A' bit and str[j] <= 'Z' bit and CHR > 1", "                    insert \"a\" in str at j", "                    erase j+1, 1 form str", "                    exit loop", "                else if str[j] is >= '0' bit and str[j] <= '9' bit and num > 1", "                    insert \"a\", j into str", "                    erase j+1, 1 from str", "                    exit loop", "                end of the block", "            end of the block", "        else if CHR = 0", "            for j = 0 to length of str", "                if str at j >= 'a' bit and str[j] <= 'z' bit and chr > 1", "                    call insert on str with args j, \"A\"", "                    erase j+1, 1 from str", "                    exit loop", "                else if str at j >= 'a' bit and str[j] <= 'z' bit and num > 1", "                    call insert on str with args j, \"A\"", "                    erase j+1, 1 from str", "                    exit loop", "                end of the block", "            end of the block", "        else if num = 0", "            for j = 0 to length of str", "                if str at j >= 'a' bit and str[j] <= 'z' bit and chr > 1", "                    insert j, \"1\" into str", "                    erase j+1, 1 from str", "                    exit loop", "                else if str at j >= 'A' bit and str[j] <= 'Z' bit and CHR > 1", "                    insert j, \"1\" into str", "                    erase j+1, 1 from str", "                    exit loop", "                end of the block", "            end of the block", "        end of the block", "        print str", "        set num to 0", "        set chr to 0", "        set CHR to 0", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n;", "    cin >> n;", "    int num = 0, chr = 0, CHR = 0;", "    string str;", "    for (int i = 0; i < n; i++) {", "        cin >> str;", "        for (int j = 0; j < str.length(); j++) {", "            if (str[j] >= 'a' & str[j] <= 'z') {", "                chr++;", "            } else if (str[j] >= 'A' & str[j] <= 'Z') {", "                CHR++;", "            } else {", "                num++;", "            }", "        }", "        if (chr == 0 && CHR == 0) {", "            str.insert(0, \"aA\");", "            str.erase(2, 2);", "        } else if (chr == 0 && num == 0) {", "            str.insert(0, \"a1\");", "            str.erase(2, 2);", "        } else if (CHR == 0 && num == 0) {", "            str.insert(0, \"A1\");", "            str.erase(2, 2);", "        } else if (chr == 0) {", "            for (int j = 0; j < str.length(); j++) {", "                if (str[j] >= 'A' & str[j] <= 'Z' & CHR > 1) {", "                    str.insert(j, \"a\");", "                    str.erase(j + 1, 1);", "                    break;", "                } else if (str[j] >= '0' & str[j] <= '9' & num > 1) {", "                    str.insert(j, \"a\");", "                    str.erase(j + 1, 1);", "                    break;", "                }", "            }", "        } else if (CHR == 0) {", "            for (int j = 0; j < str.length(); j++) {", "                if (str[j] >= 'a' & str[j] <= 'z' & chr > 1) {", "                    str.insert(j, \"A\");", "                    str.erase(j + 1, 1);", "                    break;", "                } else if (str[j] >= '0' & str[j] <= '9' & num > 1) {", "                    str.insert(j, \"A\");", "                    str.erase(j + 1, 1);", "                    break;", "                }", "            }", "        } else if (num == 0) {", "            for (int j = 0; j < str.length(); j++) {", "                if (str[j] >= 'a' & str[j] <= 'z' & chr > 1) {", "                    str.insert(j, \"1\");", "                    str.erase(j + 1, 1);", "                    break;", "                } else if (str[j] >= 'A' & str[j] <= 'Z' & CHR > 1) {", "                    str.insert(j, \"1\");", "                    str.erase(j + 1, 1);", "                    break;", "                }", "            }", "        }", "        cout << str << endl;", "        num = 0;", "        chr = 0;", "        CHR = 0;", "    }", "    return 0;", "}"], "testcases": [[["2", "abcDCE", "htQw27"], ["1bcDCE", "htQw27"]], [["3", "afd", "142", "TRE"], ["A1d", "aA2", "a1E"]], [["4", "YtG3", "33Yo", "123n", "m23m"], ["YtG3", "33Yo", "A23n", "A23m"]], [["6", "11b", "4bh", "Beh", "TuY", "1YJ", "P28"], ["A1b", "4Ah", "B1h", "1uY", "1aJ", "Pa8"]], [["1", "aAbAcDeF"], ["1AbAcDeF"]], [["1", "000"], ["aA0"]], [["1", "a00"], ["aA0"]], [["1", "M62H"], ["a62H"]], [["1", "NV641"], ["aV641"]], [["1", "825"], ["aA5"]], [["1", "A00"], ["Aa0"]], [["1", "Gfxqp2"], ["Gfxqp2"]], [["1", "oypS"], ["1ypS"]], [["1", "R0FYRZ"], ["a0FYRZ"]], [["1", "11g9"], ["A1g9"]], [["1", "0a0"], ["Aa0"]], [["1", "WK7S"], ["aK7S"]], [["1", "0aa"], ["0Aa"]]]}, {"problem_id": "1051A", "pseudocode_lines": ["declare ok with string t as argument, returning boolean", "    declare integer msk = 0", "    for i = 0 to integer casted size of t exclusive", "        if t[i] is upper case, let msk be msk bitwise or 1", "        if t[i] is lower case, let msk be msk bitwise or 2", "        if t[i] is digit, let msk be msk bitwise or 4", "    end of the block", "    return mks is 7", "end of the block", "define the main function", "    declare integer t", "    declare string s", "    read t", "    for i = 0 to t exclusive", "        read s", "        if result of run ok(s) is true", "            print s and newline", "            end current loop iteration", "        end of the block", "        declare boolean fnd = false", "        for i = 0 to integer casted size of s exclusive", "            deeclare string t = s", "            let t[i] be '1'", "            if result of run ok(t) is true", "                print t, newline", "                let fnd be true", "                end loop", "            end of the block", "            let t[i] be 'a'", "            if result of run ok(t) is true", "                print t, newline", "                let fnd be true", "                end loop", "            end of the block", "            let t[i] be 'A'", "            if result of run ok(t) is true", "                print t, newline", "                let fnd be true", "                end loop", "            end of the block", "        end of the block", "        if fnd is true, end loop iteration", "        if s[2] is upper case", "            let s[0] be 'a'", "            let s[1] be '1'", "            print s, newline", "            end loop iteration", "        end of the block", "        if s[2] is lower case", "            let s[0] be 'A'", "            let s[1] be '1'", "            print s, newline", "            end loop iteration", "        end of the block", "        if s[2] is digit", "            let s[0] be 'a'", "            let s[1] be 'A'", "            print s, newline", "            end loop iteration", "        end of the block", "    end of the block", "end of the block"], "code_lines": ["bool ok(string t) {", "    int msk = 0;", "    for (int i = 0; i < int(t.size()); ++i) {", "        if (isupper(t[i])) msk |= 1;", "        if (islower(t[i])) msk |= 2;", "        if (isdigit(t[i])) msk |= 4;", "    }", "    return msk == 7;", "}", "int main() {", "    int t;", "    string s;", "    cin >> t;", "    for (int i = 0; i < t; ++i) {", "        cin >> s;", "        if (ok(s)) {", "            cout << s << endl;", "            continue;", "        }", "        bool fnd = false;", "        for (int i = 0; i < int(s.size()); ++i) {", "            string t = s;", "            t[i] = '1';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "            t[i] = 'a';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "            t[i] = 'A';", "            if (ok(t)) {", "                cout << t << endl;", "                fnd = true;", "                break;", "            }", "        }", "        if (fnd) continue;", "        if (isupper(s[2])) {", "            s[0] = 'a';", "            s[1] = '1';", "            cout << s << endl;", "            continue;", "        }", "        if (islower(s[2])) {", "            s[0] = 'A';", "            s[1] = '1';", "            cout << s << endl;", "            continue;", "        }", "        if (isdigit(s[2])) {", "            s[0] = 'a';", "            s[1] = 'A';", "            cout << s << endl;", "            continue;", "        }", "    }", "}"], "testcases": [[["2", "abcDCE", "htQw27"], ["1bcDCE", "htQw27"]], [["3", "afd", "142", "TRE"], ["A1d", "aA2", "a1E"]], [["4", "YtG3", "33Yo", "123n", "m23m"], ["YtG3", "33Yo", "A23n", "A23m"]], [["6", "11b", "4bh", "Beh", "TuY", "1YJ", "P28"], ["A1b", "4Ah", "B1h", "1uY", "1aJ", "Pa8"]], [["1", "aAbAcDeF"], ["1AbAcDeF"]], [["1", "000"], ["aA0"]], [["1", "a00"], ["aA0"]], [["1", "M62H"], ["a62H"]], [["1", "NV641"], ["aV641"]], [["1", "825"], ["aA5"]], [["1", "A00"], ["Aa0"]], [["1", "Gfxqp2"], ["Gfxqp2"]], [["1", "oypS"], ["1ypS"]], [["1", "R0FYRZ"], ["a0FYRZ"]], [["1", "11g9"], ["A1g9"]], [["1", "0a0"], ["Aa0"]], [["1", "WK7S"], ["aK7S"]], [["1", "0aa"], ["0Aa"]]]}, {"problem_id": "77A", "pseudocode_lines": ["create map of strings to integers M", "create 2d array of booleans like with size 7 by 7", "declare strings s1, s2 and temp", "create integer n and integer array g with size 3", "create an array of integers team with size 3", "create an array of integers heros with size 7", "create integer b1 = INT_MAX and b2= -1", "void function back_track with int argument a", "    declare integers i and j", "    if a is equal to 7", "        declare an array of integers count with elements 0, 0, 0", "        create ints mx = - and mn = INT_MAX", "        for i = 0 to 7 exclusive increment count[heros[i]]", "        if count[0], count[1] or count[2] = 0, return", "        for i from 0 to 7 exclusive", "            declare integer temp = g[heros[i]] / count[heros[i]]", "            change mx to max of mx and temp", "            change mn to min of mn and temp", "        end of the block", "        if mx - mn is greater than b1, return", "        create int likeNum = 0", "        loop i from 0 to 7 exclusive", "            loop j from 0 to 7 exclusive", "                if heros[i] = heros[j] and like[i][j] != 0, increment likeNum by one", "        if mx - mn < b1 or mx - mn = b1and likeNum > b2", "            set b1 to mx - mn", "            set b2 to likeNum", "        end of the block", "        return", "    end of the block", "    loop i from 0 to 3 exclusive", "        change heros[a] to i", "        call back_track(a + 1)", "    end of the block", "end of the block", "define the main function", "    assign 0 to M[\"Anka\"]", "    assign 1 to M[\"Chapay\"]", "    assign 2 to M[\"Cleo\"]", "    assign 3 to M[\"Troll\"]", "    assign 4 to M[\"Dracul\"]", "    assign 5 to M[\"Snowy\"]", "    assign 6 to M[\"Hexadecimal\"]", "    loop i from 0 to 7 exclusive", "        loop j from 0 to 7 exclusive, change like[i][j] to false", "    read n", "    while n != 0, decrement it and continue the loop", "        read input to s1, temp and s2", "        set value of like[M[s1]][M[s2]] to true", "    end of the block", "    read g[0], g[1] and g[2]", "    call back_track(0)", "    print b1, ' ' and b2", "    return to indicate successful execution", "end of the block"], "code_lines": ["map<string, int> M;", "bool like[7][7];", "string s1, s2, temp;", "int n, g[3];", "int team[3];", "int heros[7];", "int b1 = INT_MAX, b2 = -1;", "void back_track(int a) {", "    int i, j;", "    if (a == 7) {", "        int count[3] = {0, 0, 0};", "        int mx = -1, mn = INT_MAX;", "        for (i = 0; i < 7; i++) count[heros[i]]++;", "        if (count[0] == 0 || count[1] == 0 || count[2] == 0) return;", "        for (i = 0; i < 7; i++) {", "            int temp = g[heros[i]] / count[heros[i]];", "            mx = max(mx, temp);", "            mn = min(mn, temp);", "        }", "        if (mx - mn > b1) return;", "        int likeNum = 0;", "        for (i = 0; i < 7; i++)", "            for (j = 0; j < 7; j++)", "                if (heros[i] == heros[j] && like[i][j]) likeNum++;", "        if ((mx - mn) < b1 || (mx - mn) == b1 && likeNum > b2) {", "            b1 = mx - mn;", "            b2 = likeNum;", "        }", "        return;", "    }", "    for (i = 0; i < 3; i++) {", "        heros[a] = i;", "        back_track(a + 1);", "    }", "}", "int main() {", "    M[\"Anka\"] = 0;", "    M[\"Chapay\"] = 1;", "    M[\"Cleo\"] = 2;", "    M[\"Troll\"] = 3;", "    M[\"Dracul\"] = 4;", "    M[\"Snowy\"] = 5;", "    M[\"Hexadecimal\"] = 6;", "    for (int i = 0; i < 7; i++)", "        for (int j = 0; j < 7; j++) like[i][j] = false;", "    cin >> n;", "    while (n--) {", "        cin >> s1 >> temp >> s2;", "        like[M[s1]][M[s2]] = true;", "    }", "    cin >> g[0] >> g[1] >> g[2];", "    back_track(0);", "    cout << b1 << ' ' << b2 << endl;", "    return 0;", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "77A", "pseudocode_lines": ["N=2002", "mp=map from string to long long", "likes=map from pair of long long, long long to long long", "define the main function", "    n=7, sz=0, m, a, b, c = long long", "    read m", "    while decremented value of m not equal 0", "        l,r=string", "        read l,r,r", "        if mp[l] is 0 increment sz, mp[l] = sz", "        if mp[r] is 0 increment sz, mp[r] = sz", "        likes[make_pair(mp[l], mp[r])] = l", "    end of the block", "    read a,b,c", "    pt=2187, minimal=a+b+c, ml=long long", "    for i=0 to pt excluisve", "        t=array of 3 vector of long long", "        k=i, m1,m2,m3=long long, lks=0", "        for i=1 to n inclusive", "            add i at end of t[k modulo 3]", "            divide k by 3", "        end of the block", "        it size of t[0] and size of t[1] and size of t[2]", "            m1=a/size of t[0]", "            m2=b/size of t[1]", "            m3=c/size of t[2]", "            m1=max(m1, max(m2,m3))-min(m1, min(m2,m3))", "            for i=0 to 3 exclusive", "                for j=0 to size of t[i] exclusive", "                    for k=0 to size of t[i] exclusive add likes[make_pair(t[i][j], t[i][k])] to lks", "            if minimal>m1", "                minimal=m1", "                ml=lks", "            else if minimal is m1", "                ml=max(ml,lks)", "        end of the block", "    end of the block", "    print minimal, space, ml", "end of the block"], "code_lines": ["const long long N = 2002;", "map<string, long long> mp;", "map<pair<long long, long long>, long long> likes;", "int main() {", "    long long n = 7, m, sz = 0, a, b, c;", "    cin >> m;", "    while (m--) {", "        string l, r;", "        cin >> l >> r >> r;", "        if (mp[l] == 0) mp[l] = ++sz;", "        if (mp[r] == 0) mp[r] = ++sz;", "        likes[make_pair(mp[l], mp[r])] = 1;", "    }", "    cin >> a >> b >> c;", "    long long pt = 2187, minimal = a + b + c, ml;", "    for (long long i = 0; i < pt; i++) {", "        vector<long long> t[3];", "        long long k = i, m1, m2, m3, lks = 0;", "        for (long long i = 1; i <= n; i++) {", "            t[k % 3].push_back(i);", "            k /= 3;", "        }", "        if (t[0].size() && t[1].size() && t[2].size()) {", "            m1 = a / t[0].size();", "            m2 = b / t[1].size();", "            m3 = c / t[2].size();", "            m1 = max(m1, max(m2, m3)) - min(m1, min(m2, m3));", "            for (long long i = 0; i < 3; i++)", "                for (long long j = 0; j < t[i].size(); j++)", "                    for (long long k = 0; k < t[i].size(); k++) lks += likes[make_pair(t[i][j], t[i][k])];", "            if (minimal > m1) {", "                minimal = m1;", "                ml = lks;", "            } else if (minimal == m1)", "                ml = max(ml, lks);", "        }", "    }", "    cout << minimal << \" \" << ml << endl;", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "77A", "pseudocode_lines": ["create integer vector array vec with size 3", "create map like from string to integer", "create integers diff, ans, a, b, c, create 2d integer array mat with size 10 by 10", "declare cal", "    create integers sum, i, j, k, with sum = 0", "    for i = 0 to 3 exclusive", "        for j = 0 to integer casted size of vec[i]", "            for k = 0 to integer casted size of vec[i] exclusive, increment sum by mat[vec[i][j]][vec[i][k]]", "    end of the block", "    return sum from function", "end of the block", "declare count with integer now as argument, returning void", "    if now is 7", "        if size of vec[0] and size of vec[1] and size of vec[2]", "            create integer array x with x = { a / size of vec[0], b / size of vec[1], c / size of vec[2] }", "            sort elements from x to x + 3", "            if x[2] - x[0] is less than diff", "                set diff to x[2] - x[0]", "                set ans to result of run cal", "            else if x[2] - x[0] is diff", "                set ans to maximum of ans and result of run cal", "        end of the block", "        return from function", "    end of the block", "    for i = 0 to 3 exclusive", "        add element now to end of vec[i]", "        run count with now + 1 as argument", "        remove last element from vec[i]", "    end of the block", "end of the block", "define the main function", "    set like[ \"Anka\" ] to 0", "    set like[ \"Chapay\" ] to 1", "    set like[ \"Cleo\" ] to 2", "    set like[ \"Troll\" ] to 3", "    set like[ \"Dracul\" ] to 4", "    set like[ \"Snowy\" ] to 5", "    set like[ \"Hexadecimal\" ] to 6", "    create integers n, i", "    create strings name1, str, name2", "    while read n is true", "        set diff to ( 1 bitshift left 31 ) - 1", "        for i = 0 to 3 exclusive, remove all elements from vec[i]", "        set bytes from mat to size of mat to value 0", "        for i = 0 to n exclusive", "            read name1 read str read name2", "            increment mat[like[name1]][like[name2]]", "        end of the block", "        read a read b read c", "        run count with 0 as argument", "        print diff print \" \" print ans print newline", "    end of the block", "end of the block"], "code_lines": ["vector<int> vec[3];", "map<string, int> like;", "int diff, mat[10][10], ans, a, b, c;", "int cal() {", "    int sum = 0, i, j, k;", "    for (i = 0; i < 3; i++) {", "        for (j = 0; j < (int)vec[i].size(); j++)", "            for (k = 0; k < (int)vec[i].size(); k++) sum += mat[vec[i][j]][vec[i][k]];", "    }", "    return sum;", "}", "void count(int now) {", "    if (now == 7) {", "        if (vec[0].size() && vec[1].size() && vec[2].size()) {", "            int x[] = {a / vec[0].size(), b / vec[1].size(), c / vec[2].size()};", "            sort(x, x + 3);", "            if (x[2] - x[0] < diff) {", "                diff = x[2] - x[0];", "                ans = cal();", "            } else if (x[2] - x[0] == diff)", "                ans = max(ans, cal());", "        }", "        return;", "    }", "    for (int i = 0; i < 3; i++) {", "        vec[i].push_back(now);", "        count(now + 1);", "        vec[i].pop_back();", "    }", "}", "int main() {", "    like[\"Anka\"] = 0;", "    like[\"Chapay\"] = 1;", "    like[\"Cleo\"] = 2;", "    like[\"Troll\"] = 3;", "    like[\"Dracul\"] = 4;", "    like[\"Snowy\"] = 5;", "    like[\"Hexadecimal\"] = 6;", "    int n, i;", "    string name1, str, name2;", "    while (cin >> n) {", "        diff = (1 << 31) - 1;", "        for (i = 0; i < 3; i++) vec[i].clear();", "        memset(mat, 0, sizeof(mat));", "        for (i = 0; i < n; i++) {", "            cin >> name1 >> str >> name2;", "            mat[like[name1]][like[name2]]++;", "        }", "        cin >> a >> b >> c;", "        count(0);", "        cout << diff << \" \" << ans << endl;", "    }", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "77A", "pseudocode_lines": ["create integers b1, b2, b3, emm1, emm2 and integer array lk of size 10 within an array of size 10", "create integer array a of size 8", "create string key-type integer map m", "declare js taking in integers x, y, and z and returning integer", "    set x to b1 / x", "    set y to b2 / y", "    set z to b3 / z", "    set emm1 = the max of abs(x - y), max(abs(y - z), abs(x - z)) and return emm1", "end of the block", "declare haogan taking in integers x, y, and z and returning integer", "    create integer ss = 0", "    for i = 1 to x inclusive", "        for j = 1 to x inclusive", "            if lk[a[i][a[j]] is truthy, increment ss", "    for i = x + 1 to x + y inclusive", "        for j = x + 1 to x + y inclusive", "            if lk[a[i]][a[j]] is truthy, increment ss", "    for i = x + y + 1 to 7 inclusive", "        for j = x + y + 1 to 7 inclusive", "            if lk[a[i]][a[j]] is truthy, increment ss", "    set emm2 to ss and return emm2", "end of the block", "define the main function", "    set m[\"Anka\"] to 1", "    set m[\"Chapay\"] to 2", "    set m[\"Cleo\"] to 3", "    set m[\"Troll\"] to 4", "    set m[\"Dracul\"] to 5", "    set m[\"Snowy\"] to 6", "    set m[\"Hexadecimal\"] to 7", "    create integer n", "    read n", "    while n-- is truthy", "        create strings s1, s, and s2", "        read s1, s, and s2", "        set lk[m[s1]][m[s2]] to 1", "    end of the block", "    create integers ans1 = 1e9 and ans2 = -1e9", "    read b1, b2, and b3", "    if b1 is less than b2, swap the values of b1 and b2", "    if b2 is less than b3, swap the values of b2 and b3", "    if b1 is less than b2, swap the values of b1 and b2", "    for i = 1 to 7 inclusive, set a[i] to i", "    do", "        if the return value of js(4, 2, 1) is equal to ans1 and the return value of haogan(4, 2, 1) is greater than ans2, set ans2 to emm2", "        if emm1 is less than ans1", "            set ans1 to emm1", "            set ans2 to the return value of haogan(4, 2, 1)", "        end of the block", "        if the return value of js(3, 3, 1) is equal to ans1 and the return value of haogan(3, 3, 1) is greater than ans2, set ans2 to emm2", "        if emm1 is less than ans1", "            set ans1 to emm1", "            set ans2 to the return value of haogan(3, 3, 1)", "        end of the block", "        if the return value of js(3, 2, 2) is equal to ans1 and the return value of haogan(3, 2, 2) is greater than ans2, set ans2 to emm2", "        if emm1 is less than ans1", "            set ans1 to emm1", "            set ans2 to the return value of haogan(3, 2, 2)", "        end of the block", "        if the return value of js(5, 1, 1) is equal to ans1 and the return value of haogan(5, 1, 1) is greater than ans2, set ans2 to emm2", "        if emm1 is less than ans1", "            set ans1 to emm1", "            set ans2 to haogan(5, 1, 1)", "        end of the block", "    while the return value of next_permutation(a + 1, a + 7 + 1) is truthy", "    print ans1, ' ', and ans2", "end of the block"], "code_lines": ["int b1, b2, b3, emm1, emm2, lk[10][10];", "int a[8];", "map<string, int> m;", "int js(int x, int y, int z) {", "    x = b1 / x;", "    y = b2 / y;", "    z = b3 / z;", "    return emm1 = max(abs(x - y), max(abs(y - z), abs(x - z)));", "}", "int haogan(int x, int y, int z) {", "    int ss = 0;", "    for (int i = 1; i <= x; i++)", "        for (int j = 1; j <= x; j++)", "            if (lk[a[i]][a[j]]) ss++;", "    for (int i = x + 1; i <= x + y; i++)", "        for (int j = x + 1; j <= x + y; j++)", "            if (lk[a[i]][a[j]]) ss++;", "    for (int i = x + y + 1; i <= 7; i++)", "        for (int j = x + y + 1; j <= 7; j++)", "            if (lk[a[i]][a[j]]) ss++;", "    return emm2 = ss;", "}", "int main() {", "    m[\"Anka\"] = 1;", "    m[\"Chapay\"] = 2;", "    m[\"Cleo\"] = 3;", "    m[\"Troll\"] = 4;", "    m[\"Dracul\"] = 5;", "    m[\"Snowy\"] = 6;", "    m[\"Hexadecimal\"] = 7;", "    int n;", "    cin >> n;", "    while (n--) {", "        string s1, s, s2;", "        cin >> s1 >> s >> s2;", "        lk[m[s1]][m[s2]] = 1;", "    }", "    int ans1 = 1e9, ans2 = -1e9;", "    cin >> b1 >> b2 >> b3;", "    if (b1 < b2) swap(b1, b2);", "    if (b2 < b3) swap(b2, b3);", "    if (b1 < b2) swap(b1, b2);", "    for (int i = 1; i <= 7; i++) a[i] = i;", "    do {", "        if ((js(4, 2, 1) == ans1) && (haogan(4, 2, 1) > ans2)) { ans2 = emm2; }", "        if (emm1 < ans1) {", "            ans1 = emm1;", "            ans2 = haogan(4, 2, 1);", "        }", "        if ((js(3, 3, 1) == ans1) && (haogan(3, 3, 1) > ans2)) { ans2 = emm2; }", "        if (emm1 < ans1) {", "            ans1 = emm1;", "            ans2 = haogan(3, 3, 1);", "        }", "        if ((js(3, 2, 2) == ans1) && (haogan(3, 2, 2) > ans2)) { ans2 = emm2; }", "        if (emm1 < ans1) {", "            ans1 = emm1;", "            ans2 = haogan(3, 2, 2);", "        }", "        if ((js(5, 1, 1) == ans1) && (haogan(5, 1, 1) > ans2)) { ans2 = emm2; }", "        if (emm1 < ans1) {", "            ans1 = emm1;", "            ans2 = haogan(5, 1, 1);", "        }", "    } while (next_permutation(a + 1, a + 7 + 1));", "    cout << ans1 << ' ' << ans2 << endl;", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "77A", "pseudocode_lines": ["vec = int vector array of size 3", "like = string and int map", "diff, ans, a, b, c = int and mat = two dimensional int array of sizes 10 and 10", "in function cal returning an int", "    sum, i, j, k = int with sum = 0", "    for i = 0 to 3", "        for j = 0 to size of vec[i]", "            for k = 0 to size of vec[i] increment sum by mat[vec[i][j]][vec[i][k]]", "    end of the block", "    return sum", "end of the block", "in function count taking an int now", "    if now is 7", "        if size of vec[0] and size of vec[1] and size of vec[2] are all not 0", "            x = int array with the values a / size of vec[0], b / size of vec[1] and c / size of vec[2]", "            sort x", "            if x[2] - x[0] is less than diff", "                set diff to x[2] - x[0]", "                set ans to cal", "            else if x[2] - x[0] is diff", "                set ans to max of ans and cal", "        end of the block", "        return", "    end of the block", "    for i = 0 to 3", "        append now to vec[i]", "        call count of now + 1", "        remove last value of vec[i]", "    end of the block", "end of the block", "define the main function", "    set like[\"Anka\"] to 0", "    set like[\"Chapay\"] to 1", "    set like[\"Cleo\"] to 2", "    set like[\"Troll\"] to 3", "    set like[\"Dracul\"] to 4", "    set like[\"Snowy\"] to 5", "    set like[\"Hexadecimal\"] to 6", "    n, i = int", "    name1, str, name2 = string", "    loop while reading n", "        set diff to (1 bitshift right by 31) - 1", "        for i = 0 to 3 clear vec[i]", "        set all values of mat to 0", "        for i = 0 to n", "            read name1 then str then name2", "            increment mat[like[name1]][like[name2]]", "        end of the block", "        read a then b then c", "        call count of 0", "        print diff and ans", "    end of the block", "end of the block"], "code_lines": ["vector<int> vec[3];", "map<string, int> like;", "int diff, mat[10][10], ans, a, b, c;", "int cal() {", "    int sum = 0, i, j, k;", "    for (i = 0; i < 3; i++) {", "        for (j = 0; j < vec[i].size(); j++)", "            for (k = 0; k < vec[i].size(); k++) sum += mat[vec[i][j]][vec[i][k]];", "    }", "    return sum;", "}", "void count(int now) {", "    if (now == 7) {", "        if (vec[0].size() && vec[1].size() && vec[2].size()) {", "            int x[] = {a / vec[0].size(), b / vec[1].size(), c / vec[2].size()};", "            sort(x, x + 3);", "            if (x[2] - x[0] < diff) {", "                diff = x[2] - x[0];", "                ans = cal();", "            } else if (x[2] - x[0] == diff)", "                ans = max(ans, cal());", "        }", "        return;", "    }", "    for (int i = 0; i < 3; i++) {", "        vec[i].push_back(now);", "        count(now + 1);", "        vec[i].pop_back();", "    }", "}", "int main() {", "    like[\"Anka\"] = 0;", "    like[\"Chapay\"] = 1;", "    like[\"Cleo\"] = 2;", "    like[\"Troll\"] = 3;", "    like[\"Dracul\"] = 4;", "    like[\"Snowy\"] = 5;", "    like[\"Hexadecimal\"] = 6;", "    int n, i;", "    string name1, str, name2;", "    while (cin >> n) {", "        diff = (1 << 31) - 1;", "        for (i = 0; i < 3; i++) vec[i].clear();", "        memset(mat, 0, sizeof(mat));", "        for (i = 0; i < n; i++) {", "            cin >> name1 >> str >> name2;", "            mat[like[name1]][like[name2]]++;", "        }", "        cin >> a >> b >> c;", "        count(0);", "        cout << diff << \" \" << ans << endl;", "    }", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "77A", "pseudocode_lines": ["declare long longs ml = 0 and md = 10e10", "create vector of ints team with 7 elements filled with 0", "create map of string to int called hashi", "create map of int/int pairs to bool called likes", "create vector of long long called xp with 3 elements", "tri is a void function with int argument i", "    if i is equal to 7", "        create long longs mie = 10e10 and mae and lik = 0", "        create bool can = true", "        for integer j = 0 to 3 exclusive", "            create long long co = 0", "            loop k from 0 to 7 exclusive", "                if team[k] is equal to j", "                    increment co", "                    for l = 0 to 7 exclusive", "                        if team[l] = j and likes[pair<int, int>(k, l)] is true, increment lik by one", "                    end of the block", "                end of the block", "            end of the block", "            if co is equal to 0", "                assign false to can", "                break", "            end of the block", "            change mie to min of mie and xp[j] / co", "            change mae to max of mae and xp[j] / co", "        end of the block", "        if can is true", "            create long long dif = mae - mie", "            if dif = md", "                set ml to max of lik and ml", "            else if dif < md", "                assign dif to md", "                assign lik to ml", "            end of the block", "        end of the block", "    else", "        for integer j = 0 to 3 exclusive", "            set team[i] to j", "            call tri(i + 1)", "        end of the block", "    end of the block", "    return", "end of the block", "define the main function", "    declare int variable n", "    read input to n", "    assign 0 to hashi[\"Trolong long\"]", "    assign 1 to hashi[\"Dracul\"]", "    assign 2 to hashi[\"Anka\"]", "    assign 3 to hashi[\"Snowy\"]", "    assign 4 to hashi[\"Hexadecimal\"]", "    assign 5 to hashi[\"Chapay\"]", "    assign 6 to hashi[\"Cleo\"]", "    loop, decrementing n, while it is not 0", "        create strings p and q", "        read input to p, q and q", "        set likes[pair<int, int>(hashi[p], hashi[q])] to true", "    end of the block", "    loop i from 0 to 3 exclusive, read xp[i]", "    call tri(0)", "    print md, \" \", ml and \"\\n\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long md = 10e10, ml = 0;", "vector<int> team(7, 0);", "map<string, int> hashi;", "map<pair<int, int>, bool> likes;", "vector<long long> xp(3);", "void tri(int i) {", "    if (i == 7) {", "        long long mie = 10e10, mae = 0, lik = 0;", "        bool can = true;", "        for (int j = 0; j < 3; j++) {", "            long long co = 0;", "            for (int k = 0; k < 7; k++) {", "                if (team[k] == j) {", "                    co++;", "                    for (int l = 0; l < 7; l++) {", "                        if (team[l] == j && likes[pair<int, int>(k, l)]) { lik++; }", "                    }", "                }", "            }", "            if (co == 0) {", "                can = false;", "                break;", "            }", "            mie = min(mie, xp[j] / co);", "            mae = max(mae, xp[j] / co);", "        }", "        if (can) {", "            long long dif = mae - mie;", "            if (dif == md)", "                ml = max(lik, ml);", "            else if (dif < md) {", "                md = dif;", "                ml = lik;", "            }", "        }", "    } else {", "        for (int j = 0; j < 3; j++) {", "            team[i] = j;", "            tri(i + 1);", "        }", "    }", "    return;", "}", "int main() {", "    int n;", "    cin >> n;", "    hashi[\"Trolong long\"] = 0;", "    hashi[\"Dracul\"] = 1;", "    hashi[\"Anka\"] = 2;", "    hashi[\"Snowy\"] = 3;", "    hashi[\"Hexadecimal\"] = 4;", "    hashi[\"Chapay\"] = 5;", "    hashi[\"Cleo\"] = 6;", "    while (n--) {", "        string p, q;", "        cin >> p >> q >> q;", "        likes[pair<int, int>(hashi[p], hashi[q])] = true;", "    }", "    for (int i = 0; i < 3; i++) cin >> xp[i];", "    tri(0);", "    cout << md << \" \" << ml << \"\\n\";", "    return 0;", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "77A", "pseudocode_lines": ["let mat be a logical matrix of size 7x7", "in int function calc which takes string s", "    let r = 0 = integer", "    for i = 0 to 7 exlusive", "        for j = 0 to 7 exclusive", "            if s at i is same as s at j and mat at i and j is not 0 then increment r", "        end of the block", "    end of the block", "    return r", "end of the block", "define the main function", "    let n, ans, temp, lans, ltemp be int with ans = temp = lans = ltemp = INT_MAX", "    read n", "    let arr, t be long long arrays of size 3 both with all 0", "    for i = 0 to 7 exclusive", "        for j = 0 to 7 exclusive, set mat[i][j] to false", "    let hero be a map form string to int", "    set hero at \"Anka\" to 0", "    set hero at \"Chapay\" to 1", "    set hero[\"Cleo\"] = 2", "    set hero[\"Dracul\"] to 3", "    set hero[\"Dracul\"] tp 4", "    hero[\"Snowy\"] = 5", "    set hero at Hexadecimal = 6", "    let x, y, z, q be strings", "    for i = 0 to n exclusive", "        read x, y, z", "        set mat[hero[x]][hero[z]] to true", "    end of the block", "    read arr at 0, arra at 1, arr at 2", "    sort the first 3 elements of arr", "    let h be a set of strings", "    let it be a set string iterator", "    set t at 2 = arr[2] / 5", "    t[1] = arr[1]", "    set t at 0 to arr[0]", "    sort the first 3 elements of t", "    set temp to t[2] - t[0]", "    if temp is less than ans", "        set ans to temp", "        call insert on h with arg \"aaaaabc\"", "    end of the block", "    set t at 2 = arr[2]/4", "    set t at 1 = arr[1]/2", "    set t at 0 to arr at 0", "    sort the first three elements of arr", "    set temp = t[2] - t[0]", "    if temp is less than ans", "        set ans to temp", "        clear h", "        insert \"aaaabbc\" in h", "    else if temp is same as ans", "        insert \"aaaabbc\" in h", "    end of the block", "    set t[2] = arr[2] / 3", "    set t[1] = arr[1] / 3", "    set t at 0 to arr at 0", "    sort the first 3 elements of t", "    set tempo to t[2] - t[0]", "    if temp < ans", "        set ans to temp", "        clear h", "        insert \"aaaabbc\" in h", "    else if temp is same as ans", "        insert \"aaaabbc\" in h", "    end of the block", "    set t[2] to arr[2] / 3", "    set t[1] to arr[1] / 2", "    set t[0] to arr[0] / 2", "    sort the first 3 elements of t", "    set temp to t[2] - t[0]", "    if temp is less than ans", "        set ans to temp", "        clear h", "        insert \"aaabbcc\" in h", "    if temp = ans", "        insert \"aaabbcc\" in h", "    end of the block", "    while h is not empty", "        set q to be q * the first element of h", "        do loop", "            set ltemp to calc of q", "            if ltemp is greater than lans then set lans to ltemp", "        while the result of calling next_permutation with args start of q and end of q is not 0", "        erase q from h", "    end of the block", "    print ans and space and lans", "    return to indicate successful execution", "end of the block"], "code_lines": ["bool mat[7][7];", "int calc(string s) {", "    int r = 0;", "    for (int i = 0; i < 7; i++) {", "        for (int j = 0; j < 7; j++) {", "            if (s[i] == s[j] && mat[i][j]) r++;", "        }", "    }", "    return r;", "}", "int main() {", "    int n, ans = INT_MAX, temp = INT_MAX, lans = 0, ltemp = 0;", "    cin >> n;", "    long long arr[3], t[3] = {0, 0, 0};", "    for (int i = 0; i < 7; i++)", "        for (int j = 0; j < 7; j++) mat[i][j] = false;", "    map<string, int> hero;", "    hero[\"Anka\"] = 0;", "    hero[\"Chapay\"] = 1;", "    hero[\"Cleo\"] = 2;", "    hero[\"Troll\"] = 3;", "    hero[\"Dracul\"] = 4;", "    hero[\"Snowy\"] = 5;", "    hero[\"Hexadecimal\"] = 6;", "    string x, y, z, q;", "    for (int i = 0; i < n; i++) {", "        cin >> x >> y >> z;", "        mat[hero[x]][hero[z]] = true;", "    }", "    cin >> arr[0] >> arr[1] >> arr[2];", "    sort(arr, arr + 3);", "    set<string> h;", "    set<string>::iterator it;", "    t[2] = arr[2] / 5;", "    t[1] = arr[1];", "    t[0] = arr[0];", "    sort(t, t + 3);", "    temp = t[2] - t[0];", "    if (temp < ans) {", "        ans = temp;", "        h.insert(\"aaaaabc\");", "    }", "    t[2] = arr[2] / 4;", "    t[1] = arr[1] / 2;", "    t[0] = arr[0];", "    sort(t, t + 3);", "    temp = t[2] - t[0];", "    if (temp < ans) {", "        ans = temp;", "        h.clear();", "        h.insert(\"aaaabbc\");", "    } else if (temp == ans) {", "        h.insert(\"aaaabbc\");", "    }", "    t[2] = arr[2] / 3;", "    t[1] = arr[1] / 3;", "    t[0] = arr[0];", "    sort(t, t + 3);", "    temp = t[2] - t[0];", "    if (temp < ans) {", "        ans = temp;", "        h.clear();", "        h.insert(\"aaabbbc\");", "    } else if (temp == ans) {", "        h.insert(\"aaabbbc\");", "    }", "    t[2] = arr[2] / 3;", "    t[1] = arr[1] / 2;", "    t[0] = arr[0] / 2;", "    sort(t, t + 3);", "    temp = t[2] - t[0];", "    if (temp < ans) {", "        ans = temp;", "        h.clear();", "        h.insert(\"aaabbcc\");", "    } else if (temp == ans) {", "        h.insert(\"aaabbcc\");", "    }", "    while (!h.empty()) {", "        q = *(h.begin());", "        do {", "            ltemp = calc(q);", "            if (ltemp > lans) lans = ltemp;", "        } while (next_permutation(q.begin(), q.end()));", "        h.erase(q);", "    }", "    cout << ans << \" \" << lans << endl;", "    return 0;", "}"], "testcases": [[["3", "Troll likes Dracul", "Dracul likes Anka", "Snowy likes Hexadecimal", "210 200 180"], ["30 3"]], [["2", "Anka likes Chapay", "Chapay likes Anka", "10000 50 50"], ["1950 2"]], [["11", "Snowy likes Dracul", "Anka likes Dracul", "Chapay likes Snowy", "Hexadecimal likes Troll", "Anka likes Cleo", "Chapay likes Dracul", "Anka likes Chapay", "Snowy likes Troll", "Anka likes Hexadecimal", "Cleo likes Chapay", "Troll likes Cleo", "100 100 100"], ["17 5"]], [["14", "Chapay likes Cleo", "Cleo likes Anka", "Dracul likes Snowy", "Snowy likes Cleo", "Chapay likes Anka", "Snowy likes Anka", "Chapay likes Troll", "Troll likes Anka", "Anka likes Snowy", "Chapay likes Dracul", "Dracul likes Anka", "Hexadecimal likes Chapay", "Snowy likes Dracul", "Cleo likes Dracul", "15 15 15"], ["2 6"]], [["4", "Anka likes Cleo", "Snowy likes Cleo", "Anka likes Hexadecimal", "Cleo likes Snowy", "1 1 1"], ["0 3"]], [["8", "Snowy likes Anka", "Hexadecimal likes Snowy", "Troll likes Dracul", "Hexadecimal likes Troll", "Snowy likes Troll", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Chapay", "70 70 70"], ["12 5"]], [["0", "100 300 600"], ["50 0"]], [["3", "Chapay likes Hexadecimal", "Anka likes Cleo", "Troll likes Snowy", "15 15000 90"], ["2985 2"]], [["0", "1 1 10000"], ["1999 0"]], [["13", "Cleo likes Hexadecimal", "Cleo likes Snowy", "Hexadecimal likes Anka", "Anka likes Snowy", "Troll likes Snowy", "Chapay likes Hexadecimal", "Hexadecimal likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Anka likes Hexadecimal", "Hexadecimal likes Cleo", "Chapay likes Dracul", "Snowy likes Dracul", "1000000000 2000000000 1000000000"], ["166666666 6"]], [["12", "Cleo likes Hexadecimal", "Chapay likes Anka", "Hexadecimal likes Cleo", "Anka likes Snowy", "Anka likes Cleo", "Dracul likes Snowy", "Anka likes Troll", "Snowy likes Anka", "Cleo likes Anka", "Hexadecimal likes Troll", "Hexadecimal likes Chapay", "Snowy likes Troll", "1000000000 1 2000000000"], ["499999999 7"]], [["0", "2000000000 2000000000 2000000000"], ["333333334 0"]], [["2", "Snowy likes Hexadecimal", "Troll likes Dracul", "2000000000 2000000000 2000000000"], ["333333334 2"]], [["12", "Snowy likes Chapay", "Cleo likes Dracul", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Dracul likes Chapay", "Cleo likes Troll", "Dracul likes Snowy", "Snowy likes Dracul", "Troll likes Chapay", "Dracul likes Anka", "Chapay likes Hexadecimal", "Troll likes Dracul", "436364663 856574374 347564737"], ["111742423 6"]], [["12", "Anka likes Dracul", "Dracul likes Troll", "Cleo likes Troll", "Snowy likes Hexadecimal", "Hexadecimal likes Chapay", "Cleo likes Dracul", "Cleo likes Chapay", "Hexadecimal likes Anka", "Snowy likes Cleo", "Hexadecimal likes Snowy", "Cleo likes Snowy", "Chapay likes Snowy", "584329075 428752235 675234087"], ["77788420 6"]], [["8", "Anka likes Chapay", "Dracul likes Snowy", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Troll", "Hexadecimal likes Troll", "Troll likes Cleo", "Snowy likes Dracul", "325432666 254352394 547360304"], ["55277237 6"]], [["18", "Snowy likes Troll", "Chapay likes Hexadecimal", "Cleo likes Snowy", "Dracul likes Snowy", "Snowy likes Chapay", "Troll likes Cleo", "Snowy likes Anka", "Dracul likes Hexadecimal", "Hexadecimal likes Anka", "Anka likes Hexadecimal", "Anka likes Chapay", "Troll likes Anka", "Anka likes Snowy", "Anka likes Troll", "Snowy likes Cleo", "Hexadecimal likes Troll", "Hexadecimal likes Dracul", "Cleo likes Anka", "20000 1000 20000"], ["5666 8"]], [["6", "Chapay likes Troll", "Troll likes Cleo", "Cleo likes Troll", "Chapay likes Snowy", "Anka likes Snowy", "Troll likes Dracul", "987499608 272739716 133573597"], ["113301305 5"]], [["6", "Anka likes Troll", "Troll likes Chapay", "Troll likes Hexadecimal", "Hexadecimal likes Cleo", "Snowy likes Hexadecimal", "Chapay likes Troll", "740076959 230477703 987799796"], ["98788895 5"]], [["17", "Cleo likes Dracul", "Troll likes Cleo", "Anka likes Chapay", "Anka likes Troll", "Chapay likes Snowy", "Troll likes Snowy", "Chapay likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Snowy", "Troll likes Hexadecimal", "Hexadecimal likes Anka", "Cleo likes Snowy", "Hexadecimal likes Dracul", "Snowy likes Chapay", "Snowy likes Hexadecimal", "Snowy likes Dracul", "Dracul likes Troll", "112909524 619275170 403563648"], ["88872300 9"]], [["1", "Hexadecimal likes Chapay", "848189141 631955593 79523012"], ["203206701 1"]], [["18", "Anka likes Troll", "Dracul likes Chapay", "Hexadecimal likes Dracul", "Chapay likes Dracul", "Anka likes Hexadecimal", "Snowy likes Cleo", "Dracul likes Anka", "Snowy likes Anka", "Snowy likes Hexadecimal", "Dracul likes Troll", "Dracul likes Snowy", "Hexadecimal likes Anka", "Chapay likes Hexadecimal", "Snowy likes Dracul", "Cleo likes Snowy", "Chapay likes Cleo", "Anka likes Dracul", "Troll likes Anka", "838821770 712931449 361810998"], ["124167182 8"]], [["18", "Hexadecimal likes Chapay", "Troll likes Dracul", "Troll likes Snowy", "Cleo likes Dracul", "Chapay likes Snowy", "Dracul likes Chapay", "Cleo likes Snowy", "Dracul likes Hexadecimal", "Troll likes Anka", "Anka likes Troll", "Hexadecimal likes Dracul", "Chapay likes Hexadecimal", "Cleo likes Chapay", "Anka likes Hexadecimal", "Snowy likes Dracul", "Chapay likes Troll", "Anka likes Snowy", "Dracul likes Cleo", "240256138 922743697 38909902"], ["191776022 10"]], [["0", "477107314 230715335 261545417"], ["43678104 0"]], [["16", "Chapay likes Snowy", "Hexadecimal likes Anka", "Chapay likes Troll", "Dracul likes Cleo", "Troll likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Cleo", "Snowy likes Cleo", "Snowy likes Anka", "Troll likes Chapay", "Snowy likes Hexadecimal", "Troll likes Snowy", "Cleo likes Hexadecimal", "Anka likes Snowy", "Snowy likes Chapay", "Anka likes Dracul", "843382501 58524777 503038818"], ["192994632 8"]], [["5", "Troll likes Chapay", "Anka likes Snowy", "Anka likes Dracul", "Chapay likes Anka", "Snowy likes Troll", "709201888 431802832 597079932"], ["82638550 3"]], [["18", "Cleo likes Snowy", "Snowy likes Hexadecimal", "Cleo likes Hexadecimal", "Troll likes Dracul", "Hexadecimal likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Chapay likes Cleo", "Troll likes Chapay", "Hexadecimal likes Chapay", "Anka likes Snowy", "Troll likes Snowy", "Dracul likes Snowy", "Dracul likes Chapay", "Chapay likes Troll", "Cleo likes Troll", "Hexadecimal likes Cleo", "Anka likes Chapay", "864225278 509037060 402199775"], ["86975205 9"]], [["12", "Cleo likes Hexadecimal", "Troll likes Cleo", "Anka likes Cleo", "Hexadecimal likes Troll", "Anka likes Snowy", "Hexadecimal likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Dracul likes Cleo", "Cleo likes Troll", "Dracul likes Troll", "Chapay likes Anka", "762445890 377707484 324080158"], ["92108551 6"]], [["21", "Chapay likes Dracul", "Snowy likes Chapay", "Snowy likes Troll", "Cleo likes Chapay", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Anka", "Dracul likes Anka", "Troll likes Snowy", "Snowy likes Cleo", "Chapay likes Hexadecimal", "Cleo likes Anka", "Cleo likes Snowy", "Hexadecimal likes Cleo", "Hexadecimal likes Snowy", "Hexadecimal likes Anka", "Hexadecimal likes Troll", "Anka likes Snowy", "Dracul likes Troll", "Chapay likes Anka", "Snowy likes Hexadecimal", "482557397 502108264 750230216"], ["9775434 8"]], [["6", "Troll likes Chapay", "Hexadecimal likes Snowy", "Cleo likes Dracul", "Cleo likes Anka", "Chapay likes Anka", "Anka likes Chapay", "758376921 432619768 578580897"], ["72980564 5"]], [["5", "Chapay likes Cleo", "Anka likes Hexadecimal", "Anka likes Chapay", "Cleo likes Troll", "Anka likes Cleo", "299076810 225593528 36830738"], ["62861532 3"]], [["13", "Anka likes Cleo", "Cleo likes Troll", "Chapay likes Cleo", "Snowy likes Troll", "Chapay likes Anka", "Chapay likes Snowy", "Snowy likes Chapay", "Anka likes Snowy", "Snowy likes Dracul", "Cleo likes Hexadecimal", "Dracul likes Chapay", "Anka likes Hexadecimal", "Snowy likes Cleo", "554338888 280967932 682619964"], ["96188303 7"]], [["17", "Hexadecimal likes Chapay", "Chapay likes Snowy", "Chapay likes Troll", "Anka likes Hexadecimal", "Cleo likes Troll", "Snowy likes Cleo", "Cleo likes Anka", "Cleo likes Hexadecimal", "Anka likes Snowy", "Chapay likes Hexadecimal", "Anka likes Cleo", "Dracul likes Snowy", "Chapay likes Anka", "Troll likes Hexadecimal", "Troll likes Anka", "Anka likes Dracul", "Hexadecimal likes Anka", "828886798 548024213 166661324"], ["107350782 9"]], [["2", "Troll likes Cleo", "Anka likes Cleo", "14344913 559182022 405430772"], ["172049094 2"]], [["22", "Cleo likes Snowy", "Cleo likes Troll", "Chapay likes Dracul", "Snowy likes Troll", "Dracul likes Chapay", "Dracul likes Snowy", "Chapay likes Cleo", "Snowy likes Chapay", "Dracul likes Troll", "Anka likes Hexadecimal", "Snowy likes Anka", "Hexadecimal likes Cleo", "Hexadecimal likes Troll", "Dracul likes Anka", "Cleo likes Hexadecimal", "Hexadecimal likes Dracul", "Chapay likes Troll", "Chapay likes Hexadecimal", "Anka likes Snowy", "Troll likes Hexadecimal", "Snowy likes Hexadecimal", "Anka likes Chapay", "458053183 602148195 994999698"], ["102639975 9"]], [["5", "Troll likes Dracul", "Anka likes Chapay", "Cleo likes Anka", "Chapay likes Cleo", "Snowy likes Hexadecimal", "222 400 400"], ["89 5"]], [["0", "2000000000 2000000000 1"], ["666666665 0"]], [["0", "1200000000 1200000000 1200000000"], ["200000000 0"]], [["0", "1 2000000000 2000000000"], ["666666665 0"]]]}, {"problem_id": "963A", "pseudocode_lines": ["create const long long integer mod = 1e9 + 9", "declare mod_pow taking in long long ints x and n and returning long long integer", "    make long long res = 1", "    while n is greater than 0", "        if n & 1 is truthy, set res to res * x % mod", "        set x to x * x % mod", "        move bits of n 1 place to right", "    end of the block", "    return res", "end of the block", "declare extgcd taking in long long ints a, b, &x, and &y and returning long long integer", "    make long long int d = a", "    if b is not 0", "        set d to extgcd(b, a % b, y, x)", "        set y to y - (a / b) * x", "    else do", "        set x to 1", "        set y to 0", "    end of the block", "    return d", "end of the block", "declare mod_inverse taking in long long a and returning long long int", "    create long long ints x, y, and m", "    set m to mod", "    call extgcd(a, m, x, y)", "    return the result of (m + x % m) % m", "end of the block", "define the main function", "    make long long ints n, a, b, k, ans, temp, rec, and q", "    make string s", "    read n, a, b, and k", "    read s", "    set ans to 0", "    for i = 0 to k exclusive", "        set temp to (mod_pow(a, n - i) * mod_pow(b, i)) % mod", "        if s[i] is equal to '+'", "            set ans to (ans + temp) % mod", "        else do", "            set ans to (ans - temp) % mod", "        if ans is less than 0, set ans to ans + mod", "    end of the block", "    if n + 1 is k", "        print ans", "        return to indicate successful execution", "    end of the block", "    set rec to (n + 1) / k", "    set q to mod_pow((mod_inverse(a) * b) % mod, k) % mod", "    if q is equal to 1", "        set ans to (ans * rec) % mod", "    otherwise", "        set ans to ((ans * (mod_pow(q, rec) - 1) % mod) * mod_inverse(q - 1)) % mod", "    display ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const long long mod = 1e9 + 9;", "long long mod_pow(long long x, long long n) {", "    long long res = 1;", "    while (n > 0) {", "        if (n & 1) res = res * x % mod;", "        x = x * x % mod;", "        n >>= 1;", "    }", "    return res;", "}", "long long extgcd(long long a, long long b, long long &x, long long &y) {", "    long long d = a;", "    if (b != 0) {", "        d = extgcd(b, a % b, y, x);", "        y -= (a / b) * x;", "    } else {", "        x = 1;", "        y = 0;", "    }", "    return d;", "}", "long long mod_inverse(long long a) {", "    long long x, y, m;", "    m = mod;", "    extgcd(a, m, x, y);", "    return (m + x % m) % m;", "}", "int main() {", "    long long n, a, b, k, ans, temp, rec, q;", "    string s;", "    cin >> n >> a >> b >> k;", "    cin >> s;", "    ans = 0;", "    for (int i = 0; i < k; i++) {", "        temp = (mod_pow(a, n - i) * mod_pow(b, i)) % mod;", "        if (s[i] == '+')", "            ans = (ans + temp) % mod;", "        else", "            ans = (ans - temp) % mod;", "        if (ans < 0) ans += mod;", "    }", "    if (n + 1 == k) {", "        cout << ans << endl;", "        return 0;", "    }", "    rec = (n + 1) / k;", "    q = mod_pow((mod_inverse(a) * b) % mod, k) % mod;", "    if (q == 1)", "        ans = (ans * rec) % mod;", "    else", "        ans = ((ans * (mod_pow(q, rec) - 1) % mod) * mod_inverse(q - 1)) % mod;", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["declare constant integer N = 2e5 + 10", "declare long long integers n, a, b, k, MOD = 1e9 + 9", "declare fast_power with long longs base, power as arguments, returning long long", "    declare long long result = 1", "    while power is greater than 0", "        if power % 2 is 1, let result be (result * base) % MOD", "        let base be (base * base) % MOD", "        let power be power / 2", "    end of the block", "    return result from function", "end of the block", "define the main function", "    read n, a, b, k", "    declare string s", "    read s", "    declare integer l = (n + 1) / k - 1", "    declare long long integer val = (b * result of run fast_power(a, MOD - 2)) % MOD", "    declare long long integer valp = result of run fast_power(val, k)", "    declare long long integer ans = 0", "    declare long long integer geo", "    if valp is not 1", "        let geo be (result of run fast_power(valp, l + 1) - 1) % MOD + MOD", "        let geo be geo * result of run fast_power((valp - 1) % MOD + MOD, MOD - 2) % MOD", "        let geo be geo % MOD", "    else", "        let geo be l + 1", "    for i = 0 to k exclusive", "        declare long long integer calc = result of run fast_power(b, i) * result of run fast_power(a, n - i) % MOD", "        if s[i] is '-'", "            let ans be (ans - (geo * calc % MOD)) % MOD + MOD", "        else", "            let ans be (ans + (geo * calc % MOD) % MOD)", "        let ans be ans % MOD", "    end of the block", "    print ans and newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 2e5 + 10;", "long long int n, a, b, k, MOD = 1e9 + 9;", "long long fast_power(long long base, long long power) {", "    long long result = 1;", "    while (power > 0) {", "        if (power % 2 == 1) { result = (result * base) % MOD; }", "        base = (base * base) % MOD;", "        power = power / 2;", "    }", "    return result;", "}", "int main() {", "    cin >> n >> a >> b >> k;", "    string s;", "    cin >> s;", "    int l = (n + 1) / k - 1;", "    long long int val = (b * fast_power(a, MOD - 2)) % MOD;", "    long long int valp = fast_power(val, k);", "    long long int ans = 0;", "    long long int geo;", "    if (valp != 1) {", "        geo = (fast_power(valp, l + 1) - 1) % MOD + MOD;", "        geo = geo * fast_power((valp - 1) % MOD + MOD, MOD - 2) % MOD;", "        geo %= MOD;", "    } else", "        geo = l + 1;", "    for (int i = 0; i < k; i++) {", "        long long int calc = fast_power(b, i) * fast_power(a, n - i) % MOD;", "        if (s[i] == '-')", "            ans = (ans - (geo * calc % MOD)) % MOD + MOD;", "        else", "            ans = (ans + (geo * calc % MOD) % MOD);", "        ans %= MOD;", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["declare new long long variable mod with value 1e9+9", "new array of characters s with size 500005", "long long function power with long long arguments a and b", "    create long long variable ret = 1", "    change a to a modulo mod", "    while b is not 0", "        if b & 1 is not 0, change ret to ret * a % mod", "        change a to a squared modulo mod", "        set b to b >> 1", "    end of the block", "    return ret", "end of the block", "define the main function", "    declare long long variables n, a, b and k", "    read n, a, b and k from the user input", "    read input an store it into s", "    read input into s", "    declare new long long called t with value (n + 1) / k", "    declare new long long u = power(b, k) * power(power(a, k), mod - 2) % mod", "    assign (power(u, t) + mod - 1) % mod * power(u - 1 + mod, mod - 2) % mod to t", "    if u = 1, assign (n + 1) / k to t", "    declare long long variable with name ans with value 0", "    for i = 0 to k exclusive incrementing i", "        declare long long variable tmp", "        assign the new value = power(a, n - i) * power(b, i) % mod", "        assign tmp * t % mod to tmp", "        if s[i] = '+'", "            change the value of ans to (ans + tmp) % mod", "        else", "            change ans to ans - tmp + mod", "            change the value of ans to ans modulo mod", "        end of the block", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long mod = 1e9 + 9;", "char s[500005];", "long long power(long long a, long long b) {", "    long long ret = 1;", "    a %= mod;", "    while (b) {", "        if (b & 1) ret = ret * a % mod;", "        a = a * a % mod;", "        b >>= 1;", "    }", "    return ret;", "}", "int main() {", "    long long n, a, b, k;", "    cin >> n >> a >> b >> k;", "    gets(s);", "    gets(s);", "    long long t = (n + 1) / k;", "    long long u = power(b, k) * power(power(a, k), mod - 2) % mod;", "    t = (power(u, t) + mod - 1) % mod * power(u - 1 + mod, mod - 2) % mod;", "    if (u == 1) t = (n + 1) / k;", "    long long ans = 0;", "    for (int i = 0; i < k; ++i) {", "        long long tmp;", "        tmp = power(a, n - i) * power(b, i) % mod;", "        tmp = tmp * t % mod;", "        if (s[i] == '+') {", "            ans = (ans + tmp) % mod;", "        } else {", "            ans = ans - tmp + mod;", "            ans %= mod;", "        }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["create long long integer MOD = 1000000009", "into the function pw which takes two long long integers a and b and returns a long long integer", "    if b is 0 then return 1", "    if b is 1 then return a % MOD", "    if b%2 is true", "        create long long rs= pw(a,b-1)", "        return (rs * a) % MOD", "    end of the block", "    create long long integer rs= pw(a,b/2)", "    return (rs * rs) % MOD", "end of the block", "sm = long long integer vector", "into the function solve which takes a and b", "    if b is 0 then return 0", "    for i=0 to 35 exclusive", "        create long long integer ba = (1LL << i) & b", "        if ba is equal to 0 then continue", "        return sm[i] + solve(a, b - (1LL << i)) * pw(a, (1LL << i))) % MOD", "    end of the block", "end of the block", "define the main function", "    n,a,b,k = long long integers", "    read n,a,b,k", "    s=string", "    read s", "    create long long integers X and Y with values 1", "    for i=o to k exclusive", "        set X = X * b", "        set X = X % MOD", "    end of the block", "    for i=0 to k exclusive", "        set Y = Y * a", "        set Y = Y % MOD", "    end of the block", "    set X = X * pw(Y, MOD - 2)", "    set X = X % MOD", "    add 1 to the end of sm", "    for i=0 to 40 exclusive", "        add sm.back() + sm.back() * pw(X, (1LL << i) to end of sm", "        set sm.back() = sm.back() % MOD", "    end of the block", "    create long long integer st = solve(X, (n + 1) / k)", "    create long long integer ans=0", "    for i=0 to k exclusive", "        create long long integer rs = (pw(b, i) * pw(a, n - i)) % MOD", "        if s[i] is '-' then set rs = rs * -1", "        set rs = rs * st", "        set ans = ans + rs", "        set ans = ans % MOD", "    end of the block", "    if ans is less than 0 then set ans = ans + MOD", "    print ans", "end of the block"], "code_lines": ["long long MOD = 1000000009;", "long long pw(long long a, long long b) {", "    if (b == 0) return 1;", "    if (b == 1) return a % MOD;", "    if (b % 2) {", "        long long rs = pw(a, b - 1);", "        return (rs * a) % MOD;", "    }", "    long long rs = pw(a, b / 2);", "    return (rs * rs) % MOD;", "}", "vector<long long> sm;", "long long solve(long long a, long long b) {", "    if (b == 0) return 0;", "    for (long long i = 0; i < 35; i++) {", "        long long ba = (1LL << i) & b;", "        if (ba == 0) continue;", "        return (sm[i] + solve(a, b - (1LL << i)) * pw(a, (1LL << i))) % MOD;", "    }", "}", "int main() {", "    long long n, a, b, k;", "    cin >> n >> a >> b >> k;", "    string s;", "    cin >> s;", "    long long X = 1, Y = 1;", "    for (long long i = 0; i < k; i++) {", "        X *= b;", "        X %= MOD;", "    }", "    for (long long i = 0; i < k; i++) {", "        Y *= a;", "        Y %= MOD;", "    }", "    X *= pw(Y, MOD - 2);", "    X %= MOD;", "    sm.push_back(1);", "    for (long long i = 0; i < 40; i++) {", "        sm.push_back(sm.back() + sm.back() * pw(X, (1LL << i)));", "        sm.back() %= MOD;", "    }", "    long long st = solve(X, (n + 1) / k);", "    long long ans = 0;", "    for (long long i = 0; i < k; i++) {", "        long long rs = (pw(b, i) * pw(a, n - i)) % MOD;", "        if (s[i] == '-') rs *= -1;", "        rs *= st;", "        ans += rs;", "        ans %= MOD;", "    }", "    if (ans < 0) ans += MOD;", "    cout << ans << endl;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["make long long int mod = 1e9 + 9", "create ints d, x, and y", "declare fastexp taking in long long ints b and p and returning long long integer", "    if p is 0, return 1", "    create long long int ans = fastexp(b, p / 2) % mod", "    if p modulo 2 is truthy", "        return the result of ((1LL * b * ans % mod) * 1LL * ans) % mod", "    else do", "        return the result of (1LL * ans * ans + mod) % mod", "end of the block", "define the main function", "    make long long ints a, n, b, and k", "    create string s", "    make long long integers v1, v2, v3, and sum = 0", "    read n, a, b, and k", "    read s", "    for h = 0 to k exclusive", "        if s[h] equals '+'", "            set v1 to fastexp(a, n - h) % mod", "            set v2 to fastexp(b, h) % mod", "            set v3 to (v1 * v2 + mod) % mod", "            set sum to (sum % mod + v3 % mod + mod) % mod", "        else do", "            set v1 to fastexp(a, n - h)", "            set v2 to return value of fastexp(b, h)", "            set v3 to (v1 * v2 + mod) % mod", "            set sum to (sum % mod - v3 % mod + mod) % mod", "        end of the block", "    end of the block", "    create long long int v1 = (n + 1) / k", "    make long long integer inv_a = fastexp(a, mod - 2) % mod", "    make long long integer vv = ((inv_a % mod) * (b % mod) + mod) % mod", "    let long long integer vl1 = ((fastexp(vv, k) % mod)) % mod", "    if vl1 is 1", "        create long long int ans = ((v1 * sum) + mod) % mod", "        display ans", "        return to indicate successful execution", "    end of the block", "    create long long integer vl4 = fastexp(vl1, vl) % mod", "    set vl4 to (vl4 - 1 + mod) % mod", "    set vl4 to (vl4 * sum + mod) % mod", "    make long long integer vl2 = (((vl1 + mod) % mod) - 1 + mod) % mod", "    create long long integer vl3 = (vl4 * (fastexp(vl2, mod - 2)) + mod) % mod", "    print the result of vl3 % mod", "end of the block"], "code_lines": ["long long int mod = 1e9 + 9;", "int d, x, y;", "long long int fastexp(long long int b, long long int p) {", "    if (p == 0) return 1;", "    long long int ans = fastexp(b, p / 2) % mod;", "    if (p % 2)", "        return ((1LL * b * ans % mod) * 1LL * ans) % mod;", "    else", "        return (1LL * ans * ans + mod) % mod;", "}", "int main() {", "    long long int a, n, b, k;", "    string s;", "    long long int v1, v2, v3, sum = 0;", "    cin >> n >> a >> b >> k;", "    cin >> s;", "    for (int h = 0; h < k; h++) {", "        if (s[h] == '+') {", "            v1 = fastexp(a, n - h) % mod;", "            v2 = fastexp(b, h) % mod;", "            v3 = (v1 * v2 + mod) % mod;", "            sum = (sum % mod + v3 % mod + mod) % mod;", "        } else {", "            v1 = fastexp(a, n - h);", "            v2 = fastexp(b, h);", "            v3 = (v1 * v2 + mod) % mod;", "            sum = (sum % mod - v3 % mod + mod) % mod;", "        }", "    }", "    long long int vl = (n + 1) / k;", "    long long int inv_a = fastexp(a, mod - 2) % mod;", "    long long int vv = ((inv_a % mod) * (b % mod) + mod) % mod;", "    long long int vl1 = ((fastexp(vv, k) % mod)) % mod;", "    if (vl1 == 1) {", "        long long int ans = ((vl * sum) + mod) % mod;", "        cout << ans << endl;", "        return 0;", "    }", "    long long int vl4 = fastexp(vl1, vl) % mod;", "    vl4 = (vl4 - 1 + mod) % mod;", "    vl4 = (vl4 * sum + mod) % mod;", "    long long int vl2 = (((vl1 + mod) % mod) - 1 + mod) % mod;", "    long long int vl3 = (vl4 * (fastexp(vl2, mod - 2)) + mod) % mod;", "    cout << vl3 % mod << endl;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["MAXN = constant integer = 100000", "MOD = constant long long = 1000000009", "in function poww_mod with arguments long long a and long long b that returns long long", "    ans = long long = 1", "    a = a modulo MOD", "    while b is nonzero", "        if b ends in a one in bits, then ans = (a * ans) modulo MOD", "        a = (a * a) modulo MOD", "        b shifted by one bit to the right", "    end of the block", "    return ans modulo MOD", "end of the block", "in function inv with arguments of long long t and long long p that returns a long long", "    t = t modulo p", "    return 1 if t is 1 else return (p - p / t) * (call inv with arguments of p modulo t and p) modulo p", "end of the block", "n = integer = 0, k = integer = 0, a = integer = 0, b = integer = 0", "ans = long long array of size MAX + 5, answer = long long = 0", "s = string", "define the main function", "    read n, a, b, k", "    read s", "    pre = long long = 0", "    while k < 10000 and k < n", "        k = k * 2", "        s = s + s", "    end of the block", "    for i = 0 to k exclusive", "        if s[i] is +", "            ans[i] = pre + (call poww_mod with arguments of a, n - i) * (call poww_mod with arguments of b, i) modulo MOD", "        else", "            ans[i] = pre - (call poww_mod with arguments of a, n - i) * (call poww_mod with arguments of b, i) modulo MOD", "        pre = ans[i]", "    end of the block", "    if n < k", "        if ans[n] < 0, then ans[n] = ans[n] + mod", "        print ans[n]", "    else", "        beishu = integer = n / k", "        save = integer = n - n / k", "        mode = long long =(call poww_mod with arguments of b, k) * (inverse of arguments of (the result of calling poww_mod with arguments of a, k), i) MOD )modulo MOD", "        answer = pre", "        for i = 1 to beishu exclusive", "            pre = (pre * mode) modulo MOD", "            answer = (answer + pre) modulo MOD", "        end of the block", "        for i = n / k * k to n inclusive", "            if s[i modulo k] is +", "                answer = (answer + (call poww_mod with arguments of a, n - i) * (call poww_mod with arguments of b, i)) modulo MOD", "            else", "                answer = (answer - (call poww_mod with arguments of a, n - i) * (call poww_mod with arguments of b, i)) modulo MOD", "        end of the block", "        if answer < 0, then answer = answer + MOD", "        print answer", "    end of the block", "end of the block"], "code_lines": ["const int MAXN = 100000;", "const long long MOD = 1000000009;", "long long poww_mod(long long a, long long b) {", "    long long ans = 1;", "    a = a % MOD;", "    while (b) {", "        if (b & 1) ans = (a * ans) % MOD;", "        a = (a * a) % MOD;", "        b >>= 1;", "    }", "    return ans % MOD;", "}", "long long inv(long long t, long long p) {", "    t = t % p;", "    return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p;", "}", "int n = 0, k = 0, a = 0, b = 0;", "long long ans[MAXN + 5], answer = 0;", "string s;", "int main() {", "    cin >> n >> a >> b >> k;", "    cin >> s;", "    long long pre = 0;", "    while (k < 10000 && k < n) {", "        k = k * 2;", "        s = s + s;", "    }", "    for (int i = 0; i < k; ++i) {", "        if (s[i] == '+')", "            ans[i] = (pre + poww_mod(a, n - i) * poww_mod(b, i)) % MOD;", "        else", "            ans[i] = (pre - poww_mod(a, n - i) * poww_mod(b, i)) % MOD;", "        pre = ans[i];", "    }", "    if (n < k) {", "        if (ans[n] < 0) ans[n] += MOD;", "        cout << ans[n] << endl;", "    } else {", "        int beishu = n / k;", "        int save = n - n / k;", "        long long mode = (poww_mod(b, k) * inv(poww_mod(a, k), MOD)) % MOD;", "        answer = pre;", "        for (int i = 1; i < beishu; ++i) {", "            pre = (pre * mode) % MOD;", "            answer = (answer + pre) % MOD;", "        }", "        for (int i = (n / k) * k; i <= n; ++i) {", "            if (s[i % k] == '+')", "                answer = (answer + poww_mod(a, n - i) * poww_mod(b, i)) % MOD;", "            else", "                answer = (answer - poww_mod(a, n - i) * poww_mod(b, i)) % MOD;", "        }", "        if (answer < 0) answer += MOD;", "        cout << answer << endl;", "    }", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["create a long long integer mod=1e9+9", "into the function qm which takes two long long integers a and b and returns a long long int", "    let ans be long long int with ans=1", "    while b>0 do the following", "        if b&1 then set ans= ans * a % mod", "        set b= b >> 1", "        set a= a*a%mod", "    end of the block", "    return (ans % mod + mod) % mod", "end of the block", "c= character array of size 1000005", "define the main function", "    n,a,b,k= long long ints", "    read n,a,b,k", "    read c", "    create long long int ans=0", "    if n+1 <= k", "        for i=0 to n inclusive", "            if c[i] = -", "                then set ans = ans - qm(a, n - i) * qm(b, i)", "                set ans = (ans % mod + mod) % mod", "            else do the following", "                set ans = ans + qm(a, n - i) * qm(b, i)", "                set ans = (ans % mod + mod) % mod", "            end of the block", "        end of the block", "        set ans = (ans % mod + mod) % mod", "        print ans", "    else do the following", "        create long long t= (n+1) / k", "        creaye long long integer g = (n+1) %k", "        let x=0 be a long long integer", "        if g is equal to 0", "            for i=0 to k exclusive", "                if c[i] is equal to -", "                    then set x = x - qm(a, n - i) * qm(b, i)", "                    set x = (x % mod + mod) % mod", "                else do the following", "                    set x = x + qm(a, n - i) * qm(b, i)", "                    assign (x % mod + mod) % mod to x", "                end of the block", "            end of the block", "            if qm(a, k) = qm(b, k)", "                then set ans = t*t", "                assign (ans % mod + mod) % mod to ans", "                print ans", "                return to indicate successful execution", "            end of the block", "            create long long integer jj = qm(a, t * k) - qm(b, t * k)", "            set jj = x*jj%mod", "            set jj= jj* qm(a,k) % mod", "            do nothing", "            set jj = jj % mod", "            create long long integer nn = qm(a, k) - qm(b, k)", "            set nn = nn % mod", "            assign nn * qm(a, t * k) to nn", "            set nn = nn % mod", "            set nn = qm(nn, mod - 2)", "            assign jj * nn to ans", "            set ans to (ans % mod + mod) % mod", "            print ans", "        else do the following", "            for i=0 to k exclusive", "                if c[i] is equal to -", "                    set x = x - qm(a, n - i) * qm(b, i)", "                    set x = (x % mod + mod) % mod", "                else do the following", "                    set x to x + qm(a, n - i) * qm(b, i)", "                    assign (x % mod + mod) % mod to x", "                end of the block", "            end of the block", "            if qm(a, k) == qm(b, k)", "                then set ans= t*x", "                set ans = (ans % mod + mod) % mod", "                for hh=0 to g exclusive", "                    if c[hh] is equal to -", "                        set ans = ans - qm(a, n - (t * k + hh)) * qm(b, (t * k + hh))", "                        set ans = (ans % mod + mod) % mod", "                    else do the following", "                        set ans = ans + qm(a, n - (t * k + hh)) * qm(b, (t * k + hh))", "                        set ans = (ans % mod + mod) % mod", "                    end of the block", "                end of the block", "                set ans = (ans % mod + mod) % mod", "                print ans", "                return to indicate successful execution", "            end of the block", "            create long long integer jj = qm(a, t * k) - qm(b, t * k)", "            set jj to x * jj % mod", "            set jj = jj * qm(a, k) % mod", "            do nothing", "            assign jj % mod to jj", "            create long long integer nn = (qm(a, k) - qm(b, k))", "            set nn = nn % mod", "            assign nn * qm(a, t * k) to nn", "            set nn = nn % mod", "            set nn = qm(nn, mod - 2)", "            set ans = jj * nn", "            set ans = (ans % mod + mod) % mod", "            for hh=0 to g exclusive", "                if c[hh] is -", "                    set ans = ans - qm(a, n - (t * k + hh)) * qm(b, (t * k + hh))", "                    set ans = (ans % mod + mod) % mod", "                else do the following", "                    set ans = ans + qm(a, n - (t * k + hh)) * qm(b, (t * k + hh))", "                    set ans = (ans % mod + mod) % mod", "                end of the block", "            end of the block", "            set ans = (ans % mod + mod) % mod", "            print ans", "        end of the block", "    end of the block", "end of the block"], "code_lines": ["long long mod = 1e9 + 9;", "long long qm(long long a, long long b) {", "    long long ans = 1;", "    while (b > 0) {", "        if (b & 1) ans = ans * a % mod;", "        b >>= 1;", "        a = a * a % mod;", "    }", "    return (ans % mod + mod) % mod;", "}", "char c[1000005];", "int main() {", "    long long n, a, b, k;", "    cin >> n >> a >> b >> k;", "    cin >> c;", "    long long ans = 0;", "    if (n + 1 <= k) {", "        for (long long i = 0; i <= n; i++) {", "            if (c[i] == '-') {", "                ans = ans - qm(a, n - i) * qm(b, i);", "                ans = (ans % mod + mod) % mod;", "            } else {", "                ans = ans + qm(a, n - i) * qm(b, i);", "                ans = (ans % mod + mod) % mod;", "            }", "        }", "        ans = (ans % mod + mod) % mod;", "        cout << ans << endl;", "    } else {", "        long long t = (n + 1) / k;", "        long long g = (n + 1) % k;", "        long long x = 0;", "        if (g == 0) {", "            for (long long i = 0; i < k; i++) {", "                if (c[i] == '-') {", "                    x = x - qm(a, n - i) * qm(b, i);", "                    x = (x % mod + mod) % mod;", "                } else {", "                    x = x + qm(a, n - i) * qm(b, i);", "                    x = (x % mod + mod) % mod;", "                }", "            }", "            if (qm(a, k) == qm(b, k)) {", "                ans = t * x;", "                ans = (ans % mod + mod) % mod;", "                cout << ans << endl;", "                return 0;", "            }", "            long long jj = qm(a, t * k) - qm(b, t * k);", "            jj = x * jj % mod;", "            jj = jj * qm(a, k) % mod;", "            ;", "            jj = jj % mod;", "            long long nn = (qm(a, k) - qm(b, k));", "            nn = nn % mod;", "            nn = nn * qm(a, t * k);", "            nn = nn % mod;", "            nn = qm(nn, mod - 2);", "            ans = jj * nn;", "            ans = (ans % mod + mod) % mod;", "            cout << ans << endl;", "        } else {", "            for (long long i = 0; i < k; i++) {", "                if (c[i] == '-') {", "                    x = x - qm(a, n - i) * qm(b, i);", "                    x = (x % mod + mod) % mod;", "                } else {", "                    x = x + qm(a, n - i) * qm(b, i);", "                    x = (x % mod + mod) % mod;", "                }", "            }", "            if (qm(a, k) == qm(b, k)) {", "                ans = t * x;", "                ans = (ans % mod + mod) % mod;", "                for (long long hh = 0; hh < g; hh++) {", "                    if (c[hh] == '-') {", "                        ans = ans - qm(a, n - (t * k + hh)) * qm(b, (t * k + hh));", "                        ans = (ans % mod + mod) % mod;", "                    } else {", "                        ans = ans + qm(a, n - (t * k + hh)) * qm(b, (t * k + hh));", "                        ans = (ans % mod + mod) % mod;", "                    }", "                }", "                ans = (ans % mod + mod) % mod;", "                cout << ans << endl;", "                return 0;", "            }", "            long long jj = qm(a, t * k) - qm(b, t * k);", "            jj = x * jj % mod;", "            jj = jj * qm(a, k) % mod;", "            ;", "            jj = jj % mod;", "            long long nn = (qm(a, k) - qm(b, k));", "            nn = nn % mod;", "            nn = nn * qm(a, t * k);", "            nn = nn % mod;", "            nn = qm(nn, mod - 2);", "            ans = jj * nn;", "            ans = (ans % mod + mod) % mod;", "            for (long long hh = 0; hh < g; hh++) {", "                if (c[hh] == '-') {", "                    ans = ans - qm(a, n - (t * k + hh)) * qm(b, (t * k + hh));", "                    ans = (ans % mod + mod) % mod;", "                } else {", "                    ans = ans + qm(a, n - (t * k + hh)) * qm(b, (t * k + hh));", "                    ans = (ans % mod + mod) % mod;", "                }", "            }", "            ans = (ans % mod + mod) % mod;", "            cout << ans << endl;", "        }", "    }", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["make ints n, a, b, and k", "let int array s of size 100000", "let string inp", "make map dp from ints and ints", "declare bpow taking in ints n and e and returning integer", "    create integer array b of size 30", "    set b[0] to n", "    for i = 1 to 30 exclusive, set b[i] to ((long long)b[i - 1] * b[i - 1]) % 1000000009", "    make integer ans = 1", "    for i = 0 to 30 exclusive", "        if e & (1 << i) are truthy set ans to ((long long)ans * b[i]) % 1000000009", "    return ans", "end of the block", "declare bdiv taking in integers n and d and returning integer", "    return the result of ((long long)n * bpow(d, 1000000009 - 2)) % 1000000009", "end of the block", "declare alt taking in int e and returning int", "    if e % k is not 0, end function", "    if dp.count(e) is falsy", "        if e is 0", "            end function", "        else if e is k", "            set dp[e] to 1", "        else do", "            create int l = e / 2 / k * k", "            make integer r = e - 1", "            let integer ans = (((long long)alt(l) * bpow(a, r)) + (long long)alt(r) * bpow(b, l)) % 1000000009", "            set dp[e] to ans", "        end of the block", "    end of the block", "    return dp[e]", "end of the block", "define the main function", "    read n, a, b, and k", "    read inp", "    for i = 0 to k exclusive", "        if inp[i] is '+'", "            set s[i] to 1", "        else do", "            set s[i] to -1", "    end of the block", "    create int x = 0", "    for i = 0 to k exclusive", "        create integer toadd = ((long long)s[i] * bpow(a, k - 1 - i)) % 1000000009", "        set toadd to ((long long)toadd * bpow(b, i)) % 1000000009", "        set x to ((long long)x + toadd + 1000000009) % 1000000009", "    end of the block", "    display x, \" \", and alt(n + 1) to error", "    create integer ans = ((long long)x * alt(n + 1)) % 1000000009", "    display ans", "end of the block"], "code_lines": ["int n, a, b, k;", "int s[100000];", "string inp;", "map<int, int> dp;", "int bpow(int n, int e) {", "    int b[30];", "    b[0] = n;", "    for (int i = 1; i < 30; i++) b[i] = ((long long)b[i - 1] * b[i - 1]) % 1000000009;", "    int ans = 1;", "    for (int i = 0; i < 30; i++)", "        if (e & (1 << i)) ans = ((long long)ans * b[i]) % 1000000009;", "    return ans;", "}", "int bdiv(int n, int d) {", "    return ((long long)n * bpow(d, 1000000009 - 2)) % 1000000009;", "}", "int alt(int e) {", "    assert(e % k == 0);", "    if (!dp.count(e)) {", "        if (e == 0)", "            assert(0);", "        else if (e == k)", "            dp[e] = 1;", "        else {", "            int l = e / 2 / k * k;", "            int r = e - l;", "            int ans = (((long long)alt(l) * bpow(a, r)) + (long long)alt(r) * bpow(b, l)) % 1000000009;", "            dp[e] = ans;", "        }", "    }", "    return dp[e];", "}", "int main() {", "    cin >> n >> a >> b >> k;", "    cin >> inp;", "    for (int i = 0; i < k; i++) {", "        if (inp[i] == '+')", "            s[i] = 1;", "        else", "            s[i] = -1;", "    }", "    int x = 0;", "    for (int i = 0; i < k; i++) {", "        int toadd = ((long long)s[i] * bpow(a, k - 1 - i)) % 1000000009;", "        toadd = ((long long)toadd * bpow(b, i)) % 1000000009;", "        x = ((long long)x + toadd + 1000000009) % 1000000009;", "    }", "    cerr << x << \" \" << alt(n + 1) << endl;", "    int ans = ((long long)x * alt(n + 1)) % 1000000009;", "    cout << ans << endl;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["declare long long MOD = 1000000009", "declare pw with long longs a, b as arguments, returning long long", "    if b is 0, return 1 from function", "    if b is 1, return a % MOD", "    if b % 2", "        declare long long rs = result of run pw ( a, b - 1 )", "        return ( rs * a ) % MOD from function", "    end of the block", "    declare long long rs = result of run w with a, b / 2 as arguments", "    return ( rs * rs ) % MOD", "end of the block", "declare long long vector sm", "declare solve with long longs a, b as arguments, returning long long", "    if b is 0, return 0 from function", "    for i = 0 to 35 exclusive", "        declare long long ba = (1LL bitshift left i ) bitwise and b", "        if ba is 0, end current loop iteration", "        return ( sm[i] + result of run solve( a, b - ( 1LL bitshift left i )) * result of run pw(a, (1LL bitshift left i))) % MOD", "    end of the block", "end of the block", "define the main function", "    declare long longs n, a, b, k", "    read n, a, b, k", "    declare string s", "    read s", "    declare long long X = 1, y + 1", "    for i = 0 to k exclusive", "        let X be X * b", "        let X be X % MOD", "    end of the block", "    for i = 0 to k exclusive", "        let Y be Y * a", "        let Y be Y % MOD", "    end of the block", "    let X be X * result of run pw(Y, MOD - 2)", "    let X be X % MOD", "    add 1 to end of sm", "    for i = 0 to 40 exclusive", "        add ( back of sm + back of sm * result of run pw(X, (1LL bitshift left i) ) to end of sm", "        let back of sm be back of sm % MOD", "    end of the block", "    declare long long st = result of run solve(X, (n + 1) / k)", "    declare long long ans = 0", "    for i = 0 to k exclusive", "        declare long long rs = (result of run pw(b,i) * result of run pw(a,n-1) ) % MOD", "        if s[i] is '-', let rs be rs * -1", "        let rs be rs * st", "        increment ans by rs", "        let ans be ans % MOD", "    end of the block", "    if ans is less than 0, increment ans by MOD", "    print ans and newline", "end of the block"], "code_lines": ["long long MOD = 1000000009;", "long long pw(long long a, long long b) {", "    if (b == 0) return 1;", "    if (b == 1) return a % MOD;", "    if (b % 2) {", "        long long rs = pw(a, b - 1);", "        return (rs * a) % MOD;", "    }", "    long long rs = pw(a, b / 2);", "    return (rs * rs) % MOD;", "}", "vector<long long> sm;", "long long solve(long long a, long long b) {", "    if (b == 0) return 0;", "    for (long long i = 0; i < 35; i++) {", "        long long ba = (1LL << i) & b;", "        if (ba == 0) continue;", "        return (sm[i] + solve(a, b - (1LL << i)) * pw(a, (1LL << i))) % MOD;", "    }", "}", "int main() {", "    long long n, a, b, k;", "    cin >> n >> a >> b >> k;", "    string s;", "    cin >> s;", "    long long X = 1, Y = 1;", "    for (long long i = 0; i < k; i++) {", "        X *= b;", "        X %= MOD;", "    }", "    for (long long i = 0; i < k; i++) {", "        Y *= a;", "        Y %= MOD;", "    }", "    X *= pw(Y, MOD - 2);", "    X %= MOD;", "    sm.push_back(1);", "    for (long long i = 0; i < 40; i++) {", "        sm.push_back(sm.back() + sm.back() * pw(X, (1LL << i)));", "        sm.back() %= MOD;", "    }", "    long long st = solve(X, (n + 1) / k);", "    long long ans = 0;", "    for (long long i = 0; i < k; i++) {", "        long long rs = (pw(b, i) * pw(a, n - i)) % MOD;", "        if (s[i] == '-') rs *= -1;", "        rs *= st;", "        ans += rs;", "        ans %= MOD;", "    }", "    if (ans < 0) ans += MOD;", "    cout << ans << endl;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "963A", "pseudocode_lines": ["create long long integer MOD = 1000000009", "into the function pw which takes two long long integers a and b and returns a long long integer", "    if b is 0 then return 1", "    if b is 1 then return a % MOD", "    if b%2 is true", "        create long long rs= pw(a,b-1)", "        return (rs * a) % MOD", "    end of the block", "    create long long integer rs= pw(a,b/2)", "    return (rs * rs) % MOD", "end of the block", "sm = long long integer vector", "into the function solve which takes a and b", "    if b is 0 then return 0", "    for i=0 to 35 exclusive", "        create long long integer ba = (1LL << i) & b", "        if ba is equal to 0 then continue", "        return sm[i] + solve(a, b - (1LL << i)) * pw(a, (1LL << i))) % MOD", "    end of the block", "end of the block", "define the main function", "    n,a,b,k = long long integers", "    read n,a,b,k", "    s=string", "    read s", "    create long long integers X and Y with values 1", "    for i=o to k exclusive", "        set X = X * b", "        set X = X % MOD", "    end of the block", "    for i=0 to k exclusive", "        set Y = Y * a", "        set Y = Y % MOD", "    end of the block", "    set X = X * pw(Y, MOD - 2)", "    set X = X % MOD", "    add 1 to the end of sm", "    for i=0 to 40 exclusive", "        add sm.back() + sm.back() * pw(X, (1LL << i) to end of sm", "        set sm.back() = sm.back() % MOD", "    end of the block", "    create long long integer st = solve(X, (n + 1) / k)", "    create long long integer ans=0", "    for i=0 to k exclusive", "        create long long integer rs = (pw(b, i) * pw(a, n - i)) % MOD", "        if s[i] is '-' then set rs = rs * -1", "        set rs = rs * st", "        set ans = ans + rs", "        set ans = ans % MOD", "    end of the block", "    if ans is less than 0 then set ans = ans + MOD", "    print ans", "end of the block"], "code_lines": ["long long MOD = 1000000009;", "long long pw(long long a, long long b) {", "    if (b == 0) return 1;", "    if (b == 1) return a % MOD;", "    if (b % 2) {", "        long long rs = pw(a, b - 1);", "        return (rs * a) % MOD;", "    }", "    long long rs = pw(a, b / 2);", "    return (rs * rs) % MOD;", "}", "vector<long long> sm;", "long long solve(long long a, long long b) {", "    if (b == 0) return 0;", "    for (long long i = 0; i < 35; i++) {", "        long long ba = (1LL << i) & b;", "        if (ba == 0) continue;", "        return (sm[i] + solve(a, b - (1LL << i)) * pw(a, (1LL << i))) % MOD;", "    }", "}", "int main() {", "    long long n, a, b, k;", "    cin >> n >> a >> b >> k;", "    string s;", "    cin >> s;", "    long long X = 1, Y = 1;", "    for (long long i = 0; i < k; i++) {", "        X *= b;", "        X %= MOD;", "    }", "    for (long long i = 0; i < k; i++) {", "        Y *= a;", "        Y %= MOD;", "    }", "    X *= pw(Y, MOD - 2);", "    X %= MOD;", "    sm.push_back(1);", "    for (long long i = 0; i < 40; i++) {", "        sm.push_back(sm.back() + sm.back() * pw(X, (1LL << i)));", "        sm.back() %= MOD;", "    }", "    long long st = solve(X, (n + 1) / k);", "    long long ans = 0;", "    for (long long i = 0; i < k; i++) {", "        long long rs = (pw(b, i) * pw(a, n - i)) % MOD;", "        if (s[i] == '-') rs *= -1;", "        rs *= st;", "        ans += rs;", "        ans %= MOD;", "    }", "    if (ans < 0) ans += MOD;", "    cout << ans << endl;", "}"], "testcases": [[["2 2 3 3", "+-+"], ["7"]], [["4 1 5 1", "-"], ["999999228"]], [["1 1 4 2", "-+"], ["3"]], [["3 1 4 4", "+--+"], ["45"]], [["5 1 1 6", "++---+"], ["0"]], [["5 2 2 6", "+--++-"], ["0"]], [["686653196 115381398 884618610 3", "+-+"], ["542231211"]], [["608663287 430477711 172252358 8", "-+--+-+-"], ["594681696"]], [["904132655 827386249 118827660 334", "+++-+++++--+++----+-+-+-+-+--+-+---++--++--++--+-+-+++-+++--+-+-+----+-+-++++-----+--++++------+++-+-+-++-++++++++-+-++-+++--+--++------+--+-+++--++--+---++-++-+-+-++---++-++--+-+-++-+------+-+----+++-+++--+-+-+--+--+--+------+--+---+--+-++--+++---+-+-++--------+-++--++-+-+-+-+-+-+--+-++++-+++--+--++----+--+-++-++--+--+-+-++-+-++++-"], ["188208979"]], [["234179195 430477711 115381398 12", "++++-+-+-+++"], ["549793323"]], [["75952547 967294208 907708706 252", "++--++--+++-+-+--++--++++++---+++-++-+-----++++--++-+-++------+-+-+-++-+-+-++++------++---+-++++---+-+-++++--++++++--+-+++-++--+--+---++++---+-+++-+++--+-+--+++++---+--++-++++--++++-+-++-+++-++-----+-+++++----++--+++-+-+++++-+--++-++-+--+-++++--+-+-+-+"], ["605712499"]], [["74709071 801809249 753674746 18", "++++++-+-+---+-+--"], ["13414893"]], [["743329 973758 92942 82", "++----+-++++----+--+++---+--++++-+-+---+++++--+--+++++++--++-+++----+--+++++-+--+-"], ["299311566"]], [["18111 291387 518587 2", "++"], ["724471355"]], [["996144 218286 837447 1", "-"], ["549104837"]], [["179358 828426 548710 67", "++++---+--++----+-+-++++----+--+---+------++-+-++++--+----+---+-+--"], ["759716474"]], [["397521 174985 279760 1", "+"], ["25679493"]], [["613632 812232 482342 1", "-"], ["891965141"]], [["936810 183454 647048 1", "+"], ["523548992"]], [["231531 250371 921383 28", "++-+------+--+--++++--+-+++-"], ["134450934"]], [["947301 87242 360762 97", "--+++--+++-++--++-++--++--+++---+++--++++--+++++--+-++-++-----+-++-+--++-----+-++-+--++-++-+-----"], ["405016159"]], [["425583346 814209084 570987274 1", "+"], ["63271171"]], [["354062556 688076879 786825319 1", "+"], ["545304776"]], [["206671954 13571766 192250278 1", "+"], ["717117421"]], [["23047921 621656196 160244047 1", "-"], ["101533009"]], [["806038018 740585177 987616107 293", "-+++++--++++---++-+--+-+---+-++++--+--+++--++---++++++++--+++++-+-++-+--+----+--+++-+-++-+++-+-+-+----------++-+-+++++++-+-+-+-++---+++-+-+-------+-+-++--++-++-++-++-+---+--++-++--+++--+++-+-+----++--+-+-++-+---+---+-+-+++------+-+++-+---++-+--+++----+++++---++-++--+----+++-+--+++-+------+-++"], ["441468166"]], [["262060935 184120408 148332034 148", "+--+-------+-+-+--++-+++--++-+-++++++--++-+++-+++--+-------+-+--+++-+-+-+---++-++-+-++---+--+-+-+--+------+++--+--+-+-+---+---+-+-++++---+++--+++---"], ["700325386"]], [["919350941 654611542 217223605 186", "++-++-+++++-+++--+---+++++++-++-+----+-++--+-++--++--+++-+++---+--+--++-+-+++-+-+++-++---+--+++-+-+++--+-+-------+-++------++---+-+---++-++-++---+-+--+-+--+++++---+--+--++++-++-++--+--++"], ["116291420"]], [["289455627 906207104 512692624 154", "-------++--+++---++-++------++----------+--+++-+-+++---+---+++--++++++--+-+-+--+---+-+-++-++--+-++--++++---+-+---+-----+--+-+---------+++-++---++-+-+-----"], ["48198216"]], [["258833760 515657142 791267045 1", "-"], ["935800888"]], [["691617927 66917103 843055237 8", "--+++---"], ["147768186"]], [["379582849 362892355 986900829 50", "++-++---+-+++++--++++--+--++--++-----+------++--+-"], ["927469713"]], [["176799169 363368399 841293419 1", "+"], ["746494802"]], [["144808247 203038656 166324035 4", "-+-+"], ["909066471"]], [["477607531 177367565 20080950 2", "++"], ["928662830"]], [["682074525 289438443 917164266 1", "+"], ["28048785"]], [["938449224 59852396 219719125 1", "-"], ["648647459"]], [["395171426 872478622 193568600 147", "+---++---+-+--+++++--+---+-++++-+-++---++++--+--+-+-++-+-++--------++---+++-+---++---+---+-+--+-++++-+++-+-+-++-+--+++-++-+-+-+-++++++-+---+---++--"], ["460881399"]], [["403493428 317461491 556701240 1", "-"], ["936516261"]], [["917751169 330191895 532837377 70", "-+-+++++++--++---++-+++++-+++-----+-+++---+--+-+-++-++-+-+-++-++-+----"], ["908035409"]], [["252089413 552678586 938424519 1", "-"], ["627032736"]], [["649316142 320010793 200197645 1", "-"], ["323650777"]], [["116399299 784781190 299072480 5", "++++-"], ["754650814"]]]}, {"problem_id": "398A", "pseudocode_lines": ["create long longs A, B, ans with ans = -0x7fffffff", "create long longs bxb, bex, bob, bpb", "define the main function", "    read A read B", "    if B is 0", "        print A * A print newline", "        for i = 0 to A exclusive print \"o\"", "        print newline", "        return to indicate successful execution", "    end of the block", "    if B is 1", "        print A * A - 1 print newline", "        for i = 0 to A exclusive, print \"o\"", "        print \"x\" print newline", "        return to indicate successful execution", "    end of the block", "    if A is 0", "        print -B * B print newline", "        for i = 0 to B exclusive, print \"x'", "        print newline", "        return to indicate successful execution", "    end of the block", "    for xb = 2 to minimum of (B and A + 1) inclusive", "        create integer ob with ob = xb - 1", "        create long long score with score = ob - 1", "        increment score by (A - (ob - 1)) * (A - (ob - 1))", "        end statement", "        create long long pb with pb = B / xb", "        create long long ex with ex = B % xb", "        decrement score by ( xb - ex ) * pb * pb", "        decrement score by ex * ( pb + 1 ) * ( pb + 1 )", "        if score is greater than ans", "            set ans to score", "            set bxb to xb", "            set bex to ex", "            set bob to ob", "            set bpb to pb", "        end of the block", "    end of the block", "    print ans print newline", "    for i = 0 to bxb exclusive", "        for j = 0 to bpb exclusive, print \"x\"", "        if i is less than bex, print \"x\"", "        if i is 0", "            for j = 0 to A - ( bob - 1 ) exclusive, print \"o\"", "        else if i + 1 is less than bxb", "            print \"o\"", "    end of the block", "    print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long A, B, ans = -0x7fffffff;", "long long bxb, bex, bob, bpb;", "int main() {", "    cin >> A >> B;", "    if (B == 0) {", "        cout << A * A << endl;", "        for (int i = 0; i < A; i++) cout << \"o\";", "        cout << endl;", "        return 0;", "    }", "    if (B == 1) {", "        cout << A * A - 1 << endl;", "        for (int i = 0; i < A; i++) cout << \"o\";", "        cout << \"x\" << endl;", "        return 0;", "    }", "    if (A == 0) {", "        cout << -B * B << endl;", "        for (int i = 0; i < B; i++) cout << \"x\";", "        cout << endl;", "        return 0;", "    }", "    for (int xb = 2; xb <= min(B, A + 1); xb++) {", "        int ob = xb - 1;", "        long long score = ob - 1;", "        score += (A - (ob - 1)) * (A - (ob - 1));", "        ;", "        long long pb = B / xb;", "        long long ex = B % xb;", "        score -= (xb - ex) * pb * pb;", "        score -= ex * (pb + 1) * (pb + 1);", "        if (score > ans) {", "            ans = score;", "            bxb = xb;", "            bex = ex;", "            bob = ob;", "            bpb = pb;", "        }", "    }", "    cout << ans << endl;", "    for (int i = 0; i < bxb; i++) {", "        for (int j = 0; j < bpb; j++) cout << \"x\";", "        if (i < bex) cout << \"x\";", "        if (i == 0)", "            for (int j = 0; j < A - (bob - 1); j++) cout << \"o\";", "        else if (i + 1 < bxb)", "            cout << \"o\";", "    }", "    cout << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["-1", "xxoox"]], [["4 0"], ["16", "oooo"]], [["0 4"], ["-16", "xxxx"]], [["8 6"], ["46", "xxxooooooooxxx"]], [["1 1"], ["0", "ox"]], [["38 5"], ["1431", "xxxooooooooooooooooooooooooooooooooooooooxx"]], [["2 122"], ["-4960", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["4 2"], ["14", "xoooox"]], [["4 9"], ["-13", "xxoxxoxxoxxox"]], [["8 10"], ["16", "xxxxoooooooxxxoxxx"]], [["206 209"], ["34847", "xxxxxxxxxxxxxxxxxxxoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxx"]], [["5 17"], ["-44", "xxxoxxxoxxxoxxxoxxxoxx"]], [["1 2"], ["-1", "xox"]], [["2 1"], ["3", "oox"]], [["1 1"], ["0", "ox"]], [["1 0"], ["1", "o"]], [["0 1"], ["-1", "x"]], [["2 2"], ["2", "xoox"]], [["4 1"], ["15", "oooox"]], [["4 2"], ["14", "xoooox"]], [["4 3"], ["11", "xxoooox"]], [["4 4"], ["8", "xxooooxx"]], [["4 5"], ["3", "xxxooooxx"]], [["4 6"], ["-2", "xxxooooxxx"]], [["4 7"], ["-7", "xxxoooxxoxx"]]]}, {"problem_id": "398A", "pseudocode_lines": ["declare integer variables co and cx", "create const long long inf = -1e16", "inlined long long function gox with int argument num", "    return inf if num is greater than cx", "    declare int ex = cx % num", "    declare int variable anch = cx / num", "    declare long long variable ans = 1LL * (anch + 1) * (anch + 1) * ex", "    increase ans by 1LL * anch * anch * (num - ex)", "    return -ans", "end of the block", "inlined long long function goo with int argument num", "    if num is greater than co", "    declare int variable juntos = co - num + 1", "    create long long ans = 1LL * juntos * juntos", "    increase ans by num - 1", "    return ans", "end of the block", "inlined void function build with int arguments x and o", "    create string s", "    declare integer xx = cx / x", "    create bool flag = true if x > o, else false", "    declare bool variable fst = true", "    create integer ex = cx % x", "    declare integer prim = co - o + 1", "    while either x or o is true", "        if flag is true", "            push 'x' into s xx times", "            if ex is greater than 0, push 'x' into s and decrement ex", "            decrement x", "        else", "            if fst is true", "                push 'o' into s prim times", "                set fst to false", "            else", "                push 'o' into s", "            decrement o", "        end of the block", "        invert the value of flag", "    end of the block", "    print s", "end of the block", "define the main function", "    read co and cx", "    if co is 0 or cx is 0", "        if co is greater than 0", "            print 1LL * co * co", "            print 'o' co times", "            print a new line", "        end of the block", "        if cx is greater than 0", "            print - 1LL * cx * cx", "            print 'x' cx times", "            print", "        end of the block", "        return to indicate successful execution", "    end of the block", "    declare int lim = min of co and cx", "    create long long ans = LLONG_MIN", "    pos is a pair of integers", "    for integer i = 1 to lim + 1 exclusive", "        if ans is less than gox(i) + goo(i)", "            assign gox(i) + goo(i) to ans", "            pos = {i, i}", "        end of the block", "    end of the block", "    for i = 2 to cx + 1 exclusive", "        if ans is less than gox(i) + goo(i - 1)", "            change ans to gox(i) + goo(i - 1)", "            pos = {i, i - 1}", "        end of the block", "    end of the block", "    for i = 2 to co + 1 exclusive", "        if ans is less than gox(i - 1) + goo(i)", "            set ans to gox(i - 1) + goo(i)", "            pos = {i - 1, i}", "        end of the block", "    end of the block", "    print ans", "    call build with arguments pos.first and pos.second", "    return to indicate successful execution", "end of the block"], "code_lines": ["int co, cx;", "const long long inf = -1e16;", "inline long long gox(int num) {", "    if (num > cx) return inf;", "    int ex = cx % num;", "    int anch = cx / num;", "    long long ans = 1LL * (anch + 1) * (anch + 1) * ex;", "    ans += 1LL * anch * anch * (num - ex);", "    return -ans;", "}", "inline long long goo(int num) {", "    if (num > co) return inf;", "    int juntos = co - num + 1;", "    long long ans = 1LL * juntos * juntos;", "    ans += num - 1;", "    return ans;", "}", "inline void build(int x, int o) {", "    string s;", "    int xx = cx / x;", "    bool flag = (x > o);", "    bool fst = true;", "    int ex = cx % x;", "    int prim = co - o + 1;", "    while (x || o) {", "        if (flag) {", "            for (int i = int(0); i < int(xx); ++i) s.push_back('x');", "            if (ex > 0) s.push_back('x'), ex--;", "            x--;", "        } else {", "            if (fst) {", "                for (int i = int(0); i < int(prim); ++i) s.push_back('o');", "                fst = false;", "            } else", "                s.push_back('o');", "            o--;", "        }", "        flag = (!flag);", "    }", "    cout << s << endl;", "}", "int main() {", "    cin >> co >> cx;", "    if (co == 0 || cx == 0) {", "        if (co > 0) {", "            cout << 1LL * co * co << endl;", "            for (int i = int(0); i < int(co); ++i) cout << 'o';", "            cout << endl;", "        }", "        if (cx > 0) {", "            cout << -1LL * cx * cx << endl;", "            for (int i = int(0); i < int(cx); ++i) cout << 'x';", "            cout << endl;", "        }", "        return 0;", "    }", "    int lim = min(co, cx);", "    long long ans = LLONG_MIN;", "    pair<int, int> pos;", "    for (int i = int(1); i < int(lim + 1); ++i) {", "        if (ans < gox(i) + goo(i)) {", "            ans = gox(i) + goo(i);", "            pos = {i, i};", "        }", "    }", "    for (int i = int(2); i < int(cx + 1); ++i) {", "        if (ans < gox(i) + goo(i - 1)) {", "            ans = gox(i) + goo(i - 1);", "            pos = {i, i - 1};", "        }", "    }", "    for (int i = int(2); i < int(co + 1); ++i) {", "        if (ans < gox(i - 1) + goo(i)) {", "            ans = gox(i - 1) + goo(i);", "            pos = {i - 1, i};", "        }", "    }", "    cout << ans << endl;", "    build(pos.first, pos.second);", "    return 0;", "}"], "testcases": [[["2 3"], ["-1", "xxoox"]], [["4 0"], ["16", "oooo"]], [["0 4"], ["-16", "xxxx"]], [["8 6"], ["46", "xxxooooooooxxx"]], [["1 1"], ["0", "ox"]], [["38 5"], ["1431", "xxxooooooooooooooooooooooooooooooooooooooxx"]], [["2 122"], ["-4960", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["4 2"], ["14", "xoooox"]], [["4 9"], ["-13", "xxoxxoxxoxxox"]], [["8 10"], ["16", "xxxxoooooooxxxoxxx"]], [["206 209"], ["34847", "xxxxxxxxxxxxxxxxxxxoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxx"]], [["5 17"], ["-44", "xxxoxxxoxxxoxxxoxxxoxx"]], [["1 2"], ["-1", "xox"]], [["2 1"], ["3", "oox"]], [["1 1"], ["0", "ox"]], [["1 0"], ["1", "o"]], [["0 1"], ["-1", "x"]], [["2 2"], ["2", "xoox"]], [["4 1"], ["15", "oooox"]], [["4 2"], ["14", "xoooox"]], [["4 3"], ["11", "xxoooox"]], [["4 4"], ["8", "xxooooxx"]], [["4 5"], ["3", "xxxooooxx"]], [["4 6"], ["-2", "xxxooooxxx"]], [["4 7"], ["-7", "xxxoooxxoxx"]]]}, {"problem_id": "398A", "pseudocode_lines": ["define the main function", "    create long long a and b", "    read a,b", "    if a equal to 0", "        print -1 * b * b", "        for i=0 to b exclusive, print x", "        print a newline", "    else if b = 0", "        print a * a", "        for i=0 to a exclusive, print o", "        print a newline", "    else if b equal to 1", "        print a*a -1", "        for i=0 to a exclusive, print o", "        print x", "        print a newline", "    else", "        ser ret to LLONG_MIN", "        set foo=0", "        for j=1 to min of b-1 and a", "            assign (a - j + 1) * (a - j + 1) + (j - 1) to pos", "            set q = b / (j + 1) and r to b % (j + 1)", "            set neg = r * (q + 1) * (q + 1) + (j + 1 - r) * q * q", "            if pos - neg greater than ret", "                ret = pos - neg", "                assign j + 1 to foo", "            end of the block", "        end of the block", "        print ret", "        set q = b / foo, r = b % foo", "        assign (a - (foo - 1) + 1) to g", "        for j=1 to foo + 1 exclusive", "            for i=0 to q exclusive, print x", "            if <= r, print x", "            if j different from foo", "                if j equal to 1", "                    for i=0 to g exclusive, print o", "                else", "                    print o", "            end of the block", "        end of the block", "        print a newline", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    long long a, b;", "    cin >> a >> b;", "    if (a == 0) {", "        cout << -1 * b * b << endl;", "        for (int(i) = (0); (i) < (b); ++(i)) cout << 'x';", "        cout << endl;", "    } else if (b == 0) {", "        cout << a * a << endl;", "        for (int(i) = (0); (i) < (a); ++(i)) cout << 'o';", "        cout << endl;", "    } else if (b == 1) {", "        cout << a * a - 1 << endl;", "        for (int(i) = (0); (i) < (a); ++(i)) cout << 'o';", "        cout << 'x';", "        cout << endl;", "    } else {", "        long long ret = LLONG_MIN;", "        long long foo = 0;", "        for (long long j = 1; j <= min(b - 1, a); j++) {", "            long long pos = (a - j + 1) * (a - j + 1) + (j - 1);", "            long long q = b / (j + 1), r = b % (j + 1);", "            long long neg = r * (q + 1) * (q + 1) + (j + 1 - r) * q * q;", "            if (pos - neg > ret) {", "                ret = pos - neg;", "                foo = j + 1;", "            }", "        }", "        cout << ret << endl;", "        long long q = b / foo, r = b % foo;", "        long long g = (a - (foo - 1) + 1);", "        for (int(j) = (1); (j) < (foo + 1); ++(j)) {", "            for (int(i) = (0); (i) < (q); ++(i)) cout << 'x';", "            if (j <= r) cout << 'x';", "            if (j != foo) {", "                if (j == 1)", "                    for (int(i) = (0); (i) < (g); ++(i)) cout << 'o';", "                else", "                    cout << 'o';", "            }", "        }", "        cout << endl;", "    }", "    return 0;", "}"], "testcases": [[["2 3"], ["-1", "xxoox"]], [["4 0"], ["16", "oooo"]], [["0 4"], ["-16", "xxxx"]], [["8 6"], ["46", "xxxooooooooxxx"]], [["1 1"], ["0", "ox"]], [["38 5"], ["1431", "xxxooooooooooooooooooooooooooooooooooooooxx"]], [["2 122"], ["-4960", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["4 2"], ["14", "xoooox"]], [["4 9"], ["-13", "xxoxxoxxoxxox"]], [["8 10"], ["16", "xxxxoooooooxxxoxxx"]], [["206 209"], ["34847", "xxxxxxxxxxxxxxxxxxxoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxx"]], [["5 17"], ["-44", "xxxoxxxoxxxoxxxoxxxoxx"]], [["1 2"], ["-1", "xox"]], [["2 1"], ["3", "oox"]], [["1 1"], ["0", "ox"]], [["1 0"], ["1", "o"]], [["0 1"], ["-1", "x"]], [["2 2"], ["2", "xoox"]], [["4 1"], ["15", "oooox"]], [["4 2"], ["14", "xoooox"]], [["4 3"], ["11", "xxoooox"]], [["4 4"], ["8", "xxooooxx"]], [["4 5"], ["3", "xxxooooxx"]], [["4 6"], ["-2", "xxxooooxxx"]], [["4 7"], ["-7", "xxxoooxxoxx"]]]}, {"problem_id": "113A", "pseudocode_lines": ["create integers flag, gender, ok, t and cnt", "cal is a new array of integers with size 10005", "declare new string variable s", "create an arrays of strings x with 6 elements = \"lios\", \"liala\", \"etr\", \"etra\", \"initis\", \"inites\", and y wth 10005 elements", "function cmp with string arguments a and b that returns integer", "    define integer variables len1 = length of a, and len2 = length of b", "    in a for loop, change i from 0 to len2 exclusive", "        if a[len1 - len2 + i] != b[i], return 0", "    return 1", "end of the block", "function over with string argument s", "    print s", "    terminate the process", "end of the block", "define the main function", "    create new integer called cnt with value 0", "    loop, reading s from the input", "        increment cnt by one", "        change the value of y[cnt] to s", "        change flag to 0", "        in a for loop, change i from 0 to 6 exclusive", "            if cmp(y[cnt], x[i]) returned true", "                change flag to 1", "                change the value of cal[cnt] to i", "            end of the block", "        if flag = 0, call over(\"NO\")", "        if character from the input is equal to '\\n', stop the loop", "    end of the block", "    if cnt = 1, call over(\"YES\")", "    start for loop from i = 1 to cnt exclusive", "        if cal[i] % 2 != cal[i + 1] % 2 || cal[i] > cal[i + 1], call over(\"NO\")", "    change flag to 0", "    for integer i = 1 to cnt inclusive incrementing i", "        if cal[i] / 2 = 1, increment flag by one", "    if flag != 1, call over(\"NO\")", "    call over(\"YES\")", "    return to indicate successful execution", "end of the block"], "code_lines": ["int flag, gender, ok, t, cnt;", "int cal[10005];", "string s;", "string x[6] = {\"lios\", \"liala\", \"etr\", \"etra\", \"initis\", \"inites\"}, y[10005];", "int cmp(string a, string b) {", "    int len1 = a.size(), len2 = b.size();", "    for (int i = 0; i < len2; i++)", "        if (a[len1 - len2 + i] != b[i]) return 0;", "    return 1;", "}", "void over(string s) {", "    cout << s << endl;", "    exit(0);", "}", "int main() {", "    int cnt = 0;", "    while (cin >> s) {", "        cnt++;", "        y[cnt] = s;", "        flag = 0;", "        for (int i = 0; i < 6; i++)", "            if (cmp(y[cnt], x[i])) {", "                flag = 1;", "                cal[cnt] = i;", "            }", "        if (flag == 0) over(\"NO\");", "        if (cin.get() == '\\n') break;", "    }", "    if (cnt == 1) over(\"YES\");", "    for (int i = 1; i < cnt; i++)", "        if (cal[i] % 2 != cal[i + 1] % 2 || cal[i] > cal[i + 1]) over(\"NO\");", "    flag = 0;", "    for (int i = 1; i <= cnt; i++)", "        if (cal[i] / 2 == 1) flag++;", "    if (flag != 1) over(\"NO\");", "    over(\"YES\");", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "113A", "pseudocode_lines": ["declare int variables flag, gender, ok, t and cnt", "declare new string called s", "define new array of strings filled with elements \"lios\", \"liala\", \"etr\", \"etra\", \"initis\" and \"inites\"", "integer function cmp with string arguments a and b", "    define integers len1 = length of a, and lent2 = length of b", "    start for loop from i = 0 to len2 exclusive", "        return 0 if a[len1 - len2 + i] != b[i]", "    end of the block", "    return 1", "end of the block", "define the main function", "    assign the new value = 3 to gender", "    read s and keep looping", "        set ok to 0", "        for integer i = 0 to 6 exclusive incrementing i", "            if cmp(s, x[i]) is not 0", "                assign 1 to ok", "                increment cnt by one", "                if gender = 3", "                    set the value of gender to i modulo 2", "                else if i % 2 != gender", "                    print \"NO\"", "                    return to indicate successful execution", "                end of the block", "                assign the new value = i / 2 + 1 to t", "                if t is equal to 1 and flag = 0", "                    change flag to 1", "                else if t and flag are both 1", "                    change flag to 1", "                else if t is equal to 2 and flag is equal to 1", "                    set the value of flag to 2", "                else if t is equal to 2 and flag = 0", "                    assign the new value = 2 to flag", "                else if t is equal to 3 and flag = 0", "                    assign the new value = -1 to flag", "                else if t is equal to 3 and flag = 2", "                    set the value of flag to 3", "                else if t and flag are both equal to 3", "                    change flag to 3", "                else", "                    print \"NO\"", "                    return to indicate successful execution", "                end of the block", "            end of the block", "        end of the block", "        if ok is equal to 0", "            print \"NO\"", "            return to indicate successful execution", "        end of the block", "        if character from the input is equal to '\\n', break the loop", "    end of the block", "    if flag = 1 and cnt > 1", "        print \"NO\"", "    else", "        print \"YES\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["int flag, gender, ok, t, cnt;", "string s;", "string x[6] = {\"lios\", \"liala\", \"etr\", \"etra\", \"initis\", \"inites\"};", "int cmp(string a, string b) {", "    int len1 = a.size(), len2 = b.size();", "    for (int i = 0; i < len2; i++) {", "        if (a[len1 - len2 + i] != b[i]) return 0;", "    }", "    return 1;", "}", "int main() {", "    gender = 3;", "    while (cin >> s) {", "        ok = 0;", "        for (int i = 0; i < 6; i++) {", "            if (cmp(s, x[i])) {", "                ok = 1;", "                cnt++;", "                if (gender == 3)", "                    gender = i % 2;", "                else if (i % 2 != gender) {", "                    cout << \"NO\" << endl;", "                    return 0;", "                }", "                t = i / 2 + 1;", "                if (t == 1 && flag == 0)", "                    flag = 1;", "                else if (t == 1 && flag == 1)", "                    flag = 1;", "                else if (t == 2 && flag == 1)", "                    flag = 2;", "                else if (t == 2 && flag == 0)", "                    flag = 2;", "                else if (t == 3 && flag == 0)", "                    flag = -1;", "                else if (t == 3 && flag == 2)", "                    flag = 3;", "                else if (t == 3 && flag == 3)", "                    flag = 3;", "                else {", "                    cout << \"NO\" << endl;", "                    return 0;", "                }", "            }", "        }", "        if (ok == 0) {", "            cout << \"NO\" << endl;", "            return 0;", "        }", "        if (cin.get() == '\\n') break;", "    }", "    if (flag == 1 && cnt > 1)", "        cout << \"NO\" << endl;", "    else", "        cout << \"YES\" << endl;", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "113A", "pseudocode_lines": ["in the function to_num which takes a string s and returns an integer", "    if size of s is greater than or equal to 4", "        if s.substr(s.size() - 4) = \"lios\" then return 0", "    end of the block", "    if size of s >= 5", "        if s.substr(s.size() - 5) = \"liala\" then return 1", "    end of the block", "    if size of s >= 3", "        if s.substr(s.size() - 3) = \"etr\" then return 2", "    end of the block", "    if size of s >= 4", "        if s.substr(s.size() - 4) = \"etra\" then return 3", "    end of the block", "    if size of s >=6", "        if s.substr(s.size() - 6) = \"initis\" then return 4", "    end of the block", "    if size of s >= 6", "        if s.substr(s.size() - 6) = \"inites\" then return 5", "    end of the block", "    return -1", "end of the block", "in the function islegal which takes a integer vector ans and returns a boolean", "    if ans[0] % 2 is equal to 0", "        for i=1 to size of ans exclusive", "            if ans[i] % 2 is not equal to 0 then return false", "    else do the following", "        for i=1 to size of ans exclusive", "            if ans[i] is equal to -1 then return false", "            if ans[i] % 2 = 0 then return false", "        end of the block", "    end of the block", "    return true", "end of the block", "in the function isok which takes an integer vector ans and returns a boolean", "    create a boolean f = false", "    for i=0 to size of ans exclusive", "        if ans[i]/2 is equal to 0 and f is false", "            set f to true", "            continue", "        end of the block", "        if f is false", "            if ans[i]/2 is not equal to 0 then return false", "        else do the following", "            if ans[i]/2 is not equal to 2 then return false", "        end of the block", "    end of the block", "    if f is false then return false", "    return true", "end of the block", "define the main function", "    c=array of chars of size 100010", "    s= string", "    res= vector of string", "    ans = vector of integer", "    create an integer pos=0", "    read c", "    set s=c", "    for i=0 to size of s exclusive", "        if s[i] is empty", "            add s.substr(pos, i - pos) to the end of res", "            set pos to i+1", "        end of the block", "    add s.substr(pos) to end of res", "    for i=0 to size of res exclusive add to_num(res[i] to end of ans", "    if size of ans is equal to 1 and asn[0] >=0", "        print YES", "        return to indicate successful execution", "    end of the block", "    if islegal(ans) is true", "        if isok(ans)is true", "            print YES", "        else do the following", "            print NO", "    else do the following", "        print NO", "    return to indicate successful execution", "end of the block"], "code_lines": ["int to_num(string s) {", "    if (s.size() >= 4) {", "        if (s.substr(s.size() - 4) == \"lios\") return 0;", "    }", "    if (s.size() >= 5) {", "        if (s.substr(s.size() - 5) == \"liala\") return 1;", "    }", "    if (s.size() >= 3) {", "        if (s.substr(s.size() - 3) == \"etr\") return 2;", "    }", "    if (s.size() >= 4) {", "        if (s.substr(s.size() - 4) == \"etra\") return 3;", "    }", "    if (s.size() >= 6) {", "        if (s.substr(s.size() - 6) == \"initis\") return 4;", "    }", "    if (s.size() >= 6) {", "        if (s.substr(s.size() - 6) == \"inites\") return 5;", "    }", "    return -1;", "}", "bool islegal(vector<int> ans) {", "    if (ans[0] % 2 == 0) {", "        for (int i = 1; i < ans.size(); i++)", "            if (ans[i] % 2 != 0) return false;", "    } else {", "        for (int i = 0; i < ans.size(); i++) {", "            if (ans[i] == -1) return false;", "            if (ans[i] % 2 == 0) return false;", "        }", "    }", "    return true;", "}", "bool isok(vector<int> ans) {", "    bool f = false;", "    for (int i = 0; i < ans.size(); i++) {", "        if ((ans[i] / 2) == 1 && !f) {", "            f = true;", "            continue;", "        }", "        if (!f) {", "            if (ans[i] / 2 != 0) return false;", "        } else {", "            if (ans[i] / 2 != 2) return false;", "        }", "    }", "    if (!f) { return false; }", "    return true;", "}", "int main() {", "    char c[100010];", "    string s;", "    vector<string> res;", "    vector<int> ans;", "    int pos = 0;", "    gets(c);", "    s = c;", "    for (int i = 0; i < s.size(); i++)", "        if (s[i] == ' ') {", "            res.push_back(s.substr(pos, i - pos));", "            pos = i + 1;", "        }", "    res.push_back(s.substr(pos));", "    for (int i = 0; i < res.size(); i++) ans.push_back(to_num(res[i]));", "    if (ans.size() == 1 && ans[0] >= 0) {", "        puts(\"YES\");", "        return 0;", "    }", "    if (islegal(ans)) {", "        if (isok(ans))", "            puts(\"YES\");", "        else", "            puts(\"NO\");", "    } else", "        puts(\"NO\");", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "113A", "pseudocode_lines": ["in the function to_num which takes a string s and returns an integer", "    if size of s is greater than or equal to 4", "        if s.substr(s.size() - 4) = \"lios\" then return 0", "    end of the block", "    if size of s >= 5", "        if s.substr(s.size() - 5) = \"liala\" then return 1", "    end of the block", "    if size of s >= 3", "        if s.substr(s.size() - 3) = \"etr\" then return 2", "    end of the block", "    if size of s >= 4", "        if s.substr(s.size() - 4) = \"etra\" then return 3", "    end of the block", "    if size of s >=6", "        if s.substr(s.size() - 6) = \"initis\" then return 4", "    end of the block", "    if size of s >= 6", "        if s.substr(s.size() - 6) = \"inites\" then return 5", "    end of the block", "    return -1", "end of the block", "in the function islegal which takes a integer vector ans and returns a boolean", "    if ans[0] % 2 is equal to 0", "        for i=1 to size of ans exclusive", "            if ans[i] % 2 is not equal to 0 then return false", "    else do the following", "        for i=1 to size of ans exclusive", "            if ans[i] is equal to -1 then return false", "            if ans[i] % 2 = 0 then return false", "        end of the block", "    end of the block", "    return true", "end of the block", "in the function isok which takes an integer vector ans and returns a boolean", "    create a boolean f = false", "    for i=0 to size of ans exclusive", "        if ans[i]/2 is equal to 0 and f is false", "            set f to true", "            continue", "        end of the block", "        if f is false", "            if ans[i]/2 is not equal to 0 then return false", "        else do the following", "            if ans[i]/2 is not equal to 2 then return false", "        end of the block", "    end of the block", "    if f is false then return false", "    return true", "end of the block", "define the main function", "    c=array of chars of size 100010", "    s= string", "    res= vector of string", "    ans = vector of integer", "    create an integer pos=0", "    read c", "    set s=c", "    for i=0 to size of s exclusive", "        if s[i] is empty", "            add s.substr(pos, i - pos) to the end of res", "            set pos to i+1", "        end of the block", "    add s.substr(pos) to end of res", "    for i=0 to size of res exclusive add to_num(res[i] to end of ans", "    if size of ans is equal to 1 and asn[0] >=0", "        print YES", "        return to indicate successful execution", "    end of the block", "    if islegal(ans) is true", "        if isok(ans)is true", "            print YES", "        else do the following", "            print NO", "    else do the following", "        print NO", "    return to indicate successful execution", "end of the block"], "code_lines": ["int to_num(string s) {", "    if (s.size() >= 4) {", "        if (s.substr(s.size() - 4) == \"lios\") return 0;", "    }", "    if (s.size() >= 5) {", "        if (s.substr(s.size() - 5) == \"liala\") return 1;", "    }", "    if (s.size() >= 3) {", "        if (s.substr(s.size() - 3) == \"etr\") return 2;", "    }", "    if (s.size() >= 4) {", "        if (s.substr(s.size() - 4) == \"etra\") return 3;", "    }", "    if (s.size() >= 6) {", "        if (s.substr(s.size() - 6) == \"initis\") return 4;", "    }", "    if (s.size() >= 6) {", "        if (s.substr(s.size() - 6) == \"inites\") return 5;", "    }", "    return -1;", "}", "bool islegal(vector<int> ans) {", "    if (ans[0] % 2 == 0) {", "        for (int i = 1; i < ans.size(); i++)", "            if (ans[i] % 2 != 0) return false;", "    } else {", "        for (int i = 0; i < ans.size(); i++) {", "            if (ans[i] == -1) return false;", "            if (ans[i] % 2 == 0) return false;", "        }", "    }", "    return true;", "}", "bool isok(vector<int> ans) {", "    bool f = false;", "    for (int i = 0; i < ans.size(); i++) {", "        if ((ans[i] / 2) == 1 && !f) {", "            f = true;", "            continue;", "        }", "        if (!f) {", "            if (ans[i] / 2 != 0) return false;", "        } else {", "            if (ans[i] / 2 != 2) return false;", "        }", "    }", "    if (!f) { return false; }", "    return true;", "}", "int main() {", "    char c[100010];", "    string s;", "    vector<string> res;", "    vector<int> ans;", "    int pos = 0;", "    gets(c);", "    s = c;", "    for (int i = 0; i < s.size(); i++)", "        if (s[i] == ' ') {", "            res.push_back(s.substr(pos, i - pos));", "            pos = i + 1;", "        }", "    res.push_back(s.substr(pos));", "    for (int i = 0; i < res.size(); i++) ans.push_back(to_num(res[i]));", "    if (ans.size() == 1 && ans[0] >= 0) {", "        puts(\"YES\");", "        return 0;", "    }", "    if (islegal(ans)) {", "        if (isok(ans))", "            puts(\"YES\");", "        else", "            puts(\"NO\");", "    } else", "        puts(\"NO\");", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "113A", "pseudocode_lines": ["ip, ip2 and n are ints with ip and ip2 = 0", "declare vector of integers called v", "s is a new array of characters with 100010 elements", "in the function next_token that returns boolean", "    set the value of ip to ip2", "    while ip < n and (s[ip] < 'a' or s[ip] > 'z')", "    if ip is equal to n, return false", "    change ip2 to ip", "    while ip2 < n and s[ip2] >= 'a' and s[ip2] <= 'z'", "    return true", "end of the block", "declare character z", "function get_type that returns integer", "    define new integer len with value ip2-ip", "    change z to s[ip2]", "    assign the new value = 0 to s[ip2]", "    if s + ip + len - 4 matches \"lios\", return 0", "    if result of s + ip + len - 5 = \"liala\" return 1", "    if s + ip + len - 3 matches \"etr\" return 10", "    if strcmp(s + ip + len - 4,\"etra\") returns 0, return 11", "    if comparison of s + ip + len - 6 with \"initis\" returns 0, return 20", "    return 21 if s + ip + len - 6 matches \"inites\"", "    return -1", "end of the block", "boolean function solve", "    in a for loop, change i from 0 to length of v exclusive", "        if v[i] is equal to -1, return false", "    return true if length of v = 1", "    start for loop from i = 0 to length of v exclusive incrementing i", "        in a for loop, change j from 0 to i exclusive", "            return false if v[i] % 10 != v[j] % 10", "    start for loop from i = 0 to length of v - 1 exclusive incrementing i", "        if v[i] is greater than v[i + 1], return false", "    create new integer cnt = 0", "    increment i in a loop from i = 0 to length of v exclusive", "        if v[i] / 10 = 1, increment cnt", "    if cnt is equal to 1", "        return true", "    else", "        return false", "end of the block", "define the main function", "    store input into s", "    change n to length of s", "    while next_token() returns true", "        push new value = the result of get_type() into v", "        change s[ip2] to z", "    end of the block", "    if call to solve() returned true", "        print \"YES\"", "    else", "        print \"NO\" to standard output", "    return to indicate successful execution", "end of the block"], "code_lines": ["int ip = 0, ip2 = 0, n;", "vector<int> v;", "char s[100010];", "bool next_token() {", "    ip = ip2;", "    while (ip < n && (s[ip] < 'a' || s[ip] > 'z')) ip++;", "    if (ip == n) return false;", "    ip2 = ip;", "    while (ip2 < n && s[ip2] >= 'a' && s[ip2] <= 'z') ip2++;", "    return true;", "}", "char z;", "int get_type() {", "    int len = ip2 - ip;", "    z = s[ip2];", "    s[ip2] = 0;", "    if (strcmp(s + ip + len - 4, \"lios\") == 0) return 0;", "    if (strcmp(s + ip + len - 5, \"liala\") == 0) return 1;", "    if (strcmp(s + ip + len - 3, \"etr\") == 0) return 10;", "    if (strcmp(s + ip + len - 4, \"etra\") == 0) return 11;", "    if (strcmp(s + ip + len - 6, \"initis\") == 0) return 20;", "    if (strcmp(s + ip + len - 6, \"inites\") == 0) return 21;", "    return -1;", "}", "bool solve() {", "    for (int i = 0; i < v.size(); i++)", "        if (v[i] == -1) return false;", "    if (v.size() == 1) return true;", "    for (int i = 0; i < v.size(); i++)", "        for (int j = 0; j < i; j++)", "            if (v[i] % 10 != v[j] % 10) return false;", "    for (int i = 0; i < v.size() - 1; i++)", "        if (v[i] > v[i + 1]) return false;", "    int cnt = 0;", "    for (int i = 0; i < v.size(); i++)", "        if (v[i] / 10 == 1) cnt++;", "    if (cnt == 1)", "        return true;", "    else", "        return false;", "}", "int main() {", "    gets(s);", "    n = strlen(s);", "    while (next_token()) {", "        v.push_back(get_type());", "        s[ip2] = z;", "    }", "    if (solve())", "        puts(\"YES\");", "    else", "        puts(\"NO\");", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "113A", "pseudocode_lines": ["declare constant integer N = 1e5 + 7", "declare constant string array s = {\"lios\", \"liala\", \"etr\", \"etra\", \"initis\", \"inites\"}", "declare map from string to integer mp", "declare string array h size N", "declare integer a size N", "declare inline get_s with string address s as argument, returning integer", "    if size of s is less than 3, return 0 from function", "    for i = 3 to 6 inclusive", "        if i is greater than size of s, return 0 from function", "        if first index of ( substring of s from size of s - i to i ) in mp is not end of mp, return mp[substring of s from size of s - i to i]", "    end of the block", "    return to indicate successful execution", "end of the block", "define the main function", "    declare integer cnt = 0", "    for i = 0 to 6 exclusive, let mp[s[i]] be i + 1", "    while ( read h[cnt] ), increment cnt", "    declare booleans f1 = 0, f2 = 0", "    for i = 0 to cnt exclusive", "        let a[i] be result of run get_s(h[i])", "        if not a[i], return 0 * print \"NO\"", "        let f1 be f1 bitwise or (bitwise and 1 ), let f2 be f2 bitwise or ( bitwise not a[i] bitwise and 1 )", "    end of the block", "    if cnt is 1, return 0 * print \"YES\"", "    if f1 and f2, return 0 * print \"NO\"", "    for i = 0 to cnt exclusive, increment a[i] by 1, let a[i] be a[i] bitshift right 1", "    declare integer p = 0", "    while p is less than cnt - 1 and a[p] is a[p+1] and a[p] is 1, increment p", "    if a[p] is 1", "        increment p", "    else if a[p] is 3", "        return 0 * print \"NO\"", "    if a[p] is not 2", "        return 0 * print \"NO\"", "    else", "        increment p", "    while p is less than cnt", "        if a[increment p] is not 3, return 0 * print \"NO\"", "    if a[increment p] is not 3, return 0 * print \"NO\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 1e5 + 7;", "const string s[] = {\"lios\", \"liala\", \"etr\", \"etra\", \"initis\", \"inites\"};", "map<string, int> mp;", "string h[N];", "int a[N];", "inline int get_s(string &s) {", "    if (s.size() < 3) return 0;", "    for (int i = 3; i <= 6; i++) {", "        if (i > s.size()) return 0;", "        if (mp.find(s.substr(s.size() - i, i)) != mp.end()) return mp[s.substr(s.size() - i, i)];", "    }", "    return 0;", "}", "int main() {", "    int cnt = 0;", "    for (int i = 0; i < 6; i++) mp[s[i]] = i + 1;", "    while (cin >> h[cnt]) cnt++;", "    bool f1 = 0, f2 = 0;", "    for (int i = 0; i < cnt; i++) {", "        a[i] = get_s(h[i]);", "        if (!a[i]) return 0 * puts(\"NO\");", "        f1 |= a[i] & 1, f2 |= ~a[i] & 1;", "    }", "    if (cnt == 1) return 0 * puts(\"YES\");", "    if (f1 && f2) return 0 * puts(\"NO\");", "    for (int i = 0; i < cnt; i++) (a[i] += 1) >>= 1;", "    int p = 0;", "    while (p < cnt - 1 && a[p] == a[p + 1] && a[p] == 1) p++;", "    if (a[p] == 1)", "        p++;", "    else if (a[p] == 3)", "        return 0 * puts(\"NO\");", "    if (a[p] != 2)", "        return 0 * puts(\"NO\");", "    else", "        p++;", "    while (p < cnt)", "        if (a[p++] != 3) return 0 * puts(\"NO\");", "    puts(\"YES\");", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "113A", "pseudocode_lines": ["make string vector word", "make integer vector be and af", "create int set g", "declare sf taking in string s and returning int", "    make int n = s.size()", "    if n is greater than or equal to 4 and s.substr(n - 4, 4) is equal to \"lios\"", "        return to indicate successful execution", "    else if n is greater than 5 and s.substr(n - 5, 5) is equal to \"liala\"", "        return 1", "    else if n is greater than or equal to 3 and s.substr(n - 3, 3) is equal to \"etr\"", "        return 2", "    else if n is greater than or equal to 4 and s.substr(n - 4, 4) is equal to \"etra\"", "        return 3", "    else if n is greater than or equal to 6 and s.substr(n - 6, 6) equals \"initis\"", "        return 4", "    else if n is greater than or equal to 6 and s.substr(n - 6, 6) equals \"inites\"", "        return 5", "    else do", "        return -1", "    end of the block", "end of the block", "define the main function", "    make string s", "    read s and while it's truthy, append s to word", "    for i = 0 to size of word exclusive", "        make integer j = sf(word[i])", "        if j is equal to -1", "            print \"NO\"", "            return to indicate successful execution", "        end of the block", "        insert j % 2 to g", "        append j / 2 to be", "        append j / 2 to af", "    end of the block", "    if size of word is 1", "        print \"YES\"", "        return to indicate successful execution", "    end of the block", "    sort af", "    if g.size() is not 1", "        print \"NO\"", "        return to indicate successful execution", "    end of the block", "    make integer cnt = 0", "    for i = 0 to af.size() exclusive", "        if af[i] is not equal to be[i]", "            show \"NO\"", "            return to indicate successful execution", "        end of the block", "        if af[i] is equal to 1, increment cnt", "    end of the block", "    if cnt is equal to 0 and size of word is not equal to 1", "        show \"NO\"", "        return to indicate successful execution", "    else if cnt is not 1 and cnt is not 0", "        display \"NO\"", "        return to indicate successful execution", "    end of the block", "    output \"YES\"", "    return to indicate successful execution", "end of the block"], "code_lines": ["vector<string> word;", "vector<int> be, af;", "set<int> g;", "int sf(string s) {", "    int n = s.size();", "    if (n >= 4 && s.substr(n - 4, 4) == \"lios\") {", "        return 0;", "    } else if (n >= 5 && s.substr(n - 5, 5) == \"liala\") {", "        return 1;", "    } else if (n >= 3 && s.substr(n - 3, 3) == \"etr\") {", "        return 2;", "    } else if (n >= 4 && s.substr(n - 4, 4) == \"etra\") {", "        return 3;", "    } else if (n >= 6 && s.substr(n - 6, 6) == \"initis\") {", "        return 4;", "    } else if (n >= 6 && s.substr(n - 6, 6) == \"inites\") {", "        return 5;", "    } else {", "        return -1;", "    }", "}", "int main() {", "    string s;", "    while (cin >> s) { word.push_back(s); }", "    for (int i = 0; i < word.size(); i++) {", "        int j = sf(word[i]);", "        if (j == -1) {", "            cout << \"NO\" << endl;", "            return 0;", "        }", "        g.insert(j % 2);", "        be.push_back(j / 2);", "        af.push_back(j / 2);", "    }", "    if (word.size() == 1) {", "        cout << \"YES\" << endl;", "        return 0;", "    }", "    sort(af.begin(), af.end());", "    if (g.size() != 1) {", "        cout << \"NO\" << endl;", "        return 0;", "    }", "    int cnt = 0;", "    for (int i = 0; i < af.size(); i++) {", "        if (af[i] != be[i]) {", "            cout << \"NO\" << endl;", "            return 0;", "        }", "        if (af[i] == 1) { cnt++; }", "    }", "    if (cnt == 0 && word.size() != 1) {", "        cout << \"NO\" << endl;", "        return 0;", "    } else if (cnt != 1 && cnt != 0) {", "        cout << \"NO\" << endl;", "        return 0;", "    }", "    cout << \"YES\" << endl;", "    return 0;", "}"], "testcases": [[["petr"], ["YES"]], [["etis atis animatis etis atis amatis"], ["NO"]], [["nataliala kataliala vetra feinites"], ["YES"]], [["qweasbvflios"], ["YES"]], [["lios lios petr initis qwe"], ["NO"]], [["lios initis"], ["NO"]], [["petr initis lios"], ["NO"]], [["petra petra petra"], ["NO"]], [["in"], ["NO"]], [["liala petra initis"], ["NO"]], [["liala petra inites"], ["YES"]], [["liala initis"], ["NO"]], [["liala petra petr inites"], ["NO"]], [["liala petr inites"], ["NO"]], [["llilitos"], ["NO"]], [["umeszdawsvgkjhlqwzentsphxqhdungbylhnikwviuhccbstghhxlmvcjznnkjqkugsdysjbedwpmsmxmgxlrlxctnebtbwrsvgjktkrosffwymovxvsgfmmqwfflpvbumozikroxrdgwjrnstngstxbiyyuxehrhviteptedlmyetr"], ["YES"]], [["i i i i i i i i i i i i i i i a a a a a a v v v v v v v v v v v"], ["NO"]], [["fbvzqonvdlqdanwliolaqfj sbauorbinites xkbfnfinitespjy phbexglblzpobtqpisyijycmtliola aosinites lbpjiwcjoqyuhglthloiniteswb mjtxhoofohzzgefvhsywojcuxtetxmojrlktodhbgyrkeejgjzxkzyvrxwmyaqkeoqnvusnlrsfffrzeoqjdfumolhksqkrtzwhnforgpenziokrxlnhcapbbupctlmuetrani pigxerwetupjbkvlmgnjhdfjliolanz tqhaidxbqmdaeincxjuliola"], ["NO"]], [["mfrmqetr"], ["YES"]], [["hnwvfllholxfialiola cknjtxpliola daliola gqfapnhmmworliola qhetra qrisbexsrefcwzoxqwxrevinites wwldqkqhvrgwplqinites nqdpoauitczttxoinites fgbmdfpxkhahkinites"], ["NO"]], [["kcymcpgqdxkudadewddualeemhixhsdazudnjdmuvxvrlrbrpsdpxpagmrogplltnifrtomdtahxwadguvetxaqkvsvnoyhowirnluhmyewzapirnpfdisvhtbenxmfezahqoflkjrfqjubwdfktnpeirodwubftzlcczzavfiooihzvnqincndisudihvbcaxptrwovekmhiiwsgzgbxydvuldlnktxtltrlajjzietkxbnhetra"], ["YES"]], [["dosiydnwxemojaavfdvlwsyhzqywqjutovygtlcleklhybczhjqfzxwdmlwqwcqqyfjkzhsizlmdarrfronxqkcknwpkvhdlgatdyjisjoopvngpjggldxjfxaauoxmqirkuphydyweoixftstlozaoywnxgriscudwlokncbmaebpssccmmmfjennyjaryqlzjknnklqketra"], ["YES"]], [["etretra linites"], ["YES"]], [["petretra petr"], ["NO"]], [["lialalios petraveryfunnypetr"], ["YES"]], [["petropetrapetr petra"], ["NO"]], [["lios petrnonono"], ["NO"]], [["lios petr initisandinitisandliala petrainitis"], ["NO"]], [["petro"], ["NO"]], [["petr initesinitis"], ["YES"]], [["lios initis"], ["NO"]], [["liala initespetra"], ["YES"]], [["lios petrapetr"], ["YES"]], [["initis petr"], ["NO"]], [["lioslialapetrpetrainitisinitesliosliala initesinitislioslialapetrpetrainitisinitetra"], ["YES"]], [["veryfunnyprefixpetr"], ["YES"]], [["veryfunnyprefixpetra"], ["YES"]], [["veryfunnyprefixinitis"], ["YES"]], [["veryfunnyprefixinites"], ["YES"]], [["veryfunnyprefixliala"], ["YES"]], [["veryfunnyprefixlios"], ["YES"]], [["veryfunnyprefixlialas"], ["NO"]], [["veryfunnyprefixliala veryfunnyprefixpetretra"], ["YES"]], [["veryfunnyprefixlios veryfunnyprefixinitisetr"], ["YES"]], [["veryfunnyprefixlios aabbinitis"], ["NO"]], [["veryfunnyprefixlios inites"], ["NO"]], [["lios petr initis"], ["YES"]], [["liala etra inites"], ["YES"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["initis"], ["YES"]], [["inites"], ["YES"]], [["tes"], ["NO"]], [["tr"], ["NO"]], [["a"], ["NO"]], [["lios lios"], ["NO"]], [["lios"], ["YES"]], [["liala"], ["YES"]], [["petr"], ["YES"]], [["petra"], ["YES"]], [["pinitis"], ["YES"]], [["pinites"], ["YES"]], [["plios pliala"], ["NO"]], [["plios petr"], ["YES"]], [["plios petra"], ["NO"]], [["plios plios"], ["NO"]], [["plios initis"], ["NO"]], [["plios pinites"], ["NO"]], [["pliala plios"], ["NO"]], [["pliala ppliala"], ["NO"]], [["pliala petr"], ["NO"]], [["pliala petra"], ["YES"]], [["pliala pinitis"], ["NO"]], [["pliala pinites"], ["NO"]], [["petr plios"], ["NO"]], [["petr pliala"], ["NO"]], [["petr petr"], ["NO"]], [["petr petra"], ["NO"]], [["petr pinitis"], ["YES"]], [["petr pinites"], ["NO"]], [["petra lios"], ["NO"]], [["petra liala"], ["NO"]], [["petra petr"], ["NO"]], [["petra petra"], ["NO"]], [["petra initis"], ["NO"]], [["petra inites"], ["YES"]], [["initis lios"], ["NO"]], [["initis liala"], ["NO"]], [["initis petr"], ["NO"]], [["initis petra"], ["NO"]], [["initis initis"], ["NO"]], [["initis inites"], ["NO"]], [["inites lios"], ["NO"]], [["inites liala"], ["NO"]], [["inites petr"], ["NO"]], [["inites petra"], ["NO"]], [["inites initis"], ["NO"]], [["inites inites"], ["NO"]], [["lios lios lios"], ["NO"]], [["lios lios liala"], ["NO"]], [["lios lios etr"], ["YES"]], [["lios lios etra"], ["NO"]], [["lios lios initis"], ["NO"]], [["lios lios inites"], ["NO"]], [["lios liala lios"], ["NO"]], [["lios liala liala"], ["NO"]], [["lios liala etr"], ["NO"]], [["lios liala etra"], ["NO"]], [["lios liala initis"], ["NO"]], [["lios liala inites"], ["NO"]], [["lios etr lios"], ["NO"]], [["lios etr liala"], ["NO"]], [["lios etr etr"], ["NO"]], [["lios etr etra"], ["NO"]], [["lios etr initis"], ["YES"]], [["lios etr inites"], ["NO"]], [["lios etra lios"], ["NO"]], [["lios etra liala"], ["NO"]], [["lios etra etr"], ["NO"]], [["lios etra etra"], ["NO"]], [["lios etra initis"], ["NO"]], [["lios etra inites"], ["NO"]], [["lios initis lios"], ["NO"]], [["lios initis liala"], ["NO"]], [["lios initis etr"], ["NO"]], [["lios initis etra"], ["NO"]], [["lios initis initis"], ["NO"]], [["lios initis inites"], ["NO"]], [["lios inites lios"], ["NO"]], [["lios inites liala"], ["NO"]], [["lios inites etr"], ["NO"]], [["lios inites etra"], ["NO"]], [["lios inites initis"], ["NO"]], [["lios inites inites"], ["NO"]], [["liala lios lios"], ["NO"]], [["liala lios liala"], ["NO"]], [["liala lios etr"], ["NO"]], [["liala lios etra"], ["NO"]], [["liala lios initis"], ["NO"]], [["liala lios inites"], ["NO"]], [["liala liala lios"], ["NO"]], [["liala liala liala"], ["NO"]], [["liala liala etr"], ["NO"]], [["liala liala etra"], ["YES"]], [["liala liala initis"], ["NO"]], [["liala liala inites"], ["NO"]], [["liala etr lios"], ["NO"]], [["liala etr liala"], ["NO"]], [["liala etr etr"], ["NO"]], [["liala etr etra"], ["NO"]], [["liala etr initis"], ["NO"]], [["liala etr inites"], ["NO"]], [["liala etra lios"], ["NO"]], [["liala etra liala"], ["NO"]], [["liala etra etr"], ["NO"]], [["liala etra etra"], ["NO"]], [["liala etra initis"], ["NO"]], [["liala etra inites"], ["YES"]], [["liala initis lios"], ["NO"]], [["liala initis liala"], ["NO"]], [["liala initis etr"], ["NO"]], [["liala initis etra"], ["NO"]], [["liala initis initis"], ["NO"]], [["liala initis inites"], ["NO"]], [["liala inites lios"], ["NO"]], [["liala inites liala"], ["NO"]], [["liala inites etr"], ["NO"]], [["liala inites etra"], ["NO"]], [["liala inites initis"], ["NO"]], [["liala inites inites"], ["NO"]], [["etr lios lios"], ["NO"]], [["etr lios liala"], ["NO"]], [["etr lios etr"], ["NO"]], [["etr lios etra"], ["NO"]], [["etr lios initis"], ["NO"]], [["etr lios inites"], ["NO"]], [["etr liala lios"], ["NO"]], [["etr liala liala"], ["NO"]], [["etr liala etr"], ["NO"]], [["etr liala etra"], ["NO"]], [["etr liala initis"], ["NO"]], [["etr liala inites"], ["NO"]], [["etr etr lios"], ["NO"]], [["etr etr liala"], ["NO"]], [["etr etr etr"], ["NO"]], [["etr etr etra"], ["NO"]], [["etr etr initis"], ["NO"]], [["etr etr inites"], ["NO"]], [["etr etra lios"], ["NO"]], [["etr etra liala"], ["NO"]], [["etr etra etr"], ["NO"]], [["etr etra etra"], ["NO"]], [["etr etra initis"], ["NO"]], [["etr etra inites"], ["NO"]], [["etr initis lios"], ["NO"]], [["etr initis liala"], ["NO"]], [["etr initis etr"], ["NO"]], [["etr initis etra"], ["NO"]], [["etr initis initis"], ["YES"]], [["etr initis inites"], ["NO"]], [["etr inites lios"], ["NO"]], [["etr inites liala"], ["NO"]], [["etr inites etr"], ["NO"]], [["etr inites etra"], ["NO"]], [["etr inites initis"], ["NO"]], [["etr inites inites"], ["NO"]], [["etra lios lios"], ["NO"]], [["etra lios liala"], ["NO"]], [["etra lios etr"], ["NO"]], [["etra lios etra"], ["NO"]], [["etra lios initis"], ["NO"]], [["etra lios inites"], ["NO"]], [["etra liala lios"], ["NO"]], [["etra liala liala"], ["NO"]], [["etra liala etr"], ["NO"]], [["etra liala etra"], ["NO"]], [["etra liala initis"], ["NO"]], [["etra liala inites"], ["NO"]], [["etra etr lios"], ["NO"]], [["etra etr liala"], ["NO"]], [["etra etr etr"], ["NO"]], [["etra etr etra"], ["NO"]], [["etra etr initis"], ["NO"]], [["etra etr inites"], ["NO"]], [["etra etra lios"], ["NO"]], [["etra etra liala"], ["NO"]], [["etra etra etr"], ["NO"]], [["etra etra etra"], ["NO"]], [["etra etra initis"], ["NO"]], [["etra etra inites"], ["NO"]], [["etra initis lios"], ["NO"]], [["etra initis liala"], ["NO"]], [["etra initis etr"], ["NO"]], [["etra initis etra"], ["NO"]], [["etra initis initis"], ["NO"]], [["etra initis inites"], ["NO"]], [["etra inites lios"], ["NO"]], [["etra inites liala"], ["NO"]], [["etra inites etr"], ["NO"]], [["etra inites etra"], ["NO"]], [["etra inites initis"], ["NO"]], [["etra inites inites"], ["YES"]], [["initis lios lios"], ["NO"]], [["initis lios liala"], ["NO"]], [["initis lios etr"], ["NO"]], [["initis lios etra"], ["NO"]], [["initis lios initis"], ["NO"]], [["initis lios inites"], ["NO"]], [["initis liala lios"], ["NO"]], [["initis liala liala"], ["NO"]], [["initis liala etr"], ["NO"]], [["initis liala etra"], ["NO"]], [["initis liala initis"], ["NO"]], [["initis liala inites"], ["NO"]], [["initis etr lios"], ["NO"]], [["initis etr liala"], ["NO"]], [["initis etr etr"], ["NO"]], [["initis etr etra"], ["NO"]], [["initis etr initis"], ["NO"]], [["initis etr inites"], ["NO"]], [["initis etra lios"], ["NO"]], [["initis etra liala"], ["NO"]], [["initis etra etr"], ["NO"]], [["initis etra etra"], ["NO"]], [["initis etra initis"], ["NO"]], [["initis etra inites"], ["NO"]], [["initis initis lios"], ["NO"]], [["initis initis liala"], ["NO"]], [["initis initis etr"], ["NO"]], [["initis initis etra"], ["NO"]], [["initis initis initis"], ["NO"]], [["initis initis inites"], ["NO"]], [["initis inites lios"], ["NO"]], [["initis inites liala"], ["NO"]], [["initis inites etr"], ["NO"]], [["initis inites etra"], ["NO"]], [["initis inites initis"], ["NO"]], [["initis inites inites"], ["NO"]], [["inites lios lios"], ["NO"]], [["inites lios liala"], ["NO"]], [["inites lios etr"], ["NO"]], [["inites lios etra"], ["NO"]], [["inites lios initis"], ["NO"]], [["inites lios inites"], ["NO"]], [["inites liala lios"], ["NO"]], [["inites liala liala"], ["NO"]], [["inites liala etr"], ["NO"]], [["inites liala etra"], ["NO"]], [["inites liala initis"], ["NO"]], [["inites liala inites"], ["NO"]], [["inites etr lios"], ["NO"]], [["inites etr liala"], ["NO"]], [["inites etr etr"], ["NO"]], [["inites etr etra"], ["NO"]], [["inites etr initis"], ["NO"]], [["inites etr inites"], ["NO"]], [["inites etra lios"], ["NO"]], [["inites etra liala"], ["NO"]], [["inites etra etr"], ["NO"]], [["inites etra etra"], ["NO"]], [["inites etra initis"], ["NO"]], [["inites etra inites"], ["NO"]], [["inites initis lios"], ["NO"]], [["inites initis liala"], ["NO"]], [["inites initis etr"], ["NO"]], [["inites initis etra"], ["NO"]], [["inites initis initis"], ["NO"]], [["inites initis inites"], ["NO"]], [["inites inites lios"], ["NO"]], [["inites inites liala"], ["NO"]], [["inites inites etr"], ["NO"]], [["inites inites etra"], ["NO"]], [["inites inites initis"], ["NO"]], [["inites inites inites"], ["NO"]]]}, {"problem_id": "744A", "pseudocode_lines": ["f is an integer array of size 1005", "g is an integer array of size 1005", "in function find with parameter integer x and return integer", "    return f[x] if f[x] equals x, otherwise return call find with f[x]", "end of the block", "in function clear", "    for i = 0 to 1005 exclusive, set f[i] to i", "end of the block", "define the main function", "    call memset with g, 0, call sizeof with g", "    call clear", "    n, m, k are integers", "    read n, m, k", "    i and j are integers", "    for i = 0 to k exclusive", "        declare an integer gov", "        read gov", "        assign 1 to g[gov]", "    end of the block", "    for i = 0 to m exclusive", "        x and y are integers", "        read x, y", "        if g[x] equals 1", "            assign x to f[call find with y]", "        else if g[y] equals 1", "            assign y to f[call find with x]", "        else", "            if g[call find with x] equals 1", "                set f[call find with y] to f[call find with x]", "            else if g[call find with y] equals 1", "                set f[find call with x] to f[find call with y]", "            else", "                set f[find call with y] to f[find call with x]", "        end of the block", "    end of the block", "    ans is an integer set to 0", "    maxx is an integer set to 0", "    temp is an integer", "    for i = 1 to n inclusive", "        assign 1 to temp", "        if g[i]", "            for j = 1 to n inclusive", "                if i isn't equal to j and not g[j] and f[call find with j] equals i, increment temp", "            end of the block", "            add temp * (temp - 1) / 2 to ans", "            set maxx to call max with maxx, temp", "        end of the block", "    end of the block", "    cnt is an integer set to 0", "    for i = 1 to n inclusive", "        if not g[i] and not g[f[call find with i]], increment cnt", "    end of the block", "    add maxx * cnt to ans", "    add cnt * (cnt - 1) / 2 to ans", "    subtract m from ans", "    display ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int f[1005];", "int g[1005];", "int find(int x) {", "    return f[x] == x ? x : f[x] = find(f[x]);", "}", "void clear() {", "    for (int i = 0; i < 1005; i++) f[i] = i;", "}", "int main() {", "    memset(g, 0, sizeof(g));", "    clear();", "    int n, m, k;", "    cin >> n >> m >> k;", "    int i, j;", "    for (i = 0; i < k; i++) {", "        int gov;", "        cin >> gov;", "        g[gov] = 1;", "    }", "    for (i = 0; i < m; i++) {", "        int x, y;", "        cin >> x >> y;", "        if (g[x] == 1)", "            f[find(y)] = x;", "        else if (g[y] == 1)", "            f[find(x)] = y;", "        else {", "            if (g[find(x)] == 1)", "                f[find(y)] = f[find(x)];", "            else if (g[find(y)] == 1)", "                f[find(x)] = f[find(y)];", "            else", "                f[find(y)] = f[find(x)];", "        }", "    }", "    int ans = 0;", "    int maxx = 0;", "    int temp;", "    for (i = 1; i <= n; i++) {", "        temp = 1;", "        if (g[i]) {", "            for (j = 1; j <= n; j++) {", "                if (i != j && !g[j] && f[find(j)] == i) { temp++; }", "            }", "            ans += temp * (temp - 1) / 2;", "            maxx = max(maxx, temp);", "        }", "    }", "    int cnt = 0;", "    for (i = 1; i <= n; i++) {", "        if (!g[i] && !g[f[find(i)]]) { cnt++; }", "    }", "    ans += maxx * cnt;", "    ans += cnt * (cnt - 1) / 2;", "    ans -= m;", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["f=array of 1005 int", "g=array of 1005 int", "function find (get int x, return int)", "    if f[x] is x return x else (f[x] = find(f[x]), return f[x])", "end of the block", "function clear (no args, no return value)", "    for i=0 to 1005 exclusive f[i]=i", "end of the block", "define the main function", "    fill g with 0", "    clear()", "    n,m,k=int", "    read n,m,k", "    i,j=int", "    for i=0 to k exclusive", "        gov=int", "        read gov", "        g[gov]=1", "    end of the block", "    for i=0 to m exclusive", "        x,y=int", "        read x,y", "        if g[x] is 1", "            f[find(y)]=x", "        else if g[y] is 1", "            f[find(x)]=y", "        else", "            if g[find(x)] is 1", "                f[find(y)]=f[find(x)]", "            else if g[find(y)] is 1", "                f[find(x)]=f[find(y)]", "            else", "                f[find(y)]=f[find(x)]", "        end of the block", "    end of the block", "    ans=0", "    maxx=0", "    temp=int", "    for i=1 to n inclusive", "        temp=1", "        if g[i]", "            for j=1 to n inclusive", "                if i is not j and not g[j] and f[find(j)] is i increment temp", "            end of the block", "            add temp*(temp-1)/2 to ans", "            maxx=max(maxx,temp)", "        end of the block", "    end of the block", "    cnt=0", "    for i=1 to n inclusive", "        if not g[i] and not g[f[find(i)]] increment cnt", "    end of the block", "    add maxx*cnt to ans", "    add cnt*(cnt-1)/2 to ans", "    subtract m from ans", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int f[1005];", "int g[1005];", "int find(int x) {", "    return f[x] == x ? x : f[x] = find(f[x]);", "}", "void clear() {", "    for (int i = 0; i < 1005; i++) f[i] = i;", "}", "int main() {", "    memset(g, 0, sizeof(g));", "    clear();", "    int n, m, k;", "    cin >> n >> m >> k;", "    int i, j;", "    for (i = 0; i < k; i++) {", "        int gov;", "        cin >> gov;", "        g[gov] = 1;", "    }", "    for (i = 0; i < m; i++) {", "        int x, y;", "        cin >> x >> y;", "        if (g[x] == 1)", "            f[find(y)] = x;", "        else if (g[y] == 1)", "            f[find(x)] = y;", "        else {", "            if (g[find(x)] == 1)", "                f[find(y)] = f[find(x)];", "            else if (g[find(y)] == 1)", "                f[find(x)] = f[find(y)];", "            else", "                f[find(y)] = f[find(x)];", "        }", "    }", "    int ans = 0;", "    int maxx = 0;", "    int temp;", "    for (i = 1; i <= n; i++) {", "        temp = 1;", "        if (g[i]) {", "            for (j = 1; j <= n; j++) {", "                if (i != j && !g[j] && f[find(j)] == i) { temp++; }", "            }", "            ans += temp * (temp - 1) / 2;", "            maxx = max(maxx, temp);", "        }", "    }", "    int cnt = 0;", "    for (i = 1; i <= n; i++) {", "        if (!g[i] && !g[f[find(i)]]) { cnt++; }", "    }", "    ans += maxx * cnt;", "    ans += cnt * (cnt - 1) / 2;", "    ans -= m;", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["declare new array of integers fa with 202002 elements", "sum is a new array of integers with 202002 elements", "create and array of integers c with size 202002", "function max with int arguments a and b that returns int", "    if a is greater than b", "        return a", "    else", "        return b as a result", "end of the block", "int function findfa with int argument x", "    if fa[x] is equal to x", "        return x", "    else", "        return the result of findfa(fa[x])", "end of the block", "function U with int arguments x and y", "    rx is a new integer variable = findfa(x)", "    declare integer ry = findfa(y)", "    if rx is not equal to ry", "        set fa[rx] to ry", "        add sum[rx] to sum[ry]", "    end of the block", "end of the block", "vis is an array of booleans with size 202002", "declare vector of integers called vec", "define the main function", "    create integers n, m and k", "    read variables n, m and k from the input", "    remove all elements from vec", "    for i from 0 to n inclusive", "        assign i to fa[i]", "        assign 1 to sum[i]", "    end of the block", "    for i = 0 to k exclusive, read from the input to c[i]", "    declare new ints x and y", "    for i = 0 to m exclusive", "        read user input to x and y", "        call U of x and y", "    end of the block", "    set first sizeof(vis) bytes at the pointer vis to 0", "    for i = 0 to k exclusive, change the value of vis[findfa(c[i])] to 1", "    create integer variable with name MAX with value -1", "    create new long long called ans with value 0", "    start for loop from i = 1 to n inclusive incrementing i", "        if fa[i] is equal to i", "            if vis[i] is equal to 1", "                set MAX to max of MAX and sum[i]", "            else", "                push sum[i] to the vec", "            add sum[i] * (sum[i] - 1) / 2 to ans", "        end of the block", "    end of the block", "    declare integer len with value length of vec", "    start for loop from i = 0 to len exclusive incrementing i", "        start for loop from j = i + 1 to len exclusive, changing ans to the sum of ans and vec[i] * vec[j] on each iteration", "        change ans to ans + vec[i] * MAX", "    end of the block", "    change ans to ans - m", "    if ans is greater than 0", "        print ans", "    else", "        print \"0\" to the standard output", "    return to indicate successful execution", "end of the block"], "code_lines": ["int fa[202002];", "int sum[202002];", "int c[202002];", "int max(int a, int b) {", "    if (a > b)", "        return a;", "    else", "        return b;", "}", "int findfa(int x) {", "    if (fa[x] == x)", "        return x;", "    else", "        return findfa(fa[x]);", "}", "void U(int x, int y) {", "    int rx = findfa(x);", "    int ry = findfa(y);", "    if (rx != ry) {", "        fa[rx] = ry;", "        sum[ry] += sum[rx];", "    }", "}", "bool vis[202002];", "vector<int> vec;", "int main() {", "    int n, m, k;", "    cin >> n >> m >> k;", "    vec.clear();", "    for (int i = 0; i <= n; i++) {", "        fa[i] = i;", "        sum[i] = 1;", "    }", "    for (int i = 0; i < k; i++) cin >> c[i];", "    int x, y;", "    for (int i = 0; i < m; i++) {", "        cin >> x >> y;", "        U(x, y);", "    }", "    memset(vis, 0, sizeof(vis));", "    for (int i = 0; i < k; i++) vis[findfa(c[i])] = 1;", "    int MAX = -1;", "    long long ans = 0;", "    for (int i = 1; i <= n; i++) {", "        if (fa[i] == i) {", "            if (vis[i] == 1)", "                MAX = max(MAX, sum[i]);", "            else", "                vec.push_back(sum[i]);", "            ans += sum[i] * (sum[i] - 1) / 2;", "        }", "    }", "    int len = vec.size();", "    for (int i = 0; i < len; i++) {", "        for (int j = i + 1; j < len; j++) { ans += vec[i] * vec[j]; }", "        ans += vec[i] * MAX;", "    }", "    ans = ans - m;", "    if (ans > 0)", "        cout << ans << endl;", "    else", "        cout << \"0\" << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["v = vector of long integers of size 1100", "visited = array of boolean values of length 1100", "let ans be a long integer with ans = 0", "let edges be a long integer with edges = 0", "let edge be a long integer with edge = 0", "let dfs be a long integer function that accepts long integer values x, parentu", "    visited[x] is equal to true", "    let n be a long integer with n = 1", "    edges = edges + length of v[x]", "    for long integer i = 0 to length of v[x] exclusive,", "        if not visited[v[x][i]], n = n + depth first search of v[x][i], x", "    end of the block", "    return the value of n", "end of the block", "define the main function", "    let n, m, k, x, y be long integers", "    read n, m, k", "    home = vector of long integers", "    for long integer i = 0 to k exclusive", "        read x", "        push to back x in home", "    end of the block", "    for long integer i = 0 to m exclusive", "        read x, y", "        push to back y in v[x]", "        push to back x in v[y]", "    end of the block", "    let sum be a long integer with sum = 0", "    let num be a long integer with num = 0", "    for long integer i = 0 to k exclusive", "        if not visited[home[i]]", "            edges is equal to 0", "            let node be a long integer with node is equal to depth first search of home[i], 0", "            edges is equal to edges / 2", "            increment edge by edges", "            num is equal to maximum of num and node", "            ans is equal to ans + ((node - 1) * (node)) / 2 - edges", "            increment sum by node", "        end of the block", "    end of the block", "    ans is equal to ans + (n - sum) * num", "    ans is equal to ans + ((n - sum - 1) * (n - sum)) / 2 - (m - edge)", "    print ans and newline", "end of the block"], "code_lines": ["vector<long long int> v[1100];", "bool visited[1100];", "long long int ans = 0;", "long long int edges = 0;", "long long int edge = 0;", "long long int dfs(long long int x, long long int parent) {", "    visited[x] = true;", "    long long int n = 1;", "    edges += v[x].size();", "    for (long long int i = 0; i < v[x].size(); i++) {", "        if (!visited[v[x][i]]) n += dfs(v[x][i], x);", "    }", "    return n;", "}", "int main() {", "    long long int n, m, k, x, y;", "    cin >> n >> m >> k;", "    vector<long long int> home;", "    for (long long int i = 0; i < k; i++) {", "        cin >> x;", "        home.push_back(x);", "    }", "    for (long long int i = 0; i < m; i++) {", "        cin >> x >> y;", "        v[x].push_back(y);", "        v[y].push_back(x);", "    }", "    long long int sum = 0;", "    long long int num = 0;", "    for (long long int i = 0; i < k; i++) {", "        if (!visited[home[i]]) {", "            edges = 0;", "            long long int node = dfs(home[i], 0);", "            edges /= 2;", "            edge += edges;", "            num = max(num, node);", "            ans += ((node - 1) * (node)) / 2 - edges;", "            sum += node;", "        }", "    }", "    ans += (n - sum) * num;", "    ans += ((n - sum - 1) * (n - sum)) / 2 - (m - edge);", "    cout << ans << endl;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["f = int array of size 1000", "in function find taking int x and returning int", "    if f[x] is x", "        return x", "    else", "        return find of f[x]", "end of the block", "in function unionn taking int a, int b", "    x = int with x = find of a", "    y = int with y = find of b", "    if x is not y set f[x] to y", "end of the block", "define the main function", "    t = int", "    n, m, k, x, y = int", "    s, num = int array of size 1000 each", "    loop while reading n then m then k", "        set all values of num to 0", "        for i = 1 to n inclusive set f[i] to i", "        for i = 1 to k inclusive read s[i]", "        for i = 0 to m", "            read x then y", "            call unionn of x, y", "        end of the block", "        for i = 1 to n inclusive increment num[find of i]", "        Max, sum, ss = int with Max = 0 and sum = 0 and ss = n", "        for i = 1 to k inclusive", "            set num[s[i]] to num[find of s[i]]", "            set Max to max of Max, num[s[i]]", "            decrement ss by num[s[i]]", "            increment sum by (num[s[i]]) * (num[s[i]] - 1) / 2", "        end of the block", "        increment sum by (ss + Max) * (ss + Max - 1) / 2", "        decrement sum by Max * (Max - 1) / 2 + m", "        print sum", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int f[1000];", "int find(int x) {", "    if (f[x] == x)", "        return x;", "    else", "        return find(f[x]);", "}", "void unionn(int a, int b) {", "    int x = find(a);", "    int y = find(b);", "    if (x != y) f[x] = y;", "}", "int main() {", "    int t;", "    int n, m, k, x, y;", "    int s[1000], num[1000];", "    while (cin >> n >> m >> k) {", "        memset(num, 0, sizeof(num));", "        for (int i = 1; i <= n; i++) f[i] = i;", "        for (int i = 1; i <= k; i++) cin >> s[i];", "        for (int i = 0; i < m; i++) {", "            cin >> x >> y;", "            unionn(x, y);", "        }", "        for (int i = 1; i <= n; i++) num[find(i)]++;", "        int Max = 0, sum = 0, ss = n;", "        for (int i = 1; i <= k; i++) {", "            num[s[i]] = num[find(s[i])];", "            Max = max(Max, num[s[i]]);", "            ss -= num[s[i]];", "            sum += (num[s[i]]) * (num[s[i]] - 1) / 2;", "        }", "        sum += (ss + Max) * (ss + Max - 1) / 2;", "        sum -= Max * (Max - 1) / 2 + m;", "        cout << sum << endl;", "    }", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["create int array num of size 1005", "make integer array r of size 1005", "declare fast taking in int x and returning int", "    if r[x] is equal to x, return x", "    return r[x] = find(r[x])", "end of the block", "declare setunion taking in ints x and y", "    create int rx = find(x)", "    make int ry = find(y)", "    if rx is not equal to ry, set r[rx] to ry", "end of the block", "define the main function", "    create ints n, m, and k", "    make int array gov of size 1005", "    make ints x and y", "    read n, m, and k and while they are truthy", "        set all contents of num to 0", "        for i = 0 to n, set r[i] to i", "        for i = 0 to k, read gov[i]", "        for i = 1 to m", "            read x and y", "            call setunion with arguments x and y", "        end of the block", "        for i = 1 to n, increment num[find(i)]", "        create int maxs = 0", "        make integer left = n", "        let int re = 0", "        for i = 1 to k", "            set num[gov[i]] to num[find(gov[i])", "            set maxs to max of maxs and num[gov[i]]", "            subtract num[gov[i]] from left", "            add (num[gov[i]] - 1) * num[gov[i]] / 2 to re", "        end of the block", "        set re to re + (left + maxs) * (left + maxs - 1) / 2", "        set re to re - maxs * (maxs - 1) / 2 + m", "        print re", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int num[1005];", "int r[1005];", "int find(int x) {", "    if (r[x] == x) return x;", "    return r[x] = find(r[x]);", "}", "void setunion(int x, int y) {", "    int rx = find(x);", "    int ry = find(y);", "    if (rx != ry) r[rx] = ry;", "}", "int main() {", "    int n, m, k;", "    int gov[1005];", "    int x, y;", "    while (cin >> n >> m >> k) {", "        memset(num, 0, sizeof(num));", "        for (int i = 0; i <= n; i++) { r[i] = i; }", "        for (int i = 1; i <= k; i++) { cin >> gov[i]; }", "        for (int i = 1; i <= m; i++) {", "            cin >> x >> y;", "            setunion(x, y);", "        }", "        for (int i = 1; i <= n; i++) { num[find(i)]++; }", "        int maxs = 0;", "        int left = n;", "        int re = 0;", "        for (int i = 1; i <= k; i++) {", "            num[gov[i]] = num[find(gov[i])];", "            maxs = max(maxs, num[gov[i]]);", "            left -= num[gov[i]];", "            re += (num[gov[i]] - 1) * num[gov[i]] / 2;", "        }", "        re += (left + maxs) * (left + maxs - 1) / 2;", "        re -= maxs * (maxs - 1) / 2 + m;", "        cout << re << endl;", "    }", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["edges=array of 1004 by 1004 int", "degree=array of 1004 int", "function dfs (get int index, int cap, pointer to int visited, pointer to int numedges, pointer to int numver, int n, return nothing)", "    visited[index]=1", "    for i=0 to n exclusive", "        if edges[index][i] is 1", "            if visited[i] is 0", "                add degree[i] to numedges[cap]", "                increment numver[cap]", "                dfs(i, cap, visited, numedges, numver, n)", "            end of the block", "        end of the block", "    end of the block", "end of the block", "define the main function", "    n,m,k=int", "    read n,m,k", "    cap=array of k int", "    for i=0 to k exclusive", "        read cap[i]", "        decrement cap[i]", "    end of the block", "    a,b=int", "    visited = array of n int", "    for i=0 to n exclusive", "        visited[i]=0", "        degree[i]=0", "    end of the block", "    for i=0 to m exclusive", "        read a,b", "        decrement a", "        decrement b", "        edges[a][b]=1", "        edges[b][a]=1", "        increment degree[a]", "        increment degree[b]", "    end of the block", "    numedges = array of k+1 int", "    numver = array of k+1 int", "    for i=0 to k-1 exclusive", "        numedges[i]=0", "        numver[i]=0", "    end of the block", "    count=0", "    for i=0 to k exclusive", "        dfs(cap[i], i, visited, numedges, numver, n)", "        add degree[cap[i]] to numedges[i]", "        increment numver[i]", "    end of the block", "    for i=0 to n exclusive", "        if visited[i] is 0", "            dfs(i, k, visited, numedges, numver, n)", "            add degree[i] to numedges[k]", "            increment numver[k]", "        end of the block", "    end of the block", "    maxm=0", "    maxindex=0", "    ans=0", "    for i=0 to k exclusive", "        if numver[i] > maxm", "            maxm=numver[i]", "            maxindex=i", "        end of the block", "    end of the block", "    for i=0 to k exclusive", "        if i is maxindex continue", "        xx=numver[i]*(numver[i]-1)", "        divide xx by 2", "        add (xx-numedges[i]/2) to ans", "    end of the block", "    xx=numver[maxindex]+numver[k]", "    x2=(xx*(xx-1))/2", "    subtract numedges[maxindex]/2 from x2", "    subtract numedges[k]/2 from x2", "    add x2 to ans", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int edges[1004][1004];", "int degree[1004];", "void dfs(int index, int cap, int *visited, int *numedges, int *numver, int n) {", "    visited[index] = 1;", "    for (int i = 0; i < n; i++) {", "        if (edges[index][i] == 1) {", "            if (visited[i] == 0) {", "                numedges[cap] += degree[i];", "                numver[cap]++;", "                dfs(i, cap, visited, numedges, numver, n);", "            }", "        }", "    }", "}", "int main() {", "    int n, m, k;", "    cin >> n >> m >> k;", "    int cap[k];", "    for (int i = 0; i < k; i++) {", "        cin >> cap[i];", "        cap[i]--;", "    }", "    int a, b;", "    int visited[n];", "    for (int i = 0; i < n; i++) {", "        visited[i] = 0;", "        degree[i] = 0;", "    }", "    for (int i = 0; i < m; i++) {", "        cin >> a >> b;", "        a--;", "        b--;", "        edges[a][b] = 1;", "        edges[b][a] = 1;", "        degree[a]++;", "        degree[b]++;", "    }", "    int numedges[k + 1];", "    int numver[k + 1];", "    for (int i = 0; i < k + 1; i++) {", "        numedges[i] = 0;", "        numver[i] = 0;", "    }", "    int count = 0;", "    for (int i = 0; i < k; i++) {", "        dfs(cap[i], i, visited, numedges, numver, n);", "        numedges[i] += degree[cap[i]];", "        numver[i] += 1;", "    }", "    for (int i = 0; i < n; i++) {", "        if (visited[i] == 0) {", "            dfs(i, k, visited, numedges, numver, n);", "            numedges[k] += degree[i];", "            numver[k]++;", "        }", "    }", "    int maxm = 0;", "    int maxindex = 0;", "    long long ans = 0;", "    for (int i = 0; i < k; i++) {", "        if (numver[i] > maxm) {", "            maxm = numver[i];", "            maxindex = i;", "        }", "    }", "    for (int i = 0; i < k; i++) {", "        if (i == maxindex) continue;", "        long long xx = numver[i] * (numver[i] - 1);", "        xx /= 2;", "        ans += (xx - numedges[i] / 2);", "    }", "    long long xx = numver[maxindex] + numver[k];", "    long long x2 = (xx * (xx - 1)) / 2;", "    x2 -= numedges[maxindex] / 2;", "    x2 -= numedges[k] / 2;", "    ans += x2;", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["fa = integer array of size 202002", "sum = integer array of size 202002", "c = integer array of size 202002", "in function max with arguments of integer a and integer b that returns an integer", "    if a > b", "        return a", "    else", "        return b", "end of the block", "in function findfa with arguments integer x that returns an integer", "    if fa[x] is x", "        return x", "    else", "        return the result of calling findfa with argument of fa[x]", "end of the block", "in function joint with argument integer x and integer y that returns nothing", "    rx = integer = the result of calling findfa with argument of x", "    ry = integer = the result of calling findfa with argument of y", "    if rx is not ry", "        fa[rx] = ry", "        sum[ry] = sum[ry] + sum[rx]", "    end of the block", "end of the block", "vis = boolean array of size 202002", "vec = integer vector", "define the main function", "    n, m, k = integer", "    read n, m, k", "    clear all elements of vec", "    for i = 0 to n inclusive", "        fa[i] = i", "        sum[i] = 1", "    end of the block", "    for i = 0 to k exclusive, then read c[i]", "    x, y = integers", "    for i = 0 to m exclusive", "        read x, y", "        call join with arguments of x and y", "    end of the block", "    set all elements of vis to 0", "    for i = 0 to k exclusive, vis[the result of calling findfa with argument c[i] = 1", "    mx = integer = -1", "    ans = long long = 0", "    for i = 1 to n inclusive", "        if fa[i] is i", "            if vis[i] is 1", "                mx = the bigger value between mx and sum[i]", "            else", "                push back the values of vec and insert a new element of sum[i] at the end of vec", "            ans = ans + sum[i] * (sum[i] - 1) / 2", "        end of the block", "    end of the block", "    sz = integer = size of vec", "    for i = 0 to sz exclusive", "        for j = i + 1 to sz exclusive, then ans = ans + vec[i] * vec[j]", "        ans = ans + vec[i] * mx", "    end of the block", "    ans = ans - m", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int fa[202002];", "int sum[202002];", "int c[202002];", "int max(int a, int b) {", "    if (a > b)", "        return a;", "    else", "        return b;", "}", "int findfa(int x) {", "    if (fa[x] == x)", "        return x;", "    else", "        return findfa(fa[x]);", "}", "void joint(int x, int y) {", "    int rx = findfa(x);", "    int ry = findfa(y);", "    if (rx != ry) {", "        fa[rx] = ry;", "        sum[ry] += sum[rx];", "    }", "}", "bool vis[202002];", "vector<int> vec;", "int main() {", "    int n, m, k;", "    cin >> n >> m >> k;", "    vec.clear();", "    for (int i = 0; i <= n; i++) {", "        fa[i] = i;", "        sum[i] = 1;", "    }", "    for (int i = 0; i < k; i++) cin >> c[i];", "    int x, y;", "    for (int i = 0; i < m; i++) {", "        cin >> x >> y;", "        joint(x, y);", "    }", "    memset(vis, 0, sizeof(vis));", "    for (int i = 0; i < k; i++) vis[findfa(c[i])] = 1;", "    int mx = -1;", "    long long ans = 0;", "    for (int i = 1; i <= n; i++) {", "        if (fa[i] == i) {", "            if (vis[i] == 1)", "                mx = max(mx, sum[i]);", "            else", "                vec.push_back(sum[i]);", "            ans += sum[i] * (sum[i] - 1) / 2;", "        }", "    }", "    int sz = vec.size();", "    for (int i = 0; i < sz; i++) {", "        for (int j = i + 1; j < sz; j++) { ans += vec[i] * vec[j]; }", "        ans += vec[i] * mx;", "    }", "    ans -= m;", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["create integer array dx of size 8 containing {0, 0, 1, 1, 1, -1, -1, -1}", "create int array dy of size 8 containing {1, -1, -1, 0, 1, -1, 0, 1}", "let integer vector v of size 1005", "make bool array vis of size 1005", "create int flag = 0 and cnt and int array dd of size 1005", "declare dfs taking in int s", "    set vis[s] to true", "    increment cnt", "    if dd[s] is truthy, set flag to 1", "    for i = 0 to size of v[s] exclusive", "        if vis[v[s][i]] is falsy, call dfs(v[s][i])", "    end of the block", "    end function", "end of the block", "define the main function", "    create ints n, m, k, a, and b", "    create long long ints maxx = 0, ans = 0, and cnt1 = 0", "    make long long vector vec", "    read n, m, and k", "    while k-- is truthy", "        read a", "        set dd[a] to 1", "    end of the block", "    create int ml = m", "    while m1-- is falsy", "        read a and b", "        append b to v[a]", "        append a to v[b]", "    end of the block", "    for i = 1 to n", "        if vis[i] is falsy", "            set cnt and flag to 0", "            call dfs with argument i", "            if flag is equal to 0", "                set cnt1 to cnt1 + cnt", "            else", "                set maxx to (cnt < maxx ? maxx : cnt)", "                append cnt to vec", "            end of the block", "        end of the block", "    end of the block", "    for i = 0 to size of vec exclusive", "        if vec[i] is equal to maxx", "            set cnt1 to cnt 1 + vec[i]", "            set ans to ans + (cnt1 * (cnt1 - 1)) / 2", "            increment maxx", "        else do", "            set ans to ans + (vec[i] * (vec[i] - 1)) / 2", "        end of the block", "    end of the block", "    print the result of (ans - m)", "    return to indicate successful execution", "end of the block"], "code_lines": ["int dx[8] = {0, 0, 1, 1, 1, -1, -1, -1};", "int dy[8] = {1, -1, -1, 0, 1, -1, 0, 1};", "vector<int> v[1005];", "bool vis[1005];", "int flag = 0, cnt, dd[1005];", "void dfs(int s) {", "    vis[s] = true;", "    cnt++;", "    if (dd[s]) flag = 1;", "    for (int i = 0; i < v[s].size(); i++) {", "        if (!vis[v[s][i]]) dfs(v[s][i]);", "    }", "    return;", "}", "int main() {", "    int n, m, k, a, b;", "    long long maxx = 0, ans = 0, cnt1 = 0;", "    vector<long long> vec;", "    cin >> n >> m >> k;", "    while (k--) {", "        cin >> a;", "        dd[a] = 1;", "    }", "    int m1 = m;", "    while (m1--) {", "        cin >> a >> b;", "        v[a].push_back(b);", "        v[b].push_back(a);", "    }", "    for (int i = 1; i <= n; i++) {", "        if (!vis[i]) {", "            cnt = 0, flag = 0;", "            dfs(i);", "            if (flag == 0)", "                cnt1 += cnt;", "            else {", "                maxx = (cnt < maxx ? maxx : cnt);", "                vec.push_back(cnt);", "            }", "        }", "    }", "    for (int i = 0; i < vec.size(); i++) {", "        if (vec[i] == maxx) {", "            cnt1 += vec[i];", "            ans += (cnt1 * (cnt1 - 1)) / 2;", "            maxx++;", "        } else {", "            ans += (vec[i] * (vec[i] - 1)) / 2;", "        }", "    }", "    cout << (ans - m) << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "744A", "pseudocode_lines": ["declare integer array father size 1005", "declare n, m, k as integers", "declare find with integer x as argument, returning integer", "    return x if father[x] is x, else let father[x] be run find with father[x] as argument", "end of the block", "declare integer array node size 1005", "declare integer array fathercnt size 1005", "declare integer cnt", "declare integer array isgro size 1005", "define the main function", "    set bytes from isgro to size of isgro to value 0", "    read n, m, k", "    declare integer gro", "    for j = 1 to n inclusive, let father[j] be j", "    for i = 0 to k exclusive", "        declare integer g", "        read g", "        let isgro[g] be 1", "        let gro be g", "    end of the block", "    for j = 1 to n inclusive, let fathercnt[j] be 1", "    for i = 0 to m exclusive", "        declare p, q as integers", "        read p and q", "        if isgro[p] is true", "            declare integer x", "            let x be result of run find(q)", "            if father[ run find(q) ] is not father[ run find(p) ]", "                let father[ run find(q) ] be father [ run find(p) ]", "                increment fathercnt[ run find(p) ] by fathercnt[x]", "                let fathercnt[x] be 0", "            end of the block", "        else if isgro[q] is true", "            declare integer x", "            let x be result of run find(p)", "            if father[ run find(p) ] is not father[ run find(q) ]", "                let father[ run find(p) ] be father [ run find(q) ]", "                increment fathercnt[ run find(q) ] by fathercnt[x]", "                let fathercnt[x] be 0", "            end of the block", "        else", "            declare integer x", "            if isgro[father[result of run find(p)]] is true", "                let x be result of run find(q)", "                if father[ run find(q) ] is not father[ run find(p) ]", "                    let father[ run find(q) ] be father [ run find(p) ]", "                    increment fathercnt[ run find(p) ] by fathercnt[x]", "                    let fathercnt[x] be 0", "                end of the block", "            else", "                let x be result of run find(p)", "                if father[ run find(p) ] is not father[ run find(q) ]", "                    let father[ run find(p) ] be father [ run find(q) ]", "                    increment fathercnt[ run find(q) ] by fathercnt[x]", "                    let fathercnt[x] be 0", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    declare integer maxfather = 0", "    declare integer strunity", "    for i = 1 to n inclusive", "        if fathercnt[i] is greater than maxfather", "            let maxfather be fathercnt[i]", "            let strunity be i", "        end of the block", "    end of the block", "    declare integer maxgro = 0", "    declare integer strgro = gro", "    for i = 1 to n inclusive", "        if isgro[i] and fathercnt[i] is greater than maxgro", "            let maxgro be fathercnt[i]", "            let strgro be i", "        end of the block", "    end of the block", "    for i = 1 to n inclusive", "        if fathercnt[i] is not 0", "            if isgro[run find(i)] is not 1", "                increment fathercnt[strgro] by fathercnt[i]", "                let fathercnt[i] be 0", "            end of the block", "        end of the block", "    end of the block", "    let cnt be 0", "    for i = 1 to n inclusive", "        if isgro[i] is true, increment cnt by fathercnt[i] * (fathercnt[i] - 1)) / 2", "    end of the block", "    print cnt - m, newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int father[1005];", "int n, m, k;", "int find(int x) {", "    return father[x] == x ? x : father[x] = find(father[x]);", "}", "int node[1005];", "int fathercnt[1005];", "int cnt;", "int isgro[1005];", "int main() {", "    memset(isgro, 0, sizeof(isgro));", "    cin >> n >> m >> k;", "    int gro;", "    for (int j = 1; j <= n; j++) { father[j] = j; }", "    for (int i = 0; i < k; i++) {", "        int g;", "        cin >> g;", "        isgro[g] = 1;", "        gro = g;", "    }", "    for (int j = 1; j <= n; j++) { fathercnt[j] = 1; }", "    for (int i = 0; i < m; i++) {", "        int p, q;", "        cin >> p >> q;", "        if (isgro[p]) {", "            int x;", "            x = find(q);", "            if (father[find(q)] != father[find(p)]) {", "                father[find(q)] = father[find(p)];", "                fathercnt[find(p)] += fathercnt[x];", "                fathercnt[x] = 0;", "            }", "        } else if (isgro[q]) {", "            int x;", "            x = find(p);", "            if (father[find(p)] != father[find(q)]) {", "                father[find(p)] = father[find(q)];", "                fathercnt[find(q)] += fathercnt[x];", "                fathercnt[x] = 0;", "            }", "        } else {", "            int x;", "            if (isgro[father[find(p)]]) {", "                x = find(q);", "                if (father[find(q)] != father[find(p)]) {", "                    father[find(q)] = father[find(p)];", "                    fathercnt[find(p)] += fathercnt[x];", "                    fathercnt[x] = 0;", "                }", "            } else {", "                x = find(p);", "                if (father[find(p)] != father[find(q)]) {", "                    father[find(p)] = father[find(q)];", "                    fathercnt[find(q)] += fathercnt[x];", "                    fathercnt[x] = 0;", "                }", "            }", "        }", "    }", "    int maxfather = 0;", "    int strunity;", "    for (int i = 1; i <= n; i++) {", "        if (fathercnt[i] > maxfather) {", "            maxfather = fathercnt[i];", "            strunity = i;", "        }", "    }", "    int maxgro = 0;", "    int strgro = gro;", "    for (int i = 1; i <= n; i++) {", "        if (isgro[i] && fathercnt[i] > maxgro) {", "            maxgro = fathercnt[i];", "            strgro = i;", "        }", "    }", "    for (int i = 1; i <= n; i++) {", "        if (fathercnt[i] != 0) {", "            if (isgro[find(i)] != 1) {", "                fathercnt[strgro] += fathercnt[i];", "                fathercnt[i] = 0;", "            }", "        }", "    }", "    cnt = 0;", "    for (int i = 1; i <= n; i++) {", "        if (isgro[i]) { cnt += (fathercnt[i] * (fathercnt[i] - 1)) / 2; }", "    }", "    cout << cnt - m << endl;", "    return 0;", "}"], "testcases": [[["4 1 2", "1 3", "1 2"], ["2"]], [["3 3 1", "2", "1 2", "1 3", "2 3"], ["0"]], [["10 3 2", "1 10", "1 2", "1 3", "4 5"], ["33"]], [["1 0 1", "1"], ["0"]], [["1000 0 1", "72"], ["499500"]], [["24 38 2", "4 13", "7 1", "24 1", "2 8", "17 2", "2 18", "22 2", "23 3", "5 9", "21 5", "6 7", "6 19", "6 20", "11 7", "7 20", "13 8", "16 8", "9 10", "14 9", "21 9", "12 10", "10 22", "23 10", "17 11", "11 24", "20 12", "13 16", "13 23", "15 14", "17 14", "14 20", "19 16", "17 20", "17 23", "18 22", "18 23", "22 19", "21 20", "23 24"], ["215"]], [["10 30 1", "4", "1 2", "3 1", "4 1", "1 6", "1 8", "10 1", "2 4", "2 7", "3 4", "3 5", "7 3", "3 9", "10 3", "5 4", "6 4", "7 4", "9 4", "10 4", "6 5", "5 8", "9 5", "10 5", "6 7", "9 6", "10 6", "7 8", "9 7", "10 7", "9 8", "10 8"], ["15"]], [["10 13 2", "5 10", "2 1", "1 4", "2 3", "2 8", "3 4", "7 3", "4 6", "8 4", "4 9", "6 7", "6 9", "10 6", "7 8"], ["23"]], [["10 10 3", "2 5 6", "1 3", "4 1", "4 3", "5 3", "3 9", "8 4", "9 4", "5 10", "8 7", "10 8"], ["18"]], [["10 5 3", "1 5 9", "1 3", "1 8", "2 3", "8 4", "5 7"], ["17"]], [["6 4 2", "1 4", "1 2", "2 3", "4 5", "5 6"], ["2"]], [["7 8 2", "1 4", "1 2", "2 3", "4 5", "4 6", "4 7", "5 6", "5 7", "6 7"], ["1"]], [["5 2 3", "1 3 4", "1 5", "2 4"], ["0"]], [["5 3 2", "1 2", "2 3", "2 4", "1 5"], ["1"]], [["9 5 2", "1 5", "1 2", "2 3", "3 4", "5 6", "6 7"], ["13"]], [["6 4 1", "1", "2 3", "3 4", "4 5", "5 6"], ["11"]], [["6 4 2", "1 5", "1 2", "2 3", "3 4", "5 6"], ["3"]], [["7 3 3", "1 5 6", "1 2", "1 3", "6 7"], ["4"]], [["5 2 2", "1 2", "1 3", "2 4"], ["2"]], [["11 7 2", "1 4", "1 2", "1 3", "4 5", "4 6", "5 6", "9 10", "1 11"], ["24"]], [["20 4 5", "1 3 9 10 20", "5 6", "1 2", "7 9", "4 10"], ["89"]]]}, {"problem_id": "21A", "pseudocode_lines": ["create constant integer N = 100 + 5", "create constant integer mod = 1000000000 + 7", "bool function ok with char argument a", "    if a is a letter character return 1", "    if a is a capital letter character return 1", "    if a is a digit return 1", "    if a is '_' return 1", "    return to indicate successful execution", "end of the block", "define the main function", "    declare array of characters of size N", "    read a + 1", "    create integer len with value = length of (a + 1)", "    set integer op to 1", "    set boolean flag to 1", "    integers cnt1 = 0, cnt2 = 0, ccnt = 0 and cnt3 = 0", "    for integer i = 1 to len and flag inclusive", "        if op is equal to 1", "            increase cnt1", "            if a[i] is '@'", "                decrement cnt1", "                set value of op to 2", "                go to the start of the loop", "            end of the block", "            if ok(a[i]) is false, set flag to 0", "            if cnt1 is greater than 16, set flag to 0", "        else if op is equal to 2", "            increment ccnt", "            if cnt1 = 0 or cnt1 > 16, set flag to 0", "            if a[i] is '.'", "                if cnt2 = 0 or cnt2 > 16, set flag to 0", "                set cnt2 to 0", "                go to the start of the loop", "            end of the block", "            if a[i] is '/'", "                decrement ccnt", "                op = 3", "                continue the loop", "            end of the block", "            if ok(a[i]) is false, set flag to 0", "            increase cnt2", "            if cnt2 is greater than 16, set flag to 0", "        else", "            if cnt2 = 0 or cnt2 is greater than 16, set flag to 0", "            if ccnt = 0 or ccnt is greater than 32, set flag to 0", "            if ok(a[i]) is false, set flag to 0", "            increase cnt3", "            if cnt3 is greater than 16, set flag to 0", "        end of the block", "    end of the block", "    if op is equal to 1, set flag to 0", "    if op = 2 and (cnt2 = 0 or cnt2 is greater than 16), set flag to 0", "    if op = 3 and (cnt3 = 0 or cnt3 is greater than 16), set flag to 0", "    if flag is true", "        print \"YES\" and a new line", "    else", "        print \"NO\" and a new line", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 100 + 5;", "const int mod = 1000000000 + 7;", "bool ok(char a) {", "    if (a >= 'a' && a <= 'z') return 1;", "    if (a >= 'A' && a <= 'Z') return 1;", "    if (a >= '0' && a <= '9') return 1;", "    if (a == '_') return 1;", "    return 0;", "}", "int main() {", "    char a[N];", "    cin >> a + 1;", "    int len = strlen(a + 1);", "    int op = 1;", "    bool flag = 1;", "    int cnt1 = 0, cnt2 = 0, ccnt = 0, cnt3 = 0;", "    for (int i = 1; i <= len && flag; i++) {", "        if (op == 1) {", "            cnt1++;", "            if (a[i] == '@') {", "                cnt1--;", "                op = 2;", "                continue;", "            }", "            if (!ok(a[i])) { flag = 0; }", "            if (cnt1 > 16) flag = 0;", "        } else if (op == 2) {", "            ccnt++;", "            if (cnt1 == 0 || cnt1 > 16) flag = 0;", "            if (a[i] == '.') {", "                if (cnt2 == 0 || cnt2 > 16) flag = 0;", "                cnt2 = 0;", "                continue;", "            }", "            if (a[i] == '/') {", "                ccnt--;", "                op = 3;", "                continue;", "            }", "            if (!ok(a[i])) { flag = 0; }", "            cnt2++;", "            if (cnt2 > 16) flag = 0;", "        } else {", "            if (cnt2 == 0 || cnt2 > 16) flag = 0;", "            if (ccnt == 0 || ccnt > 32) flag = 0;", "            if (!ok(a[i])) flag = 0;", "            cnt3++;", "            if (cnt3 > 16) flag = 0;", "        }", "    }", "    if (op == 1) flag = 0;", "    if (op == 2 && (cnt2 == 0 || cnt2 > 16)) flag = 0;", "    if (op == 3 && (cnt3 == 0 || cnt3 > 16)) flag = 0;", "    if (flag)", "        cout << \"YES\" << endl;", "    else", "        cout << \"NO\" << endl;", "    return 0;", "}"], "testcases": [[["mike@codeforces.com"], ["YES"]], [["john.smith@codeforces.ru/contest.icpc/12"], ["NO"]], [["test@test.ri/abacaba"], ["YES"]], [["@ops"], ["NO"]], [["this-is-the-test"], ["NO"]], [["mike@codeforces.commike@codeforces.com"], ["NO"]], [["oooop/oooop"], ["NO"]], [["w@S8/XU.5._R7fHq.@../e.WP!54Ey1L\u007f.9jv"], ["NO"]], [["lNC9D1L5U@.L!_!CcAOEEx.0z.aiW/S430sbQT"], ["NO"]], [["@/YTd.K1@lD"], ["NO"]], [["Fyi!d1l@.OesGopTnRn.81xdSb8q\u007f./MzuI"], ["NO"]], [["_TlPy65\u007fw/@.Vl@.8k"], ["NO"]], [["xpS@._s8.e0l\u007fJci/.LdiT"], ["NO"]], [["lGwo\u007f8.D2@.3"], ["NO"]], [["Ccz9T5rKZQuEerGo@6l."], ["NO"]], [["Y@5nh@8.9P.Bx5AaY.1g.Tc_MK7.g_..0."], ["NO"]], [["Q2/6y!SP9s\u007fG@7zIGr.Du_nR8."], ["NO"]], [["eWfLL@gW!BEJUxF\u007fh@dghf.d4.FiYp/2.Pr7a/5O6zXdAkikjCEDrb"], ["NO"]], [["8oI/\u007fa@Q"], ["NO"]], [["J@Y9Gz550l@\u007fPqVZdQ!u"], ["NO"]], [["VTE6aTTta@DHe4xeG@6.c2R.J.O7sndWEEW.9j@.l..3Bs"], ["NO"]], [["aeo2XkK@UX.nQJN!Tg..wGN5YOi68U.oP2Yl3/"], ["NO"]], [["m13zREg8LbPr@T2.Z9@g.9u.v.A..XNH/1/tloIceXydZf3"], ["NO"]], [["4@@..f3ZT./oUGZ@"], ["NO"]], [["G.rVAxwDx@a.PVSe!KtpX4tzs/0yQGzZCPJPJoda"], ["NO"]], [["SV9T5RR425Sl0b@kzj.XT.PFWc..ho/VE7gjf"], ["NO"]], [["bgko@1../xwSj_\u007fJ"], ["NO"]], [["n5ymLC.bE@ukio.im2../."], ["NO"]], [["zr.KB_6ZMSwI2GA5@R/4iP1ZKHpszW!YN/"], ["NO"]], [["@alK@pR"], ["NO"]], [["al_Y2I4IKp@A_N.\u007fruCw0VL/hRzJtx.S7sp/r!c.n9ffh"], ["NO"]], [["C1rE26_rTAVzLm@6@X5OGX.ibJ9./kkBEVlcU"], ["NO"]], [["feGSXP@eyUfr\u007f8.x4Re.JL.6B.r/fX_"], ["NO"]], [["Ht15T@50eo.E@."], ["NO"]], [["k9MITs_Ar.JL2RRs4@VRq.wCuJ.6..amF.fE4.5I.6fJ7gz7"], ["NO"]], [["Mi\u007fWPE8@fc./IViqq4T4PSUuMdhH"], ["NO"]], [["pxSCmv!NbMvz2@pTQ.t!.Ntz/QEh_sl"], ["NO"]], [["s@mH@RO\u007f_/iWD"], ["NO"]], [["UP51i49wX@pvx@2LWm8w/G4M3J./9L6Szy"], ["NO"]], [["xC_5Vx8NgF..\u007fln@X1.drRTX..1vx.Xb3of@/PQYPeq@_y8!h_iF"], ["NO"]], [["qG3@LKp"], ["YES"]], [["flTq1knyb@2!Mtfss"], ["NO"]], [["/pqi7WXQPJFM4q1@hxUyUy\u007f/_pWo0n"], ["NO"]], [["zXme@.Dq.TWBs.fB.M"], ["NO"]], [["o3EaAnc3K6@h"], ["YES"]], [["G/AZdVMTzRLV4Ucm@eQ!..pq!..tRTi5.Ejkqa/HGpFYk"], ["NO"]], [[".c_V@L.1v!AFAEk7glM\u007fq.ag8Sy8@0.Qm/OLKoJpZlac"], ["NO"]], [["WKxNIM79u\u007f@I.RM"], ["NO"]], [["POTjlYcxAZsbyZPDh@sPm.z6aVaO.H1wEUhD9YvROQFUk/M_jTHS_6!"], ["NO"]], [["pbRIiuA@KZ2hVed2fMikA.@ebd.tE2Y"], ["NO"]], [["OlS_OwxYhH@im.0A7o/juNlxB"], ["YES"]], [["xkjHHDRBEFwgNP@G9TGStEs2Lu.BJge3EBXw3c9EfE"], ["YES"]], [["bK@8X7tQO.pXBHJpDewD"], ["YES"]], [["kKUXy6@0WefbXz39ywP.Q3r7uF"], ["YES"]], [["SllbRLdZ6@.T.E3x.BE2nIv.5db_.38./zgVGNjpldr"], ["NO"]], [["4lBJkY8c097oa@ZYmVbtiyyYN.gbj"], ["YES"]], [["F@JX4.SI1/0EY3XmYatfY"], ["YES"]], [["oLo01@B77Pu.9R.vtAZG0.HQSunv0J."], ["NO"]], [["xLEctap0T@22U9W_fA/7iQeJGFu1lSgMZ"], ["YES"]], [["WYh@yUWfOQiF.gOK9k8aEa"], ["YES"]], [["BPxNVANhtEh@Oh_go."], ["NO"]], [["mGIY@cHRNC8GlJ/2pcl3LYxpi3PaKGs"], ["YES"]], [["x6yfn7BGwqWd@.N/UXC"], ["NO"]], [["cUIr@cP.eGQC2xJXvI1X7"], ["YES"]], [["MLZ6e1vgZ4hOI@ktWk.Ro.o6C4/i8cnKHT"], ["YES"]], [["XCJIa@jFaP.Eu28YaoT9Z.Epk.Z/4TBzLWf724zE1r"], ["YES"]], [["Cz1U1xjg6iW0U@.97HoVA.YG.Qd.eI.DCXxtibi6HG.GV/0sN"], ["NO"]], [["nrKbWV@P0irxQoRxDsNvG/69WxCwCsfB"], ["YES"]], [["yI1nRv3FbuhgaI@.Y9vKe.8oc.BLi.6JfYT/tT5d36"], ["NO"]], [["IGsma3L6YTJRrXS@1g.yR3mC.c.xoCns7Wo1.9C.Oe.5ebkR/_97Ltj3"], ["YES"]], [["Uu538LDu9Bye@Gu0W0P5a.b9zA9nSaNhzB_TQ2.z/qfi5CZrH"], ["YES"]], [["bdHl525me@XzR_iO23v.YFXbnHUybbgw.i/WVEhm"], ["YES"]], [["NQsZ0K@eE8VMB.w2nYtKImB.4nUF"], ["YES"]], [["186@E.MmBaKLj.WYpt4wPZkzv93"], ["YES"]], [["hmhYxkGtWYRJFtBU@Drg3L7WKujE.lU61Ljqxv./FJ4X"], ["NO"]], [["t1RIUz9l3FA15@tOL9.rv.NjhouD."], ["NO"]], [["_I4ytjyccT@q.WIc.Cqn"], ["YES"]], [["LwHHRYq@whOoq.e9b6i0xnoWBl7z.SGJiJe/iUij1x7"], ["YES"]], [["Yesx@9_KiJq2cBI6."], ["NO"]], [["Zu5VFUtSbIw@ner5e"], ["YES"]], [["test@test."], ["NO"]], [["test@.test"], ["NO"]], [["est.@test"], ["NO"]], [["test@test.ru/"], ["NO"]], [["asd@asd@"], ["NO"]], [["@"], ["NO"]], [["/"], ["NO"]], [["."], ["NO"]], [["mike@"], ["NO"]], [["@mike"], ["NO"]], [["@mail.ru"], ["NO"]], [["test.me"], ["NO"]], [["$@ru"], ["NO"]], [["testme@o.o.o.o.o/ooooo"], ["YES"]], [["oooop/oooop"], ["NO"]], [["mail.ru/a"], ["NO"]], [["mike@mail.ru/aaa"], ["YES"]], [["mike@mike.mike"], ["YES"]]]}, {"problem_id": "21A", "pseudocode_lines": ["boolean function l that takes character c as argument", "    return true if c is a letter", "    return true if c is a capital letter", "    return true if c is a digit", "    return true if c is an underscore", "    return false", "end of the block", "function un with string argument s", "    set value of int n to length s", "    if n is 0 or n > 16 return false", "    for i = 0 to n exclusive", "        if l(s at index i) is false return false", "    end of the block", "    return true", "end of the block", "function hn with string argument s", "    declare integers n = size of s, i, nw = 0", "    if n is 0 or n > 32 return false", "    appen character '.' to s", "    for i = 0 to n + 1 exclusive", "        if s[i] is character \".\"", "            if nw is equal to 0 or nw is greater than 16 return false", "            nw = 0", "        else", "            if l(s at index i) is false return false", "            increase nw", "        end of the block", "    end of the block", "    return true", "end of the block", "boolean function r with string argument s", "    return un(s)", "end of the block", "boolean function f with string argument s", "    int n = length of s, i, j", "    for i = 0 to n exclusive", "        if s at index i is \"@\" break the loop", "    end of the block", "    if i is equal to n return false", "    if un(substring of s from 0 to i) is false return false", "    for j = from i + 1 to n exclusive", "        if s[j] is \"/\" break the loop", "    end of the block", "    if hn(substring of s from i + 1 to j - i - 1) is false return false", "    if j is not equal to n and r(substring of s from 0 to j +1) is false return false", "    return true", "end of the block", "let s be string", "define the main function", "    read s", "    if f(s)", "        print \"YES\" and a new line", "    else", "        print \"NO\" and a new line", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["bool l(char c) {", "    if (c >= 'a' && c <= 'z') { return true; }", "    if (c >= 'A' && c <= 'Z') { return true; }", "    if (c >= '0' && c <= '9') { return true; }", "    if (c == '_') { return true; }", "    return false;", "}", "bool un(string s) {", "    int n = s.size();", "    if (n == 0 || n > 16) { return false; }", "    for (int i = 0; i < n; i++) {", "        if (!l(s[i])) { return false; }", "    }", "    return true;", "}", "bool hn(string s) {", "    int n = s.size(), i, nw = 0;", "    if (n == 0 || n > 32) { return false; }", "    s += '.';", "    for (i = 0; i < n + 1; i++) {", "        if (s[i] == '.') {", "            if (nw == 0 || nw > 16) { return false; }", "            nw = 0;", "        } else {", "            if (!l(s[i])) { return false; }", "            nw++;", "        }", "    }", "    return true;", "}", "bool r(string s) {", "    return un(s);", "}", "bool f(string s) {", "    int n = s.size(), i, j;", "    for (i = 0; i < n; i++) {", "        if (s[i] == '@') { break; }", "    }", "    if (i == n) { return false; }", "    if (!un(s.substr(0, i))) { return false; }", "    for (j = i + 1; j < n; j++) {", "        if (s[j] == '/') { break; }", "    }", "    if (!hn(s.substr(i + 1, j - i - 1))) { return false; }", "    if (j != n && !r(s.substr(j + 1))) { return false; }", "    return true;", "}", "string s;", "int main() {", "    cin >> s;", "    if (f(s)) {", "        cout << \"YES\" << endl;", "    } else {", "        cout << \"NO\" << endl;", "    }", "    return 0;", "}"], "testcases": [[["mike@codeforces.com"], ["YES"]], [["john.smith@codeforces.ru/contest.icpc/12"], ["NO"]], [["test@test.ri/abacaba"], ["YES"]], [["@ops"], ["NO"]], [["this-is-the-test"], ["NO"]], [["mike@codeforces.commike@codeforces.com"], ["NO"]], [["oooop/oooop"], ["NO"]], [["w@S8/XU.5._R7fHq.@../e.WP!54Ey1L\u007f.9jv"], ["NO"]], [["lNC9D1L5U@.L!_!CcAOEEx.0z.aiW/S430sbQT"], ["NO"]], [["@/YTd.K1@lD"], ["NO"]], [["Fyi!d1l@.OesGopTnRn.81xdSb8q\u007f./MzuI"], ["NO"]], [["_TlPy65\u007fw/@.Vl@.8k"], ["NO"]], [["xpS@._s8.e0l\u007fJci/.LdiT"], ["NO"]], [["lGwo\u007f8.D2@.3"], ["NO"]], [["Ccz9T5rKZQuEerGo@6l."], ["NO"]], [["Y@5nh@8.9P.Bx5AaY.1g.Tc_MK7.g_..0."], ["NO"]], [["Q2/6y!SP9s\u007fG@7zIGr.Du_nR8."], ["NO"]], [["eWfLL@gW!BEJUxF\u007fh@dghf.d4.FiYp/2.Pr7a/5O6zXdAkikjCEDrb"], ["NO"]], [["8oI/\u007fa@Q"], ["NO"]], [["J@Y9Gz550l@\u007fPqVZdQ!u"], ["NO"]], [["VTE6aTTta@DHe4xeG@6.c2R.J.O7sndWEEW.9j@.l..3Bs"], ["NO"]], [["aeo2XkK@UX.nQJN!Tg..wGN5YOi68U.oP2Yl3/"], ["NO"]], [["m13zREg8LbPr@T2.Z9@g.9u.v.A..XNH/1/tloIceXydZf3"], ["NO"]], [["4@@..f3ZT./oUGZ@"], ["NO"]], [["G.rVAxwDx@a.PVSe!KtpX4tzs/0yQGzZCPJPJoda"], ["NO"]], [["SV9T5RR425Sl0b@kzj.XT.PFWc..ho/VE7gjf"], ["NO"]], [["bgko@1../xwSj_\u007fJ"], ["NO"]], [["n5ymLC.bE@ukio.im2../."], ["NO"]], [["zr.KB_6ZMSwI2GA5@R/4iP1ZKHpszW!YN/"], ["NO"]], [["@alK@pR"], ["NO"]], [["al_Y2I4IKp@A_N.\u007fruCw0VL/hRzJtx.S7sp/r!c.n9ffh"], ["NO"]], [["C1rE26_rTAVzLm@6@X5OGX.ibJ9./kkBEVlcU"], ["NO"]], [["feGSXP@eyUfr\u007f8.x4Re.JL.6B.r/fX_"], ["NO"]], [["Ht15T@50eo.E@."], ["NO"]], [["k9MITs_Ar.JL2RRs4@VRq.wCuJ.6..amF.fE4.5I.6fJ7gz7"], ["NO"]], [["Mi\u007fWPE8@fc./IViqq4T4PSUuMdhH"], ["NO"]], [["pxSCmv!NbMvz2@pTQ.t!.Ntz/QEh_sl"], ["NO"]], [["s@mH@RO\u007f_/iWD"], ["NO"]], [["UP51i49wX@pvx@2LWm8w/G4M3J./9L6Szy"], ["NO"]], [["xC_5Vx8NgF..\u007fln@X1.drRTX..1vx.Xb3of@/PQYPeq@_y8!h_iF"], ["NO"]], [["qG3@LKp"], ["YES"]], [["flTq1knyb@2!Mtfss"], ["NO"]], [["/pqi7WXQPJFM4q1@hxUyUy\u007f/_pWo0n"], ["NO"]], [["zXme@.Dq.TWBs.fB.M"], ["NO"]], [["o3EaAnc3K6@h"], ["YES"]], [["G/AZdVMTzRLV4Ucm@eQ!..pq!..tRTi5.Ejkqa/HGpFYk"], ["NO"]], [[".c_V@L.1v!AFAEk7glM\u007fq.ag8Sy8@0.Qm/OLKoJpZlac"], ["NO"]], [["WKxNIM79u\u007f@I.RM"], ["NO"]], [["POTjlYcxAZsbyZPDh@sPm.z6aVaO.H1wEUhD9YvROQFUk/M_jTHS_6!"], ["NO"]], [["pbRIiuA@KZ2hVed2fMikA.@ebd.tE2Y"], ["NO"]], [["OlS_OwxYhH@im.0A7o/juNlxB"], ["YES"]], [["xkjHHDRBEFwgNP@G9TGStEs2Lu.BJge3EBXw3c9EfE"], ["YES"]], [["bK@8X7tQO.pXBHJpDewD"], ["YES"]], [["kKUXy6@0WefbXz39ywP.Q3r7uF"], ["YES"]], [["SllbRLdZ6@.T.E3x.BE2nIv.5db_.38./zgVGNjpldr"], ["NO"]], [["4lBJkY8c097oa@ZYmVbtiyyYN.gbj"], ["YES"]], [["F@JX4.SI1/0EY3XmYatfY"], ["YES"]], [["oLo01@B77Pu.9R.vtAZG0.HQSunv0J."], ["NO"]], [["xLEctap0T@22U9W_fA/7iQeJGFu1lSgMZ"], ["YES"]], [["WYh@yUWfOQiF.gOK9k8aEa"], ["YES"]], [["BPxNVANhtEh@Oh_go."], ["NO"]], [["mGIY@cHRNC8GlJ/2pcl3LYxpi3PaKGs"], ["YES"]], [["x6yfn7BGwqWd@.N/UXC"], ["NO"]], [["cUIr@cP.eGQC2xJXvI1X7"], ["YES"]], [["MLZ6e1vgZ4hOI@ktWk.Ro.o6C4/i8cnKHT"], ["YES"]], [["XCJIa@jFaP.Eu28YaoT9Z.Epk.Z/4TBzLWf724zE1r"], ["YES"]], [["Cz1U1xjg6iW0U@.97HoVA.YG.Qd.eI.DCXxtibi6HG.GV/0sN"], ["NO"]], [["nrKbWV@P0irxQoRxDsNvG/69WxCwCsfB"], ["YES"]], [["yI1nRv3FbuhgaI@.Y9vKe.8oc.BLi.6JfYT/tT5d36"], ["NO"]], [["IGsma3L6YTJRrXS@1g.yR3mC.c.xoCns7Wo1.9C.Oe.5ebkR/_97Ltj3"], ["YES"]], [["Uu538LDu9Bye@Gu0W0P5a.b9zA9nSaNhzB_TQ2.z/qfi5CZrH"], ["YES"]], [["bdHl525me@XzR_iO23v.YFXbnHUybbgw.i/WVEhm"], ["YES"]], [["NQsZ0K@eE8VMB.w2nYtKImB.4nUF"], ["YES"]], [["186@E.MmBaKLj.WYpt4wPZkzv93"], ["YES"]], [["hmhYxkGtWYRJFtBU@Drg3L7WKujE.lU61Ljqxv./FJ4X"], ["NO"]], [["t1RIUz9l3FA15@tOL9.rv.NjhouD."], ["NO"]], [["_I4ytjyccT@q.WIc.Cqn"], ["YES"]], [["LwHHRYq@whOoq.e9b6i0xnoWBl7z.SGJiJe/iUij1x7"], ["YES"]], [["Yesx@9_KiJq2cBI6."], ["NO"]], [["Zu5VFUtSbIw@ner5e"], ["YES"]], [["test@test."], ["NO"]], [["test@.test"], ["NO"]], [["est.@test"], ["NO"]], [["test@test.ru/"], ["NO"]], [["asd@asd@"], ["NO"]], [["@"], ["NO"]], [["/"], ["NO"]], [["."], ["NO"]], [["mike@"], ["NO"]], [["@mike"], ["NO"]], [["@mail.ru"], ["NO"]], [["test.me"], ["NO"]], [["$@ru"], ["NO"]], [["testme@o.o.o.o.o/ooooo"], ["YES"]], [["oooop/oooop"], ["NO"]], [["mail.ru/a"], ["NO"]], [["mike@mail.ru/aaa"], ["YES"]], [["mike@mike.mike"], ["YES"]]]}, {"problem_id": "21A", "pseudocode_lines": ["create constant integer N with N = 100 + 5", "create contant integer mod with mod = 1000000000 + 7", "declare boolean ok with character a as argument, returning boolean", "    if a is greater than or equal to 'a' and a is less than or equal to 'z', return 1 from function", "    if a is greater than or equal to 'A' and a is less than or equal to 'Z', return 1 from function", "    if a is greater than or equal to '0' and a is less than or equal to '9', return 1 from function", "    if a is '_', return 1 from function", "    return to indicate successful execution", "end of the block", "define the main function", "    create character array a with size N", "    read a + 1", "    create integer len with len = string length of (a + 1)", "    create integer op with op = 1", "    create boolean flag with flag = 1", "    create integers cnt1, cnt2, ccnt, cnt3, with cnt1 = 0, cnt2 = 0, ccnt = 0, cnt3 = 0", "    for i = 1 to len and flag inclusive", "        if op is 1", "            increment cnt1", "            if a[i] is '@'", "                decrement cnt1", "                set op to 2", "                break current loop iteration", "            end of the block", "            if result of run ok with a[i] as argument is false, set flag to 0", "            if cnt1 is greater than 16, set flag to 0", "        else if op is 2", "            increment ccnt", "            if cnt is 0 or cnt1 is greater than 16, set flag to 0", "            if a[i] is '.'", "                if cnt2 is 0 or cnt2 is greater than 16, set flag to 0", "                set cnt2 to 0", "                break current loop iteration", "            end of the block", "            if a[i] is '/'", "                decrement ccnt", "                set op to 3", "                break current loop iteration", "            end of the block", "            if result of run ok with a[i] as argument is false, set flag to 0", "            increment cnt2", "            if cnt2 is greater than 16, set flag to 0", "        else", "            if cnt2 is 0 or cnt2 is greater than 16, set flag to 0", "            if ccnt is 0 or ccnt is greater than 32, set flag to 0", "            if result of run ok with a[i] as argument is false, set flag to 0", "            increment cnt3", "            if cnt3 is greater than 16, set flag to 0", "        end of the block", "    end of the block", "    if op is 1, set flag to 0", "    if op is 2 and ( cnt2 is 0 or cnt2 is greater than 16 ), set flag to 0", "    if op is 3 and ( cnt3 is 0 or cnt3 is greater than 16 ), set flag to 0", "    if flag is true", "        print \"YES\" print newline", "    else", "        print \"NO\" print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 100 + 5;", "const int mod = 1000000000 + 7;", "bool ok(char a) {", "    if (a >= 'a' && a <= 'z') return 1;", "    if (a >= 'A' && a <= 'Z') return 1;", "    if (a >= '0' && a <= '9') return 1;", "    if (a == '_') return 1;", "    return 0;", "}", "int main() {", "    char a[N];", "    cin >> a + 1;", "    int len = strlen(a + 1);", "    int op = 1;", "    bool flag = 1;", "    int cnt1 = 0, cnt2 = 0, ccnt = 0, cnt3 = 0;", "    for (int i = 1; i <= len && flag; i++) {", "        if (op == 1) {", "            cnt1++;", "            if (a[i] == '@') {", "                cnt1--;", "                op = 2;", "                continue;", "            }", "            if (!ok(a[i])) { flag = 0; }", "            if (cnt1 > 16) flag = 0;", "        } else if (op == 2) {", "            ccnt++;", "            if (cnt1 == 0 || cnt1 > 16) flag = 0;", "            if (a[i] == '.') {", "                if (cnt2 == 0 || cnt2 > 16) flag = 0;", "                cnt2 = 0;", "                continue;", "            }", "            if (a[i] == '/') {", "                ccnt--;", "                op = 3;", "                continue;", "            }", "            if (!ok(a[i])) { flag = 0; }", "            cnt2++;", "            if (cnt2 > 16) flag = 0;", "        } else {", "            if (cnt2 == 0 || cnt2 > 16) flag = 0;", "            if (ccnt == 0 || ccnt > 32) flag = 0;", "            if (!ok(a[i])) flag = 0;", "            cnt3++;", "            if (cnt3 > 16) flag = 0;", "        }", "    }", "    if (op == 1) flag = 0;", "    if (op == 2 && (cnt2 == 0 || cnt2 > 16)) flag = 0;", "    if (op == 3 && (cnt3 == 0 || cnt3 > 16)) flag = 0;", "    if (flag)", "        cout << \"YES\" << endl;", "    else", "        cout << \"NO\" << endl;", "    return 0;", "}"], "testcases": [[["mike@codeforces.com"], ["YES"]], [["john.smith@codeforces.ru/contest.icpc/12"], ["NO"]], [["test@test.ri/abacaba"], ["YES"]], [["@ops"], ["NO"]], [["this-is-the-test"], ["NO"]], [["mike@codeforces.commike@codeforces.com"], ["NO"]], [["oooop/oooop"], ["NO"]], [["w@S8/XU.5._R7fHq.@../e.WP!54Ey1L\u007f.9jv"], ["NO"]], [["lNC9D1L5U@.L!_!CcAOEEx.0z.aiW/S430sbQT"], ["NO"]], [["@/YTd.K1@lD"], ["NO"]], [["Fyi!d1l@.OesGopTnRn.81xdSb8q\u007f./MzuI"], ["NO"]], [["_TlPy65\u007fw/@.Vl@.8k"], ["NO"]], [["xpS@._s8.e0l\u007fJci/.LdiT"], ["NO"]], [["lGwo\u007f8.D2@.3"], ["NO"]], [["Ccz9T5rKZQuEerGo@6l."], ["NO"]], [["Y@5nh@8.9P.Bx5AaY.1g.Tc_MK7.g_..0."], ["NO"]], [["Q2/6y!SP9s\u007fG@7zIGr.Du_nR8."], ["NO"]], [["eWfLL@gW!BEJUxF\u007fh@dghf.d4.FiYp/2.Pr7a/5O6zXdAkikjCEDrb"], ["NO"]], [["8oI/\u007fa@Q"], ["NO"]], [["J@Y9Gz550l@\u007fPqVZdQ!u"], ["NO"]], [["VTE6aTTta@DHe4xeG@6.c2R.J.O7sndWEEW.9j@.l..3Bs"], ["NO"]], [["aeo2XkK@UX.nQJN!Tg..wGN5YOi68U.oP2Yl3/"], ["NO"]], [["m13zREg8LbPr@T2.Z9@g.9u.v.A..XNH/1/tloIceXydZf3"], ["NO"]], [["4@@..f3ZT./oUGZ@"], ["NO"]], [["G.rVAxwDx@a.PVSe!KtpX4tzs/0yQGzZCPJPJoda"], ["NO"]], [["SV9T5RR425Sl0b@kzj.XT.PFWc..ho/VE7gjf"], ["NO"]], [["bgko@1../xwSj_\u007fJ"], ["NO"]], [["n5ymLC.bE@ukio.im2../."], ["NO"]], [["zr.KB_6ZMSwI2GA5@R/4iP1ZKHpszW!YN/"], ["NO"]], [["@alK@pR"], ["NO"]], [["al_Y2I4IKp@A_N.\u007fruCw0VL/hRzJtx.S7sp/r!c.n9ffh"], ["NO"]], [["C1rE26_rTAVzLm@6@X5OGX.ibJ9./kkBEVlcU"], ["NO"]], [["feGSXP@eyUfr\u007f8.x4Re.JL.6B.r/fX_"], ["NO"]], [["Ht15T@50eo.E@."], ["NO"]], [["k9MITs_Ar.JL2RRs4@VRq.wCuJ.6..amF.fE4.5I.6fJ7gz7"], ["NO"]], [["Mi\u007fWPE8@fc./IViqq4T4PSUuMdhH"], ["NO"]], [["pxSCmv!NbMvz2@pTQ.t!.Ntz/QEh_sl"], ["NO"]], [["s@mH@RO\u007f_/iWD"], ["NO"]], [["UP51i49wX@pvx@2LWm8w/G4M3J./9L6Szy"], ["NO"]], [["xC_5Vx8NgF..\u007fln@X1.drRTX..1vx.Xb3of@/PQYPeq@_y8!h_iF"], ["NO"]], [["qG3@LKp"], ["YES"]], [["flTq1knyb@2!Mtfss"], ["NO"]], [["/pqi7WXQPJFM4q1@hxUyUy\u007f/_pWo0n"], ["NO"]], [["zXme@.Dq.TWBs.fB.M"], ["NO"]], [["o3EaAnc3K6@h"], ["YES"]], [["G/AZdVMTzRLV4Ucm@eQ!..pq!..tRTi5.Ejkqa/HGpFYk"], ["NO"]], [[".c_V@L.1v!AFAEk7glM\u007fq.ag8Sy8@0.Qm/OLKoJpZlac"], ["NO"]], [["WKxNIM79u\u007f@I.RM"], ["NO"]], [["POTjlYcxAZsbyZPDh@sPm.z6aVaO.H1wEUhD9YvROQFUk/M_jTHS_6!"], ["NO"]], [["pbRIiuA@KZ2hVed2fMikA.@ebd.tE2Y"], ["NO"]], [["OlS_OwxYhH@im.0A7o/juNlxB"], ["YES"]], [["xkjHHDRBEFwgNP@G9TGStEs2Lu.BJge3EBXw3c9EfE"], ["YES"]], [["bK@8X7tQO.pXBHJpDewD"], ["YES"]], [["kKUXy6@0WefbXz39ywP.Q3r7uF"], ["YES"]], [["SllbRLdZ6@.T.E3x.BE2nIv.5db_.38./zgVGNjpldr"], ["NO"]], [["4lBJkY8c097oa@ZYmVbtiyyYN.gbj"], ["YES"]], [["F@JX4.SI1/0EY3XmYatfY"], ["YES"]], [["oLo01@B77Pu.9R.vtAZG0.HQSunv0J."], ["NO"]], [["xLEctap0T@22U9W_fA/7iQeJGFu1lSgMZ"], ["YES"]], [["WYh@yUWfOQiF.gOK9k8aEa"], ["YES"]], [["BPxNVANhtEh@Oh_go."], ["NO"]], [["mGIY@cHRNC8GlJ/2pcl3LYxpi3PaKGs"], ["YES"]], [["x6yfn7BGwqWd@.N/UXC"], ["NO"]], [["cUIr@cP.eGQC2xJXvI1X7"], ["YES"]], [["MLZ6e1vgZ4hOI@ktWk.Ro.o6C4/i8cnKHT"], ["YES"]], [["XCJIa@jFaP.Eu28YaoT9Z.Epk.Z/4TBzLWf724zE1r"], ["YES"]], [["Cz1U1xjg6iW0U@.97HoVA.YG.Qd.eI.DCXxtibi6HG.GV/0sN"], ["NO"]], [["nrKbWV@P0irxQoRxDsNvG/69WxCwCsfB"], ["YES"]], [["yI1nRv3FbuhgaI@.Y9vKe.8oc.BLi.6JfYT/tT5d36"], ["NO"]], [["IGsma3L6YTJRrXS@1g.yR3mC.c.xoCns7Wo1.9C.Oe.5ebkR/_97Ltj3"], ["YES"]], [["Uu538LDu9Bye@Gu0W0P5a.b9zA9nSaNhzB_TQ2.z/qfi5CZrH"], ["YES"]], [["bdHl525me@XzR_iO23v.YFXbnHUybbgw.i/WVEhm"], ["YES"]], [["NQsZ0K@eE8VMB.w2nYtKImB.4nUF"], ["YES"]], [["186@E.MmBaKLj.WYpt4wPZkzv93"], ["YES"]], [["hmhYxkGtWYRJFtBU@Drg3L7WKujE.lU61Ljqxv./FJ4X"], ["NO"]], [["t1RIUz9l3FA15@tOL9.rv.NjhouD."], ["NO"]], [["_I4ytjyccT@q.WIc.Cqn"], ["YES"]], [["LwHHRYq@whOoq.e9b6i0xnoWBl7z.SGJiJe/iUij1x7"], ["YES"]], [["Yesx@9_KiJq2cBI6."], ["NO"]], [["Zu5VFUtSbIw@ner5e"], ["YES"]], [["test@test."], ["NO"]], [["test@.test"], ["NO"]], [["est.@test"], ["NO"]], [["test@test.ru/"], ["NO"]], [["asd@asd@"], ["NO"]], [["@"], ["NO"]], [["/"], ["NO"]], [["."], ["NO"]], [["mike@"], ["NO"]], [["@mike"], ["NO"]], [["@mail.ru"], ["NO"]], [["test.me"], ["NO"]], [["$@ru"], ["NO"]], [["testme@o.o.o.o.o/ooooo"], ["YES"]], [["oooop/oooop"], ["NO"]], [["mail.ru/a"], ["NO"]], [["mike@mail.ru/aaa"], ["YES"]], [["mike@mike.mike"], ["YES"]]]}, {"problem_id": "21A", "pseudocode_lines": ["define the main function", "    create ints i, j, flag = 1, and dot = 0", "    let string ch", "    read ch", "    for i = 0 to length of ch exclusive", "        if ch[i] is equal to '@'", "            if i is greater than 16 or i is less than 1", "                set flag to 0", "                move to print", "            end of the block", "            break loop", "        else if ch[i] is greater than or equal to 'a' and ch[i] is less than or equal to 'z' or if ch[i] is greater than or equal to 'A' and ch[i] is less than or equal to 'Z'", "            continue to next loop", "        else if ch[i] is greater than or equal to '0' and ch[i] is less than or equal to '9' and if ch[i] is equal to '_'", "            continue to next loop iteration", "        else", "            set flag to 0", "            go to print", "        end of the block", "    end of the block", "identify dot", "    for j = i + 1 to length of ch exclusive", "        if ch[j] is equal to '.'", "            if j - 1 is greater than 17 or j - i is less than 2", "                set flag to 0", "                go to print", "            end of the block", "            set i to j", "        else if ch[j] is greater than or equal to 'a' and ch[j] is less than or equal to 'z' or if ch[j] is greater than or equal to 'A' and ch[j] is less than or equal to 'Z'", "            continue to next loop", "        else if ch[j] is greater than or equal to '0' and ch[j] is less than or equal to '9' or if ch[j] is equal to '_'", "            continue to next loop", "        else if ch[j] is equal to '/'", "            if j - 1 is greater than 17 or j - i is less than 2", "                set flag to 0", "                go to print", "            end of the block", "            set i to j", "        otherwise", "            set flag to 0", "            move to print", "        end of the block", "    end of the block", "    if j - i is greater than 17 or j - i is less than 2, set flag to 0", "identify print", "    print \"YES\\n\" if flag is truthy or \"NO\\n\" if not", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int i, j, flag = 1, dot = 0;", "    string ch;", "    cin >> ch;", "    for (i = 0; i < ch.length(); i++) {", "        if (ch[i] == '@') {", "            if (i > 16 || i < 1) {", "                flag = 0;", "                goto print;", "            }", "            break;", "        } else if ((ch[i] >= 'a' && ch[i] <= 'z') || (ch[i] >= 'A' && ch[i] <= 'Z'))", "            continue;", "        else if ((ch[i] >= '0' && ch[i] <= '9') || (ch[i] == '_'))", "            continue;", "        else {", "            flag = 0;", "            goto print;", "        }", "    }", "dot:", "    for (j = i + 1; j < ch.length(); j++) {", "        if (ch[j] == '.') {", "            if (j - i > 17 || j - i < 2) {", "                flag = 0;", "                goto print;", "            }", "            i = j;", "        } else if ((ch[j] >= 'a' && ch[j] <= 'z') || (ch[j] >= 'A' && ch[j] <= 'Z'))", "            continue;", "        else if ((ch[j] >= '0' && ch[j] <= '9') || (ch[j] == '_'))", "            continue;", "        else if (ch[j] == '/') {", "            if (j - i > 17 || j - i < 2) {", "                flag = 0;", "                goto print;", "            }", "            i = j;", "        } else {", "            flag = 0;", "            goto print;", "        }", "    }", "    if (j - i > 17 || j - i < 2) flag = 0;", "print:", "    (flag) ? (cout << \"YES\\n\") : (cout << \"NO\\n\");", "    return 0;", "}"], "testcases": [[["mike@codeforces.com"], ["YES"]], [["john.smith@codeforces.ru/contest.icpc/12"], ["NO"]], [["test@test.ri/abacaba"], ["YES"]], [["@ops"], ["NO"]], [["this-is-the-test"], ["NO"]], [["mike@codeforces.commike@codeforces.com"], ["NO"]], [["oooop/oooop"], ["NO"]], [["w@S8/XU.5._R7fHq.@../e.WP!54Ey1L\u007f.9jv"], ["NO"]], [["lNC9D1L5U@.L!_!CcAOEEx.0z.aiW/S430sbQT"], ["NO"]], [["@/YTd.K1@lD"], ["NO"]], [["Fyi!d1l@.OesGopTnRn.81xdSb8q\u007f./MzuI"], ["NO"]], [["_TlPy65\u007fw/@.Vl@.8k"], ["NO"]], [["xpS@._s8.e0l\u007fJci/.LdiT"], ["NO"]], [["lGwo\u007f8.D2@.3"], ["NO"]], [["Ccz9T5rKZQuEerGo@6l."], ["NO"]], [["Y@5nh@8.9P.Bx5AaY.1g.Tc_MK7.g_..0."], ["NO"]], [["Q2/6y!SP9s\u007fG@7zIGr.Du_nR8."], ["NO"]], [["eWfLL@gW!BEJUxF\u007fh@dghf.d4.FiYp/2.Pr7a/5O6zXdAkikjCEDrb"], ["NO"]], [["8oI/\u007fa@Q"], ["NO"]], [["J@Y9Gz550l@\u007fPqVZdQ!u"], ["NO"]], [["VTE6aTTta@DHe4xeG@6.c2R.J.O7sndWEEW.9j@.l..3Bs"], ["NO"]], [["aeo2XkK@UX.nQJN!Tg..wGN5YOi68U.oP2Yl3/"], ["NO"]], [["m13zREg8LbPr@T2.Z9@g.9u.v.A..XNH/1/tloIceXydZf3"], ["NO"]], [["4@@..f3ZT./oUGZ@"], ["NO"]], [["G.rVAxwDx@a.PVSe!KtpX4tzs/0yQGzZCPJPJoda"], ["NO"]], [["SV9T5RR425Sl0b@kzj.XT.PFWc..ho/VE7gjf"], ["NO"]], [["bgko@1../xwSj_\u007fJ"], ["NO"]], [["n5ymLC.bE@ukio.im2../."], ["NO"]], [["zr.KB_6ZMSwI2GA5@R/4iP1ZKHpszW!YN/"], ["NO"]], [["@alK@pR"], ["NO"]], [["al_Y2I4IKp@A_N.\u007fruCw0VL/hRzJtx.S7sp/r!c.n9ffh"], ["NO"]], [["C1rE26_rTAVzLm@6@X5OGX.ibJ9./kkBEVlcU"], ["NO"]], [["feGSXP@eyUfr\u007f8.x4Re.JL.6B.r/fX_"], ["NO"]], [["Ht15T@50eo.E@."], ["NO"]], [["k9MITs_Ar.JL2RRs4@VRq.wCuJ.6..amF.fE4.5I.6fJ7gz7"], ["NO"]], [["Mi\u007fWPE8@fc./IViqq4T4PSUuMdhH"], ["NO"]], [["pxSCmv!NbMvz2@pTQ.t!.Ntz/QEh_sl"], ["NO"]], [["s@mH@RO\u007f_/iWD"], ["NO"]], [["UP51i49wX@pvx@2LWm8w/G4M3J./9L6Szy"], ["NO"]], [["xC_5Vx8NgF..\u007fln@X1.drRTX..1vx.Xb3of@/PQYPeq@_y8!h_iF"], ["NO"]], [["qG3@LKp"], ["YES"]], [["flTq1knyb@2!Mtfss"], ["NO"]], [["/pqi7WXQPJFM4q1@hxUyUy\u007f/_pWo0n"], ["NO"]], [["zXme@.Dq.TWBs.fB.M"], ["NO"]], [["o3EaAnc3K6@h"], ["YES"]], [["G/AZdVMTzRLV4Ucm@eQ!..pq!..tRTi5.Ejkqa/HGpFYk"], ["NO"]], [[".c_V@L.1v!AFAEk7glM\u007fq.ag8Sy8@0.Qm/OLKoJpZlac"], ["NO"]], [["WKxNIM79u\u007f@I.RM"], ["NO"]], [["POTjlYcxAZsbyZPDh@sPm.z6aVaO.H1wEUhD9YvROQFUk/M_jTHS_6!"], ["NO"]], [["pbRIiuA@KZ2hVed2fMikA.@ebd.tE2Y"], ["NO"]], [["OlS_OwxYhH@im.0A7o/juNlxB"], ["YES"]], [["xkjHHDRBEFwgNP@G9TGStEs2Lu.BJge3EBXw3c9EfE"], ["YES"]], [["bK@8X7tQO.pXBHJpDewD"], ["YES"]], [["kKUXy6@0WefbXz39ywP.Q3r7uF"], ["YES"]], [["SllbRLdZ6@.T.E3x.BE2nIv.5db_.38./zgVGNjpldr"], ["NO"]], [["4lBJkY8c097oa@ZYmVbtiyyYN.gbj"], ["YES"]], [["F@JX4.SI1/0EY3XmYatfY"], ["YES"]], [["oLo01@B77Pu.9R.vtAZG0.HQSunv0J."], ["NO"]], [["xLEctap0T@22U9W_fA/7iQeJGFu1lSgMZ"], ["YES"]], [["WYh@yUWfOQiF.gOK9k8aEa"], ["YES"]], [["BPxNVANhtEh@Oh_go."], ["NO"]], [["mGIY@cHRNC8GlJ/2pcl3LYxpi3PaKGs"], ["YES"]], [["x6yfn7BGwqWd@.N/UXC"], ["NO"]], [["cUIr@cP.eGQC2xJXvI1X7"], ["YES"]], [["MLZ6e1vgZ4hOI@ktWk.Ro.o6C4/i8cnKHT"], ["YES"]], [["XCJIa@jFaP.Eu28YaoT9Z.Epk.Z/4TBzLWf724zE1r"], ["YES"]], [["Cz1U1xjg6iW0U@.97HoVA.YG.Qd.eI.DCXxtibi6HG.GV/0sN"], ["NO"]], [["nrKbWV@P0irxQoRxDsNvG/69WxCwCsfB"], ["YES"]], [["yI1nRv3FbuhgaI@.Y9vKe.8oc.BLi.6JfYT/tT5d36"], ["NO"]], [["IGsma3L6YTJRrXS@1g.yR3mC.c.xoCns7Wo1.9C.Oe.5ebkR/_97Ltj3"], ["YES"]], [["Uu538LDu9Bye@Gu0W0P5a.b9zA9nSaNhzB_TQ2.z/qfi5CZrH"], ["YES"]], [["bdHl525me@XzR_iO23v.YFXbnHUybbgw.i/WVEhm"], ["YES"]], [["NQsZ0K@eE8VMB.w2nYtKImB.4nUF"], ["YES"]], [["186@E.MmBaKLj.WYpt4wPZkzv93"], ["YES"]], [["hmhYxkGtWYRJFtBU@Drg3L7WKujE.lU61Ljqxv./FJ4X"], ["NO"]], [["t1RIUz9l3FA15@tOL9.rv.NjhouD."], ["NO"]], [["_I4ytjyccT@q.WIc.Cqn"], ["YES"]], [["LwHHRYq@whOoq.e9b6i0xnoWBl7z.SGJiJe/iUij1x7"], ["YES"]], [["Yesx@9_KiJq2cBI6."], ["NO"]], [["Zu5VFUtSbIw@ner5e"], ["YES"]], [["test@test."], ["NO"]], [["test@.test"], ["NO"]], [["est.@test"], ["NO"]], [["test@test.ru/"], ["NO"]], [["asd@asd@"], ["NO"]], [["@"], ["NO"]], [["/"], ["NO"]], [["."], ["NO"]], [["mike@"], ["NO"]], [["@mike"], ["NO"]], [["@mail.ru"], ["NO"]], [["test.me"], ["NO"]], [["$@ru"], ["NO"]], [["testme@o.o.o.o.o/ooooo"], ["YES"]], [["oooop/oooop"], ["NO"]], [["mail.ru/a"], ["NO"]], [["mike@mail.ru/aaa"], ["YES"]], [["mike@mike.mike"], ["YES"]]]}, {"problem_id": "21A", "pseudocode_lines": ["declare myCompare with constant pair address's i, j, from string to integer", "    return second element of i is less than second element of j", "end of the block", "create string s", "declare check with no arguments, returning integer", "    create integers x, y, 0, with x = 0, y = 0, flag = 0", "    for i = 0 to size of s", "        if flag is 0", "            if s[i] is '@'", "                if i - x is greater than 16 or i - x is less than 1 or i + 1 is size of s, return 0 from function", "                set x to i + 1", "                set y to i + 1", "                set flag to 1", "            else if s[i] is alphanumeric or s[i] is digit or s[i] is '_'", "                break current loop iteration", "            else if s[i] is not alphanumeric or s[i] is not digit or s[i] is not '_'", "                return to indicate successful execution", "            end of the block", "        else if flag is 1", "            if s[i] is '/'", "                if i - x is greater than 32 or i - x is less than 1 or i + 1 is size of s or s[i-1] is '.', return 0 from function", "                set x to i + 1", "                set flag to 2", "            else if s[i] is '.'", "                if i - y is greater than 16 or i - y is less than 1 or i + 1 is size of s, return 0 from function", "                set y to i + 1", "            else if s[i] is alphanumeric or s[i] is digit or s[i] is '.' or s[i] is '_'", "                if i + 1 is size of s", "                    if i - x + 1 is greater than 32 or i - x + 1 is less than 1, return 0 from function", "                    if i - y + 1 is greater than 16 or i - y + 1 is less than 1, return 0 from function", "                end of the block", "                break current loop iteration", "            else if s[i] is not alphanumeric or s[i] is not digit or s[i] is not '.' or s[i] is not '_'", "                return to indicate successful execution", "            end of the block", "        else", "            if s[i] is '_' and i + 1 is size of s, return 0 from function", "            if s[i] is alphanumeric or s[i] is digit or s[i] is '_'", "                if i + 1 is size of s", "                    if i - x + 1 is greater than 16 or i - x + 1 is less than 1, return 0 from function", "                end of the block", "                break current loop iteration", "            end of the block", "            if s[i] is not alphanumeric or s[i] is not digit or s[i] is not '_', return 0 from function", "        end of the block", "    end of the block", "    if flag is greater than 0", "        return 1 from function", "    else", "        return to indicate successful execution", "end of the block", "define the main function", "    read s", "    print \"YES\" if result of run check is true, else \"NO\" print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["bool myCompare(const pair<string, int> &i, const pair<string, int> &j) {", "    return i.second < j.second;", "}", "string s;", "int check() {", "    int x = 0, y = 0, flag = 0;", "    for (int i = 0; i < s.size(); i++) {", "        if (flag == 0) {", "            if (s[i] == '@') {", "                if ((i - x) > 16 || (i - x) < 1 || (i + 1 == s.size())) return 0;", "                x = i + 1;", "                y = i + 1;", "                flag = 1;", "            } else if (isalpha(s[i]) || isdigit(s[i]) || s[i] == '_') {", "                continue;", "            } else if (!isalpha(s[i]) || !isdigit(s[i]) || s[i] != '_') {", "                return 0;", "            }", "        } else if (flag == 1) {", "            if (s[i] == '/') {", "                if ((i - x) > 32 || (i - x) < 1 || (i + 1 == s.size()) || s[i - 1] == '.') return 0;", "                x = i + 1;", "                flag = 2;", "            } else if (s[i] == '.') {", "                if ((i - y) > 16 || (i - y) < 1 || (i + 1 == s.size())) return 0;", "                y = i + 1;", "            } else if (isalpha(s[i]) || isdigit(s[i]) || s[i] == '.' || s[i] == '_') {", "                if (i + 1 == s.size()) {", "                    if ((i - x + 1) > 32 || (i - x + 1) < 1) return 0;", "                    if ((i - y + 1) > 16 || (i - y + 1) < 1) return 0;", "                }", "                continue;", "            } else if (!isalpha(s[i]) || !isdigit(s[i]) || s[i] != '.' || s[i] != '_') {", "                return 0;", "            }", "        } else {", "            if (s[i] == '_' && i + 1 == s.size()) return 0;", "            if (isalpha(s[i]) || isdigit(s[i]) || s[i] == '_') {", "                if (i + 1 == s.size()) {", "                    if ((i - x + 1) > 16 || (i - x + 1) < 1) return 0;", "                }", "                continue;", "            }", "            if (!isalpha(s[i]) || !isdigit(s[i]) || s[i] != '_') { return 0; }", "        }", "    }", "    if (flag > 0)", "        return 1;", "    else", "        return 0;", "}", "int main() {", "    cin >> s;", "    cout << (check() ? \"YES\" : \"NO\") << endl;", "    return 0;", "}"], "testcases": [[["mike@codeforces.com"], ["YES"]], [["john.smith@codeforces.ru/contest.icpc/12"], ["NO"]], [["test@test.ri/abacaba"], ["YES"]], [["@ops"], ["NO"]], [["this-is-the-test"], ["NO"]], [["mike@codeforces.commike@codeforces.com"], ["NO"]], [["oooop/oooop"], ["NO"]], [["w@S8/XU.5._R7fHq.@../e.WP!54Ey1L\u007f.9jv"], ["NO"]], [["lNC9D1L5U@.L!_!CcAOEEx.0z.aiW/S430sbQT"], ["NO"]], [["@/YTd.K1@lD"], ["NO"]], [["Fyi!d1l@.OesGopTnRn.81xdSb8q\u007f./MzuI"], ["NO"]], [["_TlPy65\u007fw/@.Vl@.8k"], ["NO"]], [["xpS@._s8.e0l\u007fJci/.LdiT"], ["NO"]], [["lGwo\u007f8.D2@.3"], ["NO"]], [["Ccz9T5rKZQuEerGo@6l."], ["NO"]], [["Y@5nh@8.9P.Bx5AaY.1g.Tc_MK7.g_..0."], ["NO"]], [["Q2/6y!SP9s\u007fG@7zIGr.Du_nR8."], ["NO"]], [["eWfLL@gW!BEJUxF\u007fh@dghf.d4.FiYp/2.Pr7a/5O6zXdAkikjCEDrb"], ["NO"]], [["8oI/\u007fa@Q"], ["NO"]], [["J@Y9Gz550l@\u007fPqVZdQ!u"], ["NO"]], [["VTE6aTTta@DHe4xeG@6.c2R.J.O7sndWEEW.9j@.l..3Bs"], ["NO"]], [["aeo2XkK@UX.nQJN!Tg..wGN5YOi68U.oP2Yl3/"], ["NO"]], [["m13zREg8LbPr@T2.Z9@g.9u.v.A..XNH/1/tloIceXydZf3"], ["NO"]], [["4@@..f3ZT./oUGZ@"], ["NO"]], [["G.rVAxwDx@a.PVSe!KtpX4tzs/0yQGzZCPJPJoda"], ["NO"]], [["SV9T5RR425Sl0b@kzj.XT.PFWc..ho/VE7gjf"], ["NO"]], [["bgko@1../xwSj_\u007fJ"], ["NO"]], [["n5ymLC.bE@ukio.im2../."], ["NO"]], [["zr.KB_6ZMSwI2GA5@R/4iP1ZKHpszW!YN/"], ["NO"]], [["@alK@pR"], ["NO"]], [["al_Y2I4IKp@A_N.\u007fruCw0VL/hRzJtx.S7sp/r!c.n9ffh"], ["NO"]], [["C1rE26_rTAVzLm@6@X5OGX.ibJ9./kkBEVlcU"], ["NO"]], [["feGSXP@eyUfr\u007f8.x4Re.JL.6B.r/fX_"], ["NO"]], [["Ht15T@50eo.E@."], ["NO"]], [["k9MITs_Ar.JL2RRs4@VRq.wCuJ.6..amF.fE4.5I.6fJ7gz7"], ["NO"]], [["Mi\u007fWPE8@fc./IViqq4T4PSUuMdhH"], ["NO"]], [["pxSCmv!NbMvz2@pTQ.t!.Ntz/QEh_sl"], ["NO"]], [["s@mH@RO\u007f_/iWD"], ["NO"]], [["UP51i49wX@pvx@2LWm8w/G4M3J./9L6Szy"], ["NO"]], [["xC_5Vx8NgF..\u007fln@X1.drRTX..1vx.Xb3of@/PQYPeq@_y8!h_iF"], ["NO"]], [["qG3@LKp"], ["YES"]], [["flTq1knyb@2!Mtfss"], ["NO"]], [["/pqi7WXQPJFM4q1@hxUyUy\u007f/_pWo0n"], ["NO"]], [["zXme@.Dq.TWBs.fB.M"], ["NO"]], [["o3EaAnc3K6@h"], ["YES"]], [["G/AZdVMTzRLV4Ucm@eQ!..pq!..tRTi5.Ejkqa/HGpFYk"], ["NO"]], [[".c_V@L.1v!AFAEk7glM\u007fq.ag8Sy8@0.Qm/OLKoJpZlac"], ["NO"]], [["WKxNIM79u\u007f@I.RM"], ["NO"]], [["POTjlYcxAZsbyZPDh@sPm.z6aVaO.H1wEUhD9YvROQFUk/M_jTHS_6!"], ["NO"]], [["pbRIiuA@KZ2hVed2fMikA.@ebd.tE2Y"], ["NO"]], [["OlS_OwxYhH@im.0A7o/juNlxB"], ["YES"]], [["xkjHHDRBEFwgNP@G9TGStEs2Lu.BJge3EBXw3c9EfE"], ["YES"]], [["bK@8X7tQO.pXBHJpDewD"], ["YES"]], [["kKUXy6@0WefbXz39ywP.Q3r7uF"], ["YES"]], [["SllbRLdZ6@.T.E3x.BE2nIv.5db_.38./zgVGNjpldr"], ["NO"]], [["4lBJkY8c097oa@ZYmVbtiyyYN.gbj"], ["YES"]], [["F@JX4.SI1/0EY3XmYatfY"], ["YES"]], [["oLo01@B77Pu.9R.vtAZG0.HQSunv0J."], ["NO"]], [["xLEctap0T@22U9W_fA/7iQeJGFu1lSgMZ"], ["YES"]], [["WYh@yUWfOQiF.gOK9k8aEa"], ["YES"]], [["BPxNVANhtEh@Oh_go."], ["NO"]], [["mGIY@cHRNC8GlJ/2pcl3LYxpi3PaKGs"], ["YES"]], [["x6yfn7BGwqWd@.N/UXC"], ["NO"]], [["cUIr@cP.eGQC2xJXvI1X7"], ["YES"]], [["MLZ6e1vgZ4hOI@ktWk.Ro.o6C4/i8cnKHT"], ["YES"]], [["XCJIa@jFaP.Eu28YaoT9Z.Epk.Z/4TBzLWf724zE1r"], ["YES"]], [["Cz1U1xjg6iW0U@.97HoVA.YG.Qd.eI.DCXxtibi6HG.GV/0sN"], ["NO"]], [["nrKbWV@P0irxQoRxDsNvG/69WxCwCsfB"], ["YES"]], [["yI1nRv3FbuhgaI@.Y9vKe.8oc.BLi.6JfYT/tT5d36"], ["NO"]], [["IGsma3L6YTJRrXS@1g.yR3mC.c.xoCns7Wo1.9C.Oe.5ebkR/_97Ltj3"], ["YES"]], [["Uu538LDu9Bye@Gu0W0P5a.b9zA9nSaNhzB_TQ2.z/qfi5CZrH"], ["YES"]], [["bdHl525me@XzR_iO23v.YFXbnHUybbgw.i/WVEhm"], ["YES"]], [["NQsZ0K@eE8VMB.w2nYtKImB.4nUF"], ["YES"]], [["186@E.MmBaKLj.WYpt4wPZkzv93"], ["YES"]], [["hmhYxkGtWYRJFtBU@Drg3L7WKujE.lU61Ljqxv./FJ4X"], ["NO"]], [["t1RIUz9l3FA15@tOL9.rv.NjhouD."], ["NO"]], [["_I4ytjyccT@q.WIc.Cqn"], ["YES"]], [["LwHHRYq@whOoq.e9b6i0xnoWBl7z.SGJiJe/iUij1x7"], ["YES"]], [["Yesx@9_KiJq2cBI6."], ["NO"]], [["Zu5VFUtSbIw@ner5e"], ["YES"]], [["test@test."], ["NO"]], [["test@.test"], ["NO"]], [["est.@test"], ["NO"]], [["test@test.ru/"], ["NO"]], [["asd@asd@"], ["NO"]], [["@"], ["NO"]], [["/"], ["NO"]], [["."], ["NO"]], [["mike@"], ["NO"]], [["@mike"], ["NO"]], [["@mail.ru"], ["NO"]], [["test.me"], ["NO"]], [["$@ru"], ["NO"]], [["testme@o.o.o.o.o/ooooo"], ["YES"]], [["oooop/oooop"], ["NO"]], [["mail.ru/a"], ["NO"]], [["mike@mail.ru/aaa"], ["YES"]], [["mike@mike.mike"], ["YES"]]]}, {"problem_id": "213A", "pseudocode_lines": ["n=int", "computer and vis=array of 201 int, check=array of 3 by 201 int", "vv=array of 201 vector of int", "function bfs (get int k and now, return int)", "    q=queue of int", "    ans=n", "    for i=1 to n inclusive", "        if check[k][i] is 0 push i into q", "    end of the block", "    while q is not empty", "        fill vis with 0", "        while q is not empty", "            head = first item in q", "            pop q", "            if vis[head] is n", "                push head into q", "                break", "            end of the block", "            increment vis[head]", "            if computer[head] is not now", "                push head into q", "                continue", "            end of the block", "            for i=0 to size of vv[head] exclusive", "                decrement check[k][vv[head][i]]", "                if check[k][vv[head][i]] is 0 push vv[head][i] into q", "            end of the block", "        end of the block", "        now = 1 if now is 3 else now+1", "        if q is not empty increment ans", "    end of the block", "    return ans", "end of the block", "define the main function", "    while read n", "        fill check with 0", "        for i=1 to n inclusive clear vv[i]", "        for i=1 to n inclusive read compute[i]", "        for i=1 to n inclusive", "            ki=int", "            read ki", "            for j=1 to ki inclusive", "                aj=int", "                read aj", "                add i to end of vv[aj]", "                increment check[0][i],check[1][i],check[2][i]", "            end of the block", "        end of the block", "        ans=3f3f3f3f in exadecimal", "        for i=1 to 3 exclusive ans=min(ans, bfs(i-1,i))", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n;", "int computer[201], check[3][201], vis[201];", "vector<int> vv[201];", "int bfs(int k, int now) {", "    queue<int> q;", "    int ans = n;", "    for (int i = 1; i <= n; i++) {", "        if (check[k][i] == 0) q.push(i);", "    }", "    while (!q.empty()) {", "        memset(vis, 0, sizeof(vis));", "        while (!q.empty()) {", "            int head = q.front();", "            q.pop();", "            if (vis[head] == n) {", "                q.push(head);", "                break;", "            }", "            vis[head]++;", "            if (computer[head] != now) {", "                q.push(head);", "                continue;", "            }", "            for (int i = 0; i < vv[head].size(); i++) {", "                check[k][vv[head][i]]--;", "                if (check[k][vv[head][i]] == 0) q.push(vv[head][i]);", "            }", "        }", "        now = (now == 3 ? 1 : now + 1);", "        if (!q.empty()) ans++;", "    }", "    return ans;", "}", "int main() {", "    while (cin >> n) {", "        memset(check, 0, sizeof(check));", "        for (int i = 1; i <= n; i++) vv[i].clear();", "        for (int i = 1; i <= n; i++) cin >> computer[i];", "        for (int i = 1; i <= n; i++) {", "            int ki;", "            cin >> ki;", "            for (int j = 1; j <= ki; j++) {", "                int aj;", "                cin >> aj;", "                vv[aj].push_back(i);", "                check[0][i]++, check[1][i]++, check[2][i]++;", "            }", "        }", "        int ans = 0x3f3f3f3f;", "        for (int i = 1; i <= 3; i++) ans = min(ans, bfs(i - 1, i));", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["let n be an int", "let computer be an integer array of length 201, check an integer matrix of size 3x201, vis an integer array of length 201", "let vv be an integer vector of size 201", "in int function bsf that takes int num, int st", "    let q be a queue of int", "    let ans = n be an int", "    for i = 1 to n inclusive", "        if che[num][i] is 0, push i in q", "    end of the block", "    while q is not empty", "        reset vis to all 0", "        while q is not empty", "            let head = int = result of calling front on q", "            pop q", "            if vis at head is n", "                push head in q", "                exit loop", "            end of the block", "            increment vis[head]", "            if computer at head is not st", "                push head in q", "                next iteration", "            end of the block", "            for i = 0 to size of vv[head] exclusive", "                let v = vv[head][i] be an int", "                decrement check[num][v]", "                if check[num][v] is 0 then push v in q", "            end of the block", "        end of the block", "        set st to 1 if st is 3 else set st to st + 1", "        if q is not empty then increment ans", "    end of the block", "    return ans", "end of the block", "define the main function", "    while reading n", "        reset check to all 0", "        clear n elements of vv[i]", "        read n elements of computer", "        for i = 1 to n inclusive", "            let ki = integer", "            read ki", "            for j = 1 to ki inclusive", "                let aj be an integer", "                read aj", "                add i to the end of vv[aj]", "                increment check[0][i]++, check[1][i]++, check[2][i]++", "            end of the block", "        end of the block", "        let ans be an int = 0x3f3f3f3f", "        for i = 1 to 3 inclusive, set ans to the minimum between ans and bfs of i - 1 and i", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n;", "int computer[201], check[3][201], vis[201];", "vector<int> vv[201];", "int bfs(int num, int st) {", "    queue<int> q;", "    int ans = n;", "    for (int i = 1; i <= n; i++) {", "        if (check[num][i] == 0) q.push(i);", "    }", "    while (!q.empty()) {", "        memset(vis, 0, sizeof(vis));", "        while (!q.empty()) {", "            int head = q.front();", "            q.pop();", "            if (vis[head] == n) {", "                q.push(head);", "                break;", "            }", "            vis[head]++;", "            if (computer[head] != st) {", "                q.push(head);", "                continue;", "            }", "            for (int i = 0; i < vv[head].size(); i++) {", "                int v = vv[head][i];", "                check[num][v]--;", "                if (check[num][v] == 0) q.push(v);", "            }", "        }", "        st = (st == 3 ? 1 : st + 1);", "        if (!q.empty()) ans++;", "    }", "    return ans;", "}", "int main() {", "    while (cin >> n) {", "        memset(check, 0, sizeof(check));", "        for (int i = 1; i <= n; i++) vv[i].clear();", "        for (int i = 1; i <= n; i++) cin >> computer[i];", "        for (int i = 1; i <= n; i++) {", "            int ki;", "            cin >> ki;", "            for (int j = 1; j <= ki; j++) {", "                int aj;", "                cin >> aj;", "                vv[aj].push_back(i);", "                check[0][i]++, check[1][i]++, check[2][i]++;", "            }", "        }", "        int ans = 0x3f3f3f3f;", "        for (int i = 1; i <= 3; i++) ans = min(ans, bfs(i - 1, i));", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["declare int N and an arrays of ints a and c with 200 elements", "declare an array of int vectors called edges with 200 elements", "int function simulate with int argument s", "    set first sizeof(c) bytes at the pointer c to 0", "    for i = 0 to N exclusive", "        for j = 0 to length of edges[i] exclusive, increment c[edges[i][j]]", "    end of the block", "    q is a new array of int queues with 3 elements", "    for integer i = 0 to N exclusive", "        if c[i] is false, push i into q[a[i]]", "    create integer poped = 0", "    declare int variable ret = -1", "    while poped < N", "        while q[s] is not empty", "            declare int variable f = front element of q[s]", "            remove front element from q[s]", "            increment poped by one", "            for i = 0 to length of edges[f] exclusive", "                create int next = edges[f][i]", "                decrement c[next], if c[next] != 0, push next into q[a[next]]", "            end of the block", "        end of the block", "        assign (s + 1) % 3 to s", "        increment ret by one", "    end of the block", "    return ret", "end of the block", "define the main function", "    read N and loop further", "        for i = 0 to N exclusive", "        for integer i = int to N exclusive", "            read input to a[i]", "            a[i] = a[i] modulo 3", "        end of the block", "        for integer i = 0 to N exclusive", "            declare ints k and t", "            read k", "            for j = 0 to k exclusive", "                read input to t", "                push i into edges[t - 1]", "            end of the block", "        end of the block", "        create integer ans = 1000000000", "        for integer i = 0 to 3 exclusive, set ans to min(ans, simulate(i))", "        print ans + N", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int N, a[200], c[200];", "vector<int> edges[200];", "int simulate(int s) {", "    memset(c, 0, sizeof(c));", "    for (int i = int(0); i < int(N); i++) {", "        for (int j = int(0); j < int(edges[i].size()); j++) c[edges[i][j]]++;", "    }", "    queue<int> q[3];", "    for (int i = int(0); i < int(N); i++)", "        if (!c[i]) q[a[i]].push(i);", "    int poped = 0;", "    int ret = -1;", "    while (poped < N) {", "        while (!q[s].empty()) {", "            int f = q[s].front();", "            q[s].pop();", "            poped++;", "            for (int i = int(0); i < int(edges[f].size()); i++) {", "                int next = edges[f][i];", "                if (!--c[next]) { q[a[next]].push(next); }", "            }", "        }", "        s = (s + 1) % 3;", "        ret++;", "    }", "    return ret;", "}", "int main() {", "    while (cin >> N) {", "        for (int i = int(0); i < int(N); i++) edges[i].clear();", "        for (int i = int(0); i < int(N); i++) {", "            cin >> a[i];", "            a[i] %= 3;", "        }", "        for (int i = int(0); i < int(N); i++) {", "            int k, t;", "            cin >> k;", "            for (int j = int(0); j < int(k); j++) {", "                cin >> t;", "                edges[t - 1].push_back(i);", "            }", "        }", "        int ans = 1000000000;", "        for (int i = int(0); i < int(3); i++) ans = min(ans, simulate(i));", "        cout << ans + N << endl;", "    }", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["create const int N = 205", "declare integer variable n and arrays of integers in, tin and a with size N", "declare vector of integers e", "bfs is an int function with int argument k", "    Q is a queue of integers with 5 elements", "    for integer i = 1 to n inclusive", "        if in[i] is false, push i into Q[a[i]]", "    for i = 1 to n inclusive, change tin[i] to in[i]", "    declare int step = -1", "    while any of Q[1], Q[2] or Q[3] is not empty", "        increment step by one", "        while Q[k] is not empty", "            declare integer variable u = front element of Q[k]", "            remove front element from Q[k]", "            increment step", "            for i from 0 to length of e[u] exclusive", "                declare int v = e[u][i]", "                decrement tin[v] by one", "                if tin[v] is false, push v into Q[a[v]]", "            end of the block", "        end of the block", "        if k = 1", "            assign 2 to k", "        else if k = 2", "            assign 3 to k", "        else if k = 3", "            assign 1 to k", "    end of the block", "    if step != -1, return step", "    return to indicate successful execution", "end of the block", "define the main function", "    read n", "    for i = 1 to n inclusive, read a[i]", "    for integers i = 1, m and x, while i <= n, incrementing i", "        read input to m", "        change in[i] to m", "        decrement m and loop further, while m is not 0", "            read x", "            push i into e[x]", "        end of the block", "    end of the block", "    declare integer variable ans = 0x3f3f3f3f", "    for i = 1 to 3 inclusive, set ans to min of ans and bfs(i)", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 205;", "int in[N], tin[N], n, a[N];", "vector<int> e[N];", "int bfs(int k) {", "    queue<int> Q[5];", "    for (int i = 1; i <= n; i++)", "        if (!in[i]) Q[a[i]].push(i);", "    for (int i = 1; i <= n; i++) tin[i] = in[i];", "    int step = -1;", "    while (!Q[1].empty() || !Q[2].empty() || !Q[3].empty()) {", "        step++;", "        while (!Q[k].empty()) {", "            int u = Q[k].front();", "            Q[k].pop();", "            step++;", "            for (int i = 0; i < e[u].size(); i++) {", "                int v = e[u][i];", "                tin[v]--;", "                if (!tin[v]) Q[a[v]].push(v);", "            }", "        }", "        if (k == 1)", "            k = 2;", "        else if (k == 2)", "            k = 3;", "        else if (k == 3)", "            k = 1;", "    }", "    if (step != -1) return step;", "    return 0;", "}", "int main() {", "    cin >> n;", "    for (int i = 1; i <= n; i++) cin >> a[i];", "    for (int i = 1, m, x; i <= n; i++) {", "        cin >> m;", "        in[i] = m;", "        while (m--) {", "            cin >> x;", "            e[x].push_back(i);", "        }", "    }", "    int ans = 0x3f3f3f3f;", "    for (int i = 1; i <= 3; i++) ans = min(ans, bfs(i));", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["let n be an int", "let vv be an int vector of size 210", "let computer, in, bk, temp be integer vectors of size 210 each", "in int function bfs which takes int st", "    let q be an int queue", "    let ans = n = integer", "    for i = 1 to n inclusive", "        if in at i is 0 then push i into q", "    end of the block", "    while q isn't empty", "        reset all bk to 0", "        while q isn't empty", "            head = front of q = integer", "            pop q", "            if bk at head is 5", "                push head in q", "                exit loop", "            end of the block", "            increment bk at head", "            if computer at head is not st", "                push head into q", "                next iteration", "            end of the block", "            let up be an integer = the size of vv at head", "            for i = 0 to up exclusive", "                let the integer v be vv[head][i]", "                decrement in at v", "                if in at v is 0 then push v into q", "            end of the block", "        end of the block", "        set st = 1 if st is 3 else increment st", "        if q isn't empty then increment ans", "    end of the block", "    return ans", "end of the block", "define the main function", "    while reading n", "        reset all in to 0", "        clear vv form 1 to n inclusive", "        read computer from 1 to n inclusive", "        for i = 1 to n inclusive", "            let ki be an int", "            read ki", "            for j = 1 to ki inclusive", "                declare int aj", "                read aj", "                add i to the end of vv[aj]", "                increment in at i", "            end of the block", "        end of the block", "        let ans be an integer = 0x3f3f3f3f", "        for i = 1 to n inclusive, set temp at i to in at i", "        for i = 1 to 3 inclusive", "            for j = 1 to n inclusive", "            set ans to the minimum between ans and bfs of i", "        end of the block", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n;", "vector<int> vv[210];", "int computer[210], in[210], bk[210], temp[210];", "int bfs(int st) {", "    queue<int> q;", "    int ans = n;", "    for (int i = 1; i <= n; i++) {", "        if (in[i] == 0) q.push(i);", "    }", "    while (!q.empty()) {", "        memset(bk, 0, sizeof(bk));", "        while (!q.empty()) {", "            int head = q.front();", "            q.pop();", "            if (bk[head] == 5) {", "                q.push(head);", "                break;", "            }", "            bk[head]++;", "            if (computer[head] != st) {", "                q.push(head);", "                continue;", "            }", "            int up = vv[head].size();", "            for (int i = 0; i < up; i++) {", "                int v = vv[head][i];", "                in[v]--;", "                if (in[v] == 0) q.push(v);", "            }", "        }", "        st = (st == 3 ? 1 : st + 1);", "        if (!q.empty()) ans++;", "    }", "    return ans;", "}", "int main() {", "    while (cin >> n) {", "        memset(in, 0, sizeof(in));", "        for (int i = 1; i <= n; i++) vv[i].clear();", "        for (int i = 1; i <= n; i++) cin >> computer[i];", "        for (int i = 1; i <= n; i++) {", "            int ki;", "            cin >> ki;", "            for (int j = 1; j <= ki; j++) {", "                int aj;", "                cin >> aj;", "                vv[aj].push_back(i);", "                in[i]++;", "            }", "        }", "        int ans = 0x3f3f3f3f;", "        for (int i = 1; i <= n; i++) temp[i] = in[i];", "        for (int i = 1; i <= 3; i++) {", "            for (int j = 1; j <= n; j++) in[j] = temp[j];", "            ans = min(ans, bfs(i));", "        }", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["mod = 10^9+7", "function fast_pow (get int a and b, return int)", "    res=a, ret=1", "    while b>0", "        if b modulo 2 ret=(ret*res) modulo mod", "        res=(res*res) modulo mod", "        divide b by 2", "    end of the block", "    return ret", "end of the block", "n=int", "m=int", "c=array of 200 int", "g=array of 200 by 200 int", "define the main function", "    read n", "    for i=0 to n exclusive", "        read c[i]", "        decrement c[i]", "    end of the block", "    for i=0 to n exclusive", "        k=int", "        read k", "        for j=0 to k exclusive", "            u=int", "            read u", "            decrement u", "            g[u][i]=1", "        end of the block", "    end of the block", "    ans=100*n", "    for start=0 to 3 exclusive", "        m=0", "        ok=array of 200 bool", "        fill ok with 0", "        cur=start", "        res=n", "        while m not equal n", "            while true", "                kpyto=false", "                for i=0 to n exclusive", "                    if ok[i] or c[i] != cur continue", "                    win=true", "                    for j=0 to n exclusive", "                        if g[j][j] and not ok[j]", "                            win=false", "                            break", "                        end of the block", "                    end of the block", "                    if win", "                        kpyto=true", "                        increment m", "                        ok[i]=true", "                    end of the block", "                end of the block", "                if not kpyto break", "            end of the block", "            if m is n break", "            cur=(cur+1) modulo 3", "            increment res", "        end of the block", "        ans=min(res, ans)", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int mod = 1e9 + 7;", "int fast_pow(int a, int b) {", "    int res = a, ret = 1;", "    while (b > 0) {", "        if (b % 2) ret = (ret * res) % mod;", "        res = (res * res) % mod;", "        b /= 2;", "    }", "    return ret;", "}", "int n;", "int m;", "int c[200];", "int g[200][200];", "int main() {", "    cin >> n;", "    for (int i = 0; i < n; ++i) {", "        cin >> c[i];", "        c[i]--;", "    }", "    for (int i = 0; i < n; ++i) {", "        int k;", "        cin >> k;", "        for (int j = 0; j < k; ++j) {", "            int u;", "            cin >> u;", "            u--;", "            g[u][i] = 1;", "        }", "    }", "    int ans = 100 * n;", "    for (int start = 0; start < 3; ++start) {", "        m = 0;", "        bool ok[200];", "        memset(ok, 0, sizeof(ok));", "        int cur = start;", "        int res = n;", "        while (m != n) {", "            while (1) {", "                bool kpyto = false;", "                for (int i = 0; i < n; ++i) {", "                    if (ok[i] || c[i] != cur) continue;", "                    bool win = true;", "                    for (int j = 0; j < n; ++j) {", "                        if (g[j][i] && (!ok[j])) {", "                            win = false;", "                            break;", "                        }", "                    }", "                    if (win) {", "                        kpyto = true;", "                        m++;", "                        ok[i] = true;", "                    }", "                }", "                if (!kpyto) break;", "            }", "            if (m == n) break;", "            cur = (cur + 1) % 3;", "            res++;", "        }", "        ans = min(res, ans);", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["tu = int vector array of size 1005", "a, cnt, checks = int array of size 1005 each and n = int", "in function check taking an int x and returning an in", "    i, k = int", "    sum = int with sum = -1", "    qua = int queue array of size 5", "    for i = 1 to n inclusive", "        if cnt[i] is 0 then push i to qua[a[i]]", "    end of the block", "    loop infinitely", "        if size of qua[1] or size of qua[2] or size of qua[3] is 0 break", "        loop while qua[x] is not empty", "            increment sum", "            set k to front of qua[x]", "            pop qua[x]", "            for i = 0 to size of tu[k]", "                xx = int with xx = tu[k][i]", "                decrement cnt[xx]", "                if cnt[xx] is 0 push xx to qua[a[xx]]", "            end of the block", "        end of the block", "        if x is 1", "            set x to 2", "        else if x is 2", "            set x to 3", "        else if x is 3", "            set x to 1", "        increment sum", "    end of the block", "    if sum is -1", "        return to indicate successful execution", "    else", "        return sum", "end of the block", "define the main function", "    i = int", "    ans, T, x = int", "    read n", "    set all values of a to 0", "    set all values of tu to 0", "    set all values of cnt to 0", "    for i = 1 to n inclusive read a[i]", "    for i = 1 to n inclusive", "        read T", "        loop T times", "            read x", "            append i to tu[x]", "            increment checks[i]", "        end of the block", "    end of the block", "    set ans to 1 bitshift right by 30", "    j = int", "    for i = 1 to 3 inclusive", "        for j = 1 to n inclusive set cnt[j] to checks[j]", "        set ans to min of ans and check of i", "    end of the block", "    set ans", "end of the block"], "code_lines": ["vector<int> tu[1005];", "int a[1005], cnt[1005], n, checks[1005];", "int check(int x) {", "    int i, k;", "    int sum = -1;", "    queue<int> qua[5];", "    for (i = 1; i <= n; i++) {", "        if (cnt[i] == 0) { qua[a[i]].push(i); }", "    }", "    for (;;) {", "        if (qua[1].size() == 0 && qua[2].size() == 0 && qua[3].size() == 0) break;", "        while (!qua[x].empty()) {", "            sum++;", "            k = qua[x].front();", "            qua[x].pop();", "            for (i = 0; i < tu[k].size(); i++) {", "                int xx = tu[k][i];", "                cnt[xx]--;", "                if (cnt[xx] == 0) qua[a[xx]].push(xx);", "            }", "        }", "        if (x == 1)", "            x = 2;", "        else if (x == 2)", "            x = 3;", "        else if (x == 3)", "            x = 1;", "        sum++;", "    }", "    if (sum == -1)", "        return 0;", "    else", "        return sum;", "}", "int main() {", "    int i;", "    int ans, T, x;", "    cin >> n;", "    memset(a, 0, sizeof(a));", "    memset(tu, 0, sizeof(tu));", "    memset(cnt, 0, sizeof(cnt));", "    for (i = 1; i <= n; i++) { cin >> a[i]; }", "    for (i = 1; i <= n; i++) {", "        cin >> T;", "        while (T--) {", "            cin >> x;", "            tu[x].push_back(i);", "            checks[i]++;", "        }", "    }", "    ans = 1 << 30;", "    int j;", "    for (i = 1; i <= 3; i++) {", "        for (j = 1; j <= n; j++) { cnt[j] = checks[j]; }", "        ans = min(ans, check(i));", "    }", "    cout << ans << endl;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["N = const integer with N = 2e2 + 5", "n, c, vis = integers with c, vis = array of size N", "ned, a = vector of integers array of size N", "in the function solve that takes integer x and returns integer", "    set all contents of vis to 0", "    res, cnt, flag = integers with res = 0, cnt = 0, flag = 0", "    while cnt < n", "        mk = bool with mk = true", "        while mk", "            mk = false", "            for i = 0 to a[x].size() exclusive", "                id = integer with id = a[x][i], tot = 0", "                if vis[id], continue next iteration", "                for j = 0 to ned[id].size() exclusive", "                    if vis[ned[id][j]], increment tot", "                if tot is ned[id].size()", "                    increment res and cnt", "                    vis[id] = 1", "                    flag = 0", "                    mk = true", "                end of the block", "            end of the block", "        end of the block", "        if cnt is n, return res", "        increment x", "        if x > 3, x = 1", "        increment res, flag", "        if flag < -4, return 2e9", "    end of the block", "end of the block", "define the main function", "    read n", "    for i = 1 to n, read c[i], a[c[i]].push_back(i)", "    for i = 1 to n", "        k = integer", "        read k", "        for j = 0 to k exclusive", "            x = integer", "            read x", "            append x in ned[i]", "        end of the block", "    end of the block", "    res = integer with res = 2e9", "    for i = 1 to 3, res = min(res, solve(i))", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 2e2 + 5;", "int n, c[N], vis[N];", "vector<int> ned[N], a[N];", "int solve(int x) {", "    memset(vis, 0, sizeof(vis));", "    int res = 0, cnt = 0, flag = 0;", "    while (cnt < n) {", "        bool mk = true;", "        while (mk) {", "            mk = false;", "            for (int i = 0; i < a[x].size(); i++) {", "                int id = a[x][i], tot = 0;", "                if (vis[id]) continue;", "                for (int j = 0; j < ned[id].size(); j++)", "                    if (vis[ned[id][j]]) tot++;", "                if (tot == ned[id].size()) {", "                    res++, cnt++;", "                    vis[id] = 1;", "                    flag = 0;", "                    mk = true;", "                }", "            }", "        }", "        if (cnt == n) return res;", "        x++;", "        if (x > 3) x = 1;", "        res++, flag--;", "        if (flag < -4) return 2e9;", "    }", "}", "int main() {", "    cin >> n;", "    for (int i = 1; i <= n; i++) cin >> c[i], a[c[i]].push_back(i);", "    for (int i = 1; i <= n; i++) {", "        int k;", "        cin >> k;", "        for (int j = 0; j < k; j++) {", "            int x;", "            cin >> x;", "            ned[i].push_back(x);", "        }", "    }", "    int res = 2e9;", "    for (int i = 1; i <= 3; i++) res = min(res, solve(i));", "    cout << res << '\\n';", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["function desperate_optimization (get precision as int)", "    use normal notation", "    show decimal point", "    set precision digits", "end of the block", "vec=vector of 250 int", "q=array of 3 queue of int", "qq=array of 3 queue of int", "type=array of 250 int", "outt = array of 250 int", "toutt = array of 250 int", "define the main function", "    desperate_optimization(20)", "    n=int", "    read n", "    for i=1 to n inclusive read type[i]", "    for i=1 to n inclusive", "        decrement type[i]", "        x=int", "        read x", "        outt[i] = x", "        while decremented x > 0", "            u=int", "            read u", "            add i to end of vec[u]", "        end of the block", "    end of the block", "    for i=1 to n inclusive", "        if outt[i] is 0 push i into q[type[i]]", "    start=0", "    for i=0 to 3 exclusive qq[i]=q[i]", "    for i=1 to n inclusive toutt[i]=outt[i]", "    ans=1000000000", "    for i=0 to 3 exclusive", "        if qq[i] is empty continue", "        for j=0 to 3 exclusive q[j]=qq[j]", "        for j=1 to n inclusive outt[j]=toutt[j]", "        start=i", "        total=0", "        while q[0], q[1] and q[2] are not empty", "            while q[start] is not empty", "                pos=first item of q[start]", "                pop q[start]", "                for i=0 to size of vec[pos] exclusive", "                    nx=vec[pos][i]", "                    decrement outt[nx]", "                    if outt[nx] is 0 push nx into q[type[nx]]", "                end of the block", "                increment total", "            end of the block", "            start=(start+1) modulo 3", "            increment total", "        end of the block", "        ans=min(ans, total-1)", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["void desperate_optimization(int precision) {", "    cout.setf(ios::fixed);", "    cout.setf(ios::showpoint);", "    cout.precision(precision);", "}", "vector<int> vec[250];", "queue<int> q[3];", "queue<int> qq[3];", "int type[250];", "int outt[250];", "int toutt[250];", "int main() {", "    desperate_optimization(20);", "    int n;", "    cin >> n;", "    for (int i = 1; i <= n; i++) cin >> type[i];", "    for (int i = 1; i <= n; i++) {", "        type[i]--;", "        int x;", "        cin >> x;", "        outt[i] = x;", "        while (x--) {", "            int u;", "            cin >> u;", "            vec[u].push_back(i);", "        }", "    }", "    for (int i = 1; i <= n; i++)", "        if (outt[i] == 0) q[type[i]].push(i);", "    int start = 0;", "    for (int i = 0; i < 3; i++) qq[i] = q[i];", "    for (int i = 1; i <= n; i++) toutt[i] = outt[i];", "    int ans = 1e9;", "    for (int i = 0; i < 3; i++) {", "        if (qq[i].empty() == true) continue;", "        for (int j = 0; j < 3; j++) q[j] = qq[j];", "        for (int j = 1; j <= n; j++) outt[j] = toutt[j];", "        start = i;", "        int total = 0;", "        while (!q[0].empty() || !q[1].empty() || !q[2].empty()) {", "            while (!q[start].empty()) {", "                int pos = q[start].front();", "                q[start].pop();", "                for (int i = 0; i < vec[pos].size(); i++) {", "                    int nx = vec[pos][i];", "                    outt[nx]--;", "                    if (outt[nx] == 0) q[type[nx]].push(nx);", "                }", "                total++;", "            }", "            start = (start + 1) % 3;", "            total++;", "        }", "        ans = min(ans, total - 1);", "    }", "    cout << ans << '\\n';", "    return 0;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "213A", "pseudocode_lines": ["define the main function", "    n,m,a=int", "    read n", "    c and n = array of n+1 int, filled with 0", "    g=array of n+2 vector of int", "    cc=array of 5 vector of int", "    for i=0 to n exclusive", "        read c[i]", "        decrement c[i]", "        add i to end of cc[c[i]]", "    end of the block", "    for i=0 to n exclusive", "        read m", "        while decremented value of m is not 0", "            read a", "            add i to end of g[a-1]", "            increment d[i]", "        end of the block", "    end of the block", "    mx=INT_MAX", "    for k=0 to n exclusive", "        if d[k] is 0", "            dp=array of n+1 int", "            for i=0 to n exclusive dp[i]=d[i]", "            p=c[k], ok=0, an=n", "            while true", "                if ok is n break", "                for i=0 to size of cc[p] exclusive", "                    if d[cc[p][i]] is 0", "                        decrement d[cc[p][i]]", "                        increment ok", "                        for j=0 to size of g[cc[p][i]] exclusive", "                            u=g[cc[p][i]][j]", "                            decrement d[u]", "                        end of the block", "                        i=-1", "                    end of the block", "                end of the block", "                if ok and ok<n increment an", "                p=(p+1) modulo 3", "            end of the block", "            for i=0 to n exclusive d[i]=dp[i]", "            mx=min(mx,an)", "        end of the block", "    print mx", "end of the block"], "code_lines": ["int main() {", "    int n, m, a;", "    cin >> n;", "    int c[n + 1], d[n + 1] = {0};", "    vector<int> g[n + 2];", "    vector<int> cc[5];", "    for (int i = 0; i < n; i++) {", "        cin >> c[i];", "        c[i]--;", "        cc[c[i]].push_back(i);", "    }", "    for (int i = 0; i < n; i++) {", "        cin >> m;", "        while (m--) {", "            cin >> a;", "            g[a - 1].push_back(i);", "            d[i]++;", "        }", "    }", "    int mx = INT_MAX;", "    for (int k = 0; k < n; k++)", "        if (d[k] == 0) {", "            int dp[n + 1];", "            for (int i = 0; i < n; i++) dp[i] = d[i];", "            int p = c[k], ok = 0, an = n;", "            while (1) {", "                if (ok == n) break;", "                for (int i = 0; i < cc[p].size(); i++) {", "                    if (d[cc[p][i]] == 0) {", "                        d[cc[p][i]]--;", "                        ok++;", "                        for (int j = 0; j < g[cc[p][i]].size(); j++) {", "                            int u = g[cc[p][i]][j];", "                            d[u]--;", "                        }", "                        i = -1;", "                    }", "                }", "                if (ok && ok < n) an++;", "                p = (p + 1) % 3;", "            }", "            for (int i = 0; i < n; i++) d[i] = dp[i];", "            mx = min(mx, an);", "        }", "    cout << mx << endl;", "}"], "testcases": [[["1", "1", "0"], ["1"]], [["5", "2 2 1 1 3", "1 5", "2 5 1", "2 5 4", "1 5", "0"], ["7"]], [["7", "1 3 3 1 2 1 1", "0", "1 1", "1 1", "2 1 6", "3 1 2 7", "1 1", "1 1"], ["11"]], [["2", "2 1", "0", "1 1"], ["4"]], [["3", "2 1 2", "0", "0", "0"], ["4"]], [["4", "2 1 1 1", "0", "0", "1 1", "1 3"], ["6"]], [["6", "1 1 2 3 3 1", "2 2 3", "0", "0", "0", "2 2 1", "1 1"], ["10"]], [["8", "2 2 2 1 1 2 1 1", "3 5 6 7", "1 5", "2 5 6", "1 5", "0", "1 5", "1 5", "2 5 6"], ["11"]], [["9", "3 3 2 1 3 1 2 2 1", "2 4 3", "0", "2 4 2", "0", "1 4", "2 4 2", "0", "1 4", "3 4 3 8"], ["13"]], [["10", "3 1 2 2 2 1 2 1 1 1", "0", "2 6 9", "0", "1 9", "0", "1 3", "4 3 6 5 2", "3 6 4 2", "0", "1 3"], ["14"]], [["11", "1 2 2 3 3 2 2 2 2 3 1", "1 4", "2 7 11", "0", "0", "1 2", "1 11", "0", "1 2", "3 7 11 2", "3 3 2 9", "0"], ["14"]], [["12", "1 3 2 2 1 3 2 1 3 2 2 2", "2 3 4", "3 12 11 10", "1 8", "2 8 7", "2 9 10", "1 3", "0", "0", "1 4", "4 3 1 12 9", "3 8 3 4", "1 4"], ["18"]], [["13", "3 3 2 2 1 3 1 1 1 1 2 1 2", "5 6 3 11 13 12", "1 6", "2 10 6", "3 6 3 11", "1 6", "1 10", "3 6 2 3", "4 6 3 9 11", "3 6 2 3", "0", "3 6 2 3", "4 6 3 4 13", "2 6 3"], ["21"]], [["14", "3 2 2 1 2 1 1 3 1 2 2 3 1 1", "2 9 13", "3 9 13 8", "2 9 6", "3 9 6 13", "1 9", "1 9", "3 9 6 13", "2 9 13", "0", "4 9 3 13 4", "4 9 6 13 2", "2 9 13", "1 9", "8 9 5 6 3 13 7 4 11"], ["20"]], [["15", "1 2 3 2 3 2 2 2 3 3 3 2 3 1 3", "5 2 7 4 3 6", "0", "2 7 4", "2 2 15", "1 7", "1 7", "0", "2 4 6", "1 6", "2 15 3", "4 12 2 15 7", "0", "3 2 5 6", "3 2 4 6", "1 2"], ["20"]], [["16", "3 3 1 3 2 3 2 2 3 1 2 3 2 2 2 3", "1 14", "4 14 10 13 6", "3 14 15 6", "1 14", "4 14 10 9 7", "4 14 10 13 9", "4 14 10 13 6", "4 14 4 12 3", "2 14 4", "1 14", "1 14", "2 14 1", "4 14 10 4 1", "0", "2 14 10", "1 14"], ["22"]], [["17", "3 2 3 2 2 2 1 3 3 3 3 2 3 3 3 1 1", "0", "0", "2 8 10", "4 12 8 6 16", "0", "2 8 13", "3 2 8 10", "1 12", "4 8 17 3 16", "2 2 8", "0", "1 2", "2 8 10", "2 12 8", "2 8 10", "1 8", "2 12 8"], ["21"]], [["18", "2 1 1 3 2 1 3 2 3 3 2 2 1 1 3 1 1 3", "3 16 8 6", "3 16 6 1", "4 6 13 5 7", "2 6 2", "4 16 6 17 1", "2 16 8", "3 6 17 12", "1 16", "0", "3 6 15 1", "3 16 6 12", "7 16 9 8 6 13 17 14", "1 6", "1 6", "3 8 6 13", "0", "1 6", "3 9 6 13"], ["26"]], [["19", "2 1 2 3 3 3 2 1 1 1 1 3 3 1 1 1 2 2 3", "0", "2 1 7", "0", "4 3 2 17 13", "1 17", "1 3", "3 1 3 6", "4 1 17 9 13", "3 1 16 17", "0", "3 3 6 17", "1 6", "6 10 6 7 17 9 11", "3 10 17 13", "4 3 17 13 8", "1 3", "3 6 7 16", "0", "6 1 7 17 11 13 15"], ["29"]], [["20", "1 2 2 2 1 3 3 2 2 1 2 2 3 1 2 2 2 1 1 1", "2 10 8", "5 10 12 3 20 7", "0", "3 10 15 3", "0", "3 14 17 3", "2 12 20", "0", "3 17 10 12", "1 17", "1 5", "1 5", "0", "1 18", "3 18 5 12", "5 5 12 8 3 19", "0", "0", "1 12", "1 18"], ["24"]], [["11", "3 1 3 2 3 2 3 2 3 1 3", "6 2 3 9 5 7 10", "1 6", "2 6 2", "5 6 2 3 9 5", "2 3 9", "0", "5 3 9 5 8 4", "4 2 3 9 5", "2 2 3", "8 6 2 3 9 5 4 11 7", "4 2 3 9 5"], ["21"]], [["12", "2 3 3 1 1 3 2 2 3 1 3 3", "1 9", "1 1", "2 2 11", "5 1 2 11 5 8", "4 9 10 1 11", "5 9 10 12 11 5", "4 1 12 11 5", "5 10 1 2 12 11", "0", "1 9", "1 12", "0"], ["19"]], [["13", "3 2 2 1 3 3 2 3 2 2 1 2 3", "7 4 3 2 5 9 8 13", "1 4", "1 4", "0", "3 4 2 6", "2 4 2", "4 4 3 2 9", "5 4 2 6 9 7", "3 4 2 6", "6 4 3 2 5 9 7", "6 4 3 2 6 9 7", "8 4 2 6 5 9 8 11 10", "7 4 3 2 6 9 8 11"], ["21"]], [["14", "2 3 1 3 1 1 1 2 2 3 1 1 3 1", "4 14 9 8 5", "4 4 8 5 1", "9 4 14 9 8 1 2 13 7 12", "0", "2 14 8", "2 4 14", "7 9 6 10 8 1 2 13", "2 4 6", "1 14", "1 9", "8 4 6 10 8 5 1 2 3", "7 14 6 10 8 1 2 7", "5 10 8 5 1 2", "0"], ["21"]], [["15", "3 2 2 2 1 1 2 1 1 2 2 3 3 3 2", "1 13", "4 13 1 8 14", "10 5 13 1 8 14 4 2 11 15 10", "6 5 13 1 8 9 14", "0", "11 5 13 1 8 14 4 2 11 10 3 12", "11 13 1 8 14 4 2 11 15 10 3 6", "2 13 1", "4 5 13 1 8", "8 5 13 1 8 14 2 11 15", "6 5 13 1 8 14 2", "10 5 13 1 8 14 2 11 15 10 3", "0", "4 13 1 8 9", "8 5 13 1 8 9 14 2 11"], ["23"]], [["16", "3 1 2 3 3 2 3 1 3 2 2 1 2 2 1 2", "0", "0", "7 2 8 4 12 5 9 11", "1 1", "4 1 8 4 12", "5 2 4 12 5 11", "4 4 12 5 10", "0", "5 1 8 4 12 5", "6 1 4 12 5 9 11", "6 2 1 8 4 12 5", "2 4 13", "3 1 8 4", "8 1 4 13 12 5 10 3 6", "4 4 12 5 6", "8 8 4 13 12 5 9 6 14"], ["26"]], [["17", "2 3 1 3 3 3 1 1 1 2 2 2 3 2 3 3 2", "5 4 14 2 11 7", "3 13 4 14", "7 6 4 14 2 1 10 12", "2 6 13", "9 4 2 9 8 7 17 1 10 12", "0", "5 4 14 2 9 11", "4 13 4 2 11", "4 13 4 14 2", "7 13 4 2 11 8 7 1", "4 13 4 14 2", "8 6 4 2 8 7 17 1 10", "0", "1 4", "7 13 4 14 2 9 8 7", "6 4 2 17 1 10 12", "5 13 4 2 9 8"], ["27"]], [["18", "1 2 3 3 2 2 1 1 3 1 2 3 2 3 1 2 2 3", "5 9 3 14 12 2", "7 9 4 3 14 16 7 12", "1 9", "1 9", "6 9 14 12 1 6 15", "6 9 14 12 2 1 11", "2 9 14", "7 9 14 7 12 2 1 6", "0", "6 9 18 14 7 1 6", "4 9 14 7 1", "2 9 14", "6 9 3 14 7 1 6", "2 9 3", "9 9 3 14 16 12 2 1 6 17", "4 9 4 18 14", "8 9 18 14 12 1 11 6 13", "2 9 4"], ["26"]], [["19", "2 3 3 2 3 1 3 1 2 2 2 1 1 1 2 2 1 3 3", "0", "3 1 10 6", "8 1 6 2 17 18 12 15 7", "5 6 2 9 17 18", "6 6 2 17 18 12 16", "1 11", "9 1 11 6 2 17 18 4 12 15", "3 1 6 2", "4 1 6 2 8", "0", "1 1", "5 1 6 2 17 18", "12 1 10 6 2 8 17 18 4 12 15 7 3", "10 11 6 2 17 18 4 12 16 15 7", "8 1 6 2 8 17 18 12 16", "8 11 6 2 9 17 18 4 12", "3 11 6 2", "5 10 6 2 9 17", "10 1 6 2 17 18 12 5 15 7 3"], ["30"]], [["20", "2 2 3 2 3 1 1 3 1 1 1 1 1 3 2 1 3 1 1 1", "1 7", "13 7 1 11 4 6 16 20 12 5 18 19 15 10", "8 7 1 11 4 6 17 8 16", "3 7 1 11", "9 7 1 11 4 6 8 20 12 3", "4 7 1 11 4", "0", "6 7 1 11 4 6 17", "4 7 1 11 4", "7 7 1 11 4 6 17 5", "2 7 1", "9 7 1 11 4 6 17 8 14 20", "11 7 1 11 4 6 20 3 5 15 10 2", "5 7 1 11 4 6", "9 7 1 11 4 6 8 16 14 5", "5 7 1 11 4 6", "5 7 1 11 4 6", "11 7 1 11 4 9 6 17 8 20 3 5", "11 7 1 11 4 6 17 16 20 12 5 18", "6 7 1 11 4 6 14"], ["35"]], [["21", "1 2 1 3 3 3 1 1 2 2 3 1 3 1 3 3 1 1 1 2 2", "1 5", "0", "1 11", "0", "0", "0", "1 8", "0", "1 11", "1 1", "1 19", "0", "1 2", "0", "0", "0", "0", "1 19", "0", "0", "0"], ["25"]], [["22", "2 3 2 3 3 2 1 2 3 3 1 3 1 1 2 2 3 3 1 3 2 2", "0", "1 8", "1 22", "1 12", "0", "1 14", "0", "0", "0", "2 22 14", "1 12", "0", "0", "0", "0", "0", "0", "0", "0", "1 16", "1 13", "0"], ["25"]], [["23", "3 1 3 3 2 2 2 1 3 2 3 1 1 1 1 2 3 1 2 1 3 1 1", "0", "1 11", "1 11", "2 11 16", "1 2", "3 11 1 12", "2 11 16", "2 12 2", "1 13", "2 12 2", "0", "0", "0", "2 13 11", "0", "1 11", "2 12 2", "3 16 6 21", "1 11", "0", "0", "2 11 12", "0"], ["27"]], [["24", "1 2 1 1 2 2 1 1 3 2 3 1 3 2 3 3 1 1 3 2 3 2 1 2", "1 16", "0", "0", "1 2", "0", "0", "0", "0", "1 2", "0", "0", "0", "0", "0", "0", "0", "2 12 24", "0", "0", "1 11", "0", "0", "0", "0"], ["27"]], [["25", "3 3 1 1 1 2 2 2 3 1 2 3 2 1 2 2 2 3 2 1 2 3 2 1 1", "0", "0", "0", "0", "0", "0", "1 12", "0", "1 19", "0", "2 12 21", "2 3 10", "0", "1 21", "0", "1 9", "1 3", "0", "0", "2 3 2", "0", "1 12", "0", "1 3", "2 21 9"], ["29"]], [["26", "1 2 2 1 1 2 1 1 2 1 3 1 3 1 2 3 3 3 2 1 2 1 3 3 2 2", "1 9", "1 1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 15 12", "1 8", "0", "0", "0", "0", "2 3 26", "0", "0", "0", "1 22", "0", "1 8"], ["30"]], [["27", "2 1 1 3 2 1 1 2 3 1 1 2 2 2 1 2 1 1 3 3 3 1 1 1 3 1 1", "0", "0", "0", "1 12", "0", "0", "0", "0", "0", "0", "1 26", "0", "0", "0", "0", "1 27", "0", "0", "0", "0", "0", "0", "1 5", "0", "2 20 27", "1 18", "0"], ["30"]], [["28", "2 1 1 3 2 3 2 2 1 3 2 3 3 2 3 1 2 2 3 3 3 3 1 3 2 1 3 3", "0", "1 7", "0", "2 28 18", "1 28", "0", "0", "0", "0", "0", "0", "2 10 18", "3 8 10 18", "0", "2 1 20", "0", "1 18", "1 27", "2 27 18", "0", "0", "1 28", "0", "0", "0", "0", "1 28", "1 9"], ["33"]], [["29", "3 3 3 3 3 1 1 1 3 2 2 1 1 3 1 1 1 2 1 2 3 1 1 2 1 3 1 2 3", "0", "0", "0", "0", "0", "1 1", "0", "0", "2 28 15", "0", "0", "0", "2 24 23", "1 28", "0", "1 28", "1 20", "0", "0", "0", "0", "1 28", "0", "0", "2 23 16", "0", "0", "1 7", "1 28"], ["32"]], [["30", "1 3 3 3 2 3 1 3 3 3 3 2 3 1 3 2 1 1 1 1 2 3 2 1 1 3 3 2 2 2", "0", "1 20", "0", "1 7", "2 6 9", "1 20", "1 20", "3 7 6 9", "2 10 6", "0", "0", "2 6 9", "0", "0", "1 20", "2 6 9", "2 6 9", "0", "2 6 9", "0", "2 6 9", "3 27 6 9", "2 6 9", "2 6 9", "0", "0", "0", "2 6 9", "3 6 9 19", "3 27 6 9"], ["34"]], [["4", "1 1 2 3", "1 2", "1 3", "0", "1 1"], ["8"]]]}, {"problem_id": "663A", "pseudocode_lines": ["a = integer array of length 110", "b = integer array of length 110", "define the main function", "    s = string", "    read one line into s", "    num, ten = integers with num value of 0 and ten value of 1", "    for i = size of s-1 to 0 inclusive descending", "        if s[i] equals = then break", "        if s[i] is less than '9' and greater than '0'", "            x = integer with value of s[i] - '0'", "            increase num by x*ten", "            set ten to ten * 10", "        end of the block", "    end of the block", "    cnt = integer with value of 0", "    set a[0] to 1", "    for i = 0 to size of s exclusive", "        if s[i] equals '+'", "            increase cnt by 1 and set a[cnt] to 1", "        else if s[i] equals '-'", "            increase cnt by 1 and set a[cnt] to 0", "        end of the block", "    end of the block", "    x = integer with value of 0", "    for i =0 to cnt inclusive", "        set b[i] to 1", "        if a[i]", "            increase x by b[i]", "        else", "            decrease x by b[i]", "    end of the block", "    set x to num - x", "    for i = 0 to cnt inclusive", "        if x is less than 0", "            if a[i] equals 0 and b[i] is less than num", "                k = integer with value of the minimum of num-b[i] and negative x", "                increase b[i] by k", "                increase x by k", "            end of the block", "        else if x is greater than 0", "            if a[i] equals 1 and b[i] is less than num", "                k = integer with value of the minimum of num-b[i] and x", "                increase b[i] by k", "                decrease x by b[i]", "            end of the block", "        else", "            break", "    end of the block", "    set x to 0", "    for i = 0 to count inclusive", "        if a[i]", "            increase x by b[i]", "        else", "            decrease x by b[i]", "    end of the block", "    if x does not equal num", "        print Impossible", "        return to indicate successful execution", "    end of the block", "    print Possible", "    set cnt to 0", "    for i = 0 to size of s exclusive", "        if s[i] equals '+' or '-' or '=' print b[cnt] space s[i] space then increase cnt by 1", "    end of the block", "    print num", "    return to indicate successful execution", "end of the block"], "code_lines": ["int a[110];", "int b[110];", "int main() {", "    string s;", "    getline(cin, s);", "    int num = 0, ten = 1;", "    for (int i = s.size() - 1; i >= 0; i--) {", "        if (s[i] == '=') break;", "        if (s[i] <= '9' && s[i] >= '0') {", "            int x = s[i] - '0';", "            num += x * ten;", "            ten *= 10;", "        }", "    }", "    int cnt = 0;", "    a[0] = 1;", "    for (int i = 0; i < s.size(); i++) {", "        if (s[i] == '+') {", "            a[++cnt] = 1;", "        } else if (s[i] == '-') {", "            a[++cnt] = 0;", "        }", "    }", "    int x = 0;", "    for (int i = 0; i <= cnt; i++) {", "        b[i] = 1;", "        if (a[i])", "            x += b[i];", "        else", "            x -= b[i];", "    }", "    x = num - x;", "    for (int i = 0; i <= cnt; i++) {", "        if (x < 0) {", "            if (a[i] == 0 && b[i] < num) {", "                int k = min(num - b[i], -x);", "                b[i] += k;", "                x += k;", "            }", "        } else if (x > 0) {", "            if (a[i] == 1 && b[i] < num) {", "                int k = min(num - b[i], x);", "                b[i] += k;", "                x -= k;", "            }", "        } else", "            break;", "    }", "    x = 0;", "    for (int i = 0; i <= cnt; i++) {", "        if (a[i])", "            x += b[i];", "        else", "            x -= b[i];", "    }", "    if (x != num) {", "        cout << \"Impossible\" << endl;", "        return 0;", "    }", "    cout << \"Possible\" << endl;", "    cnt = 0;", "    for (int i = 0; i < s.size(); i++) {", "        if (s[i] == '+' || s[i] == '-' || s[i] == '=') { cout << b[cnt++] << \" \" << s[i] << \" \"; }", "    }", "    cout << num << endl;", "    return 0;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "663A", "pseudocode_lines": ["let c be a character array of size 1000", "let res be an integer array of size 1000", "let l, mn, pl, n be integers with pl = 1", "define the main function", "    ch = character", "    input ch", "    while input ch", "        if ch is the character =, break", "        set c[l] to ch", "        if c[l] is the character +", "            increment pl", "        else", "            increment mn", "        increment l", "        input ch", "    end of the block", "    input n", "    if n * pl - nm is less than n or pl - n * mn is greater than n", "        print Impossible", "    else", "        print Possible", "        for i = 0 to 1 inclusive, set res[i] to 1", "        d is an integer with d = n - (pl - mn)", "        for i = 0 to 1 inclusive", "            if (i equals 0 or c[i - 1] equals the character +) and d is greater than 0", "                if d is less than n - res[i]", "                    add d to res[i]", "                    set d to 0", "                else", "                    subtract n - res[i] from d", "                    res[i] is assigned n", "                end of the block", "            else if i isn't 0 and c[i - 1] equals the character - and d is less than 0", "                if -d is less than n - res[i]", "                    add -d to res[i]", "                    set d to 0", "                else", "                    add n - res[i] to d", "                    set res[i] to n", "                end of the block", "            end of the block", "        end of the block", "        output res[0]", "        for i = 0 to 1 exclusive, output the character space, c[i] the character space, and res[i + 1]", "        output the string \" = \" and n", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["char c[1000];", "int res[1000];", "int l, mn, pl = 1, n;", "int main() {", "    char ch;", "    cin >> ch;", "    while (cin >> ch) {", "        if (ch == '=') break;", "        c[l] = ch;", "        if (c[l] == '+')", "            pl++;", "        else", "            mn++;", "        l++;", "        cin >> ch;", "    }", "    cin >> n;", "    if (n * pl - mn < n || pl - n * mn > n)", "        cout << \"Impossible\" << endl;", "    else {", "        cout << \"Possible\" << endl;", "        for (int i = 0; i <= l; i++) res[i] = 1;", "        int d = n - (pl - mn);", "        for (int i = 0; i <= l; i++) {", "            if ((i == 0 || c[i - 1] == '+') && d > 0) {", "                if (d < n - res[i]) {", "                    res[i] += d;", "                    d = 0;", "                } else {", "                    d -= n - res[i];", "                    res[i] = n;", "                }", "            } else if (i != 0 && c[i - 1] == '-' && d < 0) {", "                if (-d < n - res[i]) {", "                    res[i] += -d;", "                    d = 0;", "                } else {", "                    d += n - res[i];", "                    res[i] = n;", "                }", "            }", "        }", "        cout << res[0];", "        for (int i = 0; i < l; i++) cout << \" \" << c[i] << \" \" << res[i + 1];", "        cout << \" = \" << n << endl;", "    }", "    return 0;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "663A", "pseudocode_lines": ["p, n, k, s = integer with p = 1, s = array of size 105", "c = character", "define the main function", "    s[increment k] = 1", "    while (read c and c is not =", "        if c is +, increment p, s[increment k] = 1", "        if c is -, decrement p, s[increment k] = -1", "    end of the block", "    read n", "    for i = 0 to k exclusive", "        if s[i] > 0", "            while p < n and s[i] < n, increment s[i], increment p", "        else", "            while p > n and s[i] > -n, decrement s[i], decrement p", "    end of the block", "    if p is not n", "        print Impossible", "        return to indicate successful execution", "    end of the block", "    print Possible", "    for i = 0 to k exclusive, (if i, (if s[i] < 0, print - else print +) else ), and print absolute of s[i]", "    print = and n", "end of the block"], "code_lines": ["int p = 1, n, k, s[105];", "char c;", "int main() {", "    s[k++] = 1;", "    while (cin >> c && c != '=') {", "        if (c == '+') p++, s[k++] = 1;", "        if (c == '-') p--, s[k++] = -1;", "    }", "    cin >> n;", "    for (int i = 0; i < k; i++) {", "        if (s[i] > 0)", "            while (p < n && s[i] < n) s[i]++, p++;", "        else", "            while (p > n && s[i] > -n) s[i]--, p--;", "    }", "    if (p != n) {", "        cout << \"Impossible\" << endl;", "        return 0;", "    }", "    cout << \"Possible\" << endl;", "    for (int i = 0; i < k; i++) cout << (i ? (s[i] < 0 ? \"- \" : \"+ \") : \"\") << abs(s[i]) << \" \";", "    cout << \"= \" << n << endl;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "663A", "pseudocode_lines": ["declare character array a with size 1204000", "define the main function", "    loop when read input to a", "        create int array A with 1204 elements", "        declare integer ans = 0", "        declare integer r = 0", "        declare integer flag = 0", "        declare integer p = 0", "        for i from 0 to exclusive incrementing i", "            if a[i] is '?'", "                if flag is false", "                    change A[r] to 1", "                    increment r", "                    increment p", "                end of the block", "                if flag is true", "                    assign - 1 to A[r]", "                    increment r", "                    decrement p", "                end of the block", "            end of the block", "            if a[i] is '-', change flag to 1", "            if a[i] is '+', change flag to 0", "            if a[i] >= '0' and a[i] <= '9', change n to n * 10 + a[i] - '0'", "        end of the block", "        loop i from 0 to r exclusive incrementing i", "            if A[i] is less than 0", "                if p is greater than n", "                    looping infinitely", "                        if absolute value pf A[i] >= n or p = n, stop the loop", "                        decrement A[i]", "                        decrement p", "                    end of the block", "                end of the block", "            else if A[i] is greater than 0", "                if p is less than n", "                    in the infinite loop", "                        if A[i] >= n or p = n, stop the loop", "                        increment A[i]", "                        increment p by one", "                    end of the block", "                end of the block", "            end of the block", "        end of the block", "        if p != n", "            print \"Impossible\"", "        else", "            print \"Possible\"", "            if A[0] is greater than 0", "                print A[0]", "            else", "                print A[0]", "            end of the block", "            for i = 1 to r exclusive", "                print \" \"", "                if A[i] is greater than 0", "                    print \"+\"", "                else", "                    print \"-\"", "                end of the block", "                print \" \" and absolute value of A[i]", "            end of the block", "            print \" = \" and n", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["char a[1204000] = {};", "int main() {", "    while (gets(a)) {", "        int A[1204] = {};", "        int n = 0;", "        int r = 0;", "        int flag = 0;", "        int p = 0;", "        for (int i = 0; a[i]; i++) {", "            if (a[i] == '?') {", "                if (!flag) {", "                    A[r] = 1;", "                    r++;", "                    p++;", "                }", "                if (flag) {", "                    A[r] = -1;", "                    r++;", "                    p--;", "                }", "            }", "            if (a[i] == '-') flag = 1;", "            if (a[i] == '+') flag = 0;", "            if (a[i] >= '0' && a[i] <= '9') { n = n * 10 + a[i] - '0'; }", "        }", "        for (int i = 0; i < r; i++) {", "            if (A[i] < 0) {", "                if (p > n) {", "                    while (1) {", "                        if (abs(A[i]) >= n || p == n) { break; }", "                        A[i]--;", "                        p--;", "                    }", "                }", "            } else if (A[i] > 0) {", "                if (p < n) {", "                    while (1) {", "                        if ((A[i] >= n || p == n)) { break; }", "                        A[i]++;", "                        p++;", "                    }", "                }", "            }", "        }", "        if (p != n) {", "            cout << \"Impossible\" << endl;", "        } else {", "            cout << \"Possible\" << endl;", "            if (A[0] > 0) {", "                cout << A[0];", "            } else {", "                cout << A[0];", "            }", "            for (int i = 1; i < r; i++) {", "                cout << \" \";", "                if (A[i] > 0) {", "                    cout << \"+\";", "                } else {", "                    cout << \"-\";", "                }", "                cout << \" \" << abs(A[i]);", "            }", "            cout << \" = \" << n << endl;", "        }", "    }", "    return 0;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "663A", "pseudocode_lines": ["let c be a character array of size 1000", "let res be an integer array of size 1000", "let l, mn, pl, n be integers with pl = 1", "define the main function", "    ch = character", "    input ch", "    while input ch", "        if ch is the character =, break", "        set c[l] to ch", "        if c[l] is the character +", "            increment pl", "        else", "            increment mn", "        increment l", "        input ch", "    end of the block", "    input n", "    if n * pl - nm is less than n or pl - n * mn is greater than n", "        print Impossible", "    else", "        print Possible", "        for i = 0 to 1 inclusive, set res[i] to 1", "        d is an integer with d = n - (pl - mn)", "        for i = 0 to 1 inclusive", "            if (i equals 0 or c[i - 1] equals the character +) and d is greater than 0", "                if d is less than n - res[i]", "                    add d to res[i]", "                    set d to 0", "                else", "                    subtract n - res[i] from d", "                    res[i] is assigned n", "                end of the block", "            else if i isn't 0 and c[i - 1] equals the character - and d is less than 0", "                if -d is less than n - res[i]", "                    add -d to res[i]", "                    set d to 0", "                else", "                    add n - res[i] to d", "                    set res[i] to n", "                end of the block", "            end of the block", "        end of the block", "        output res[0]", "        for i = 0 to 1 exclusive, output the character space, c[i] the character space, and res[i + 1]", "        output the string \" = \" and n", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["char c[1000];", "int res[1000];", "int l, mn, pl = 1, n;", "int main() {", "    char ch;", "    cin >> ch;", "    while (cin >> ch) {", "        if (ch == '=') break;", "        c[l] = ch;", "        if (c[l] == '+')", "            pl++;", "        else", "            mn++;", "        l++;", "        cin >> ch;", "    }", "    cin >> n;", "    if (n * pl - mn < n || pl - n * mn > n)", "        cout << \"Impossible\" << endl;", "    else {", "        cout << \"Possible\" << endl;", "        for (int i = 0; i <= l; i++) res[i] = 1;", "        int d = n - (pl - mn);", "        for (int i = 0; i <= l; i++) {", "            if ((i == 0 || c[i - 1] == '+') && d > 0) {", "                if (d < n - res[i]) {", "                    res[i] += d;", "                    d = 0;", "                } else {", "                    d -= n - res[i];", "                    res[i] = n;", "                }", "            } else if (i != 0 && c[i - 1] == '-' && d < 0) {", "                if (-d < n - res[i]) {", "                    res[i] += -d;", "                    d = 0;", "                } else {", "                    d += n - res[i];", "                    res[i] = n;", "                }", "            }", "        }", "        cout << res[0];", "        for (int i = 0; i < l; i++) cout << \" \" << c[i] << \" \" << res[i + 1];", "        cout << \" = \" << n << endl;", "    }", "    return 0;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "663A", "pseudocode_lines": ["define the main function", "    set int n, sum to 0", "    create an integer vector v", "    set character mark to value of +", "    if mark is not equal to = then do the following", "        if mark is + then do", "            set the push_back value of v to 1", "            add one to sum", "        end of the block", "        if mark is - then do", "            set the push_back value of v to -1", "            minus 1 from sum", "        end of the block", "        take input mark", "    end of the block", "    read n", "    for i = 0 to less than or equal to v.size() - 1 do the following", "        if sum is greater than n then do", "            if v[i] is less than 0 then do", "                if sum - n is less than or equal to n - 1 then do", "                    subtract sum - n from v[i]", "                    set sum to n", "                    break", "                else", "                    subtract n - 1 from v[i]", "                    subtract n - 1 from sum", "                end of the block", "            end of the block", "        else if the sum is less than n", "            if v[i] is greater than 0 then do", "                if n - sum is less than or equal to n - 1 then do", "                    v[i] equals v[i] plus n - sum", "                    set sum to n", "                    break", "                else", "                    v[i] equals v[i] plus n - 1", "                    sum equals sum plus n - 1", "                end of the block", "            end of the block", "        else", "            break", "    end of the block", "    if sum is n then do", "        output Possible", "        output v[0]", "        for i = 1 to less than or equal to v.size() - 1 do the following", "            if v[i] is greater than 0 then do", "                output +", "            else", "                output -", "            output the absolute value of v[i]", "        end of the block", "        output = n", "    else", "        output Impossible", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n, sum = 0;", "    vector<int> v;", "    char mark = '+';", "    while (mark != '=') {", "        if (mark == '+') {", "            v.push_back(1);", "            sum++;", "        }", "        if (mark == '-') {", "            v.push_back(-1);", "            sum--;", "        }", "        cin >> mark;", "    }", "    cin >> n;", "    for (int i = 0; i <= v.size() - 1; i++) {", "        if (sum > n) {", "            if (v[i] < 0) {", "                if (sum - n <= n - 1) {", "                    v[i] -= sum - n;", "                    sum = n;", "                    break;", "                } else {", "                    v[i] -= n - 1;", "                    sum -= n - 1;", "                }", "            }", "        } else if (sum < n) {", "            if (v[i] > 0) {", "                if (n - sum <= n - 1) {", "                    v[i] += n - sum;", "                    sum = n;", "                    break;", "                } else {", "                    v[i] += n - 1;", "                    sum += n - 1;", "                }", "            }", "        } else", "            break;", "    }", "    if (sum == n) {", "        cout << \"Possible\" << endl;", "        cout << v[0] << \" \";", "        for (int i = 1; i <= v.size() - 1; i++) {", "            if (v[i] > 0)", "                cout << \"+ \";", "            else", "                cout << \"- \";", "            cout << abs(v[i]) << \" \";", "        }", "        cout << \"= \" << n << endl;", "    } else", "        cout << \"Impossible\" << endl;", "    return 0;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "663A", "pseudocode_lines": ["maxn = const int with maxn = 105", "num = integer array of size maxn", "define the main function", "    s = string", "    read s", "    n = integer", "    l = integer with l = s.size()", "    set all contents of num to 0", "    zheng, fu = integer with zheng = 0, fu = 0", "    zuida = int with zuida = 1", "    pos = integer", "    num[1] = 1", "    increment zheng", "    increment zuida", "    for i = 1 to l", "        if s[i] is +", "            num[increment zuida] = 1", "            increment zheng", "        else if s[i] is -", "            num[increment zuida] = -1", "            increment fu", "        else if s[i] is =", "            pos = i", "            break loop", "        end of the block", "    end of the block", "    a = string with a = s.substr(pos + 2)", "    ss = stringstream, call ss on a", "    right shift ss n times", "    flag = bool with flag = false", "    for i = 1 to zuida exclusive", "        if n is zheng - fu)", "            flag = true", "            break loop", "        end of the block", "        while n > zheng - fu and num[i] > 0 and num[i] < n", "            increment zheng", "            increment num[i]", "        end of the block", "        while (n < zheng - fu and num[i] < 0 and abs(num[i]) < n)", "            increment fu", "            decrement num[i]", "        end of the block", "    end of the block", "    if n is zheng - fu, flag = true", "    if flag", "        print Possible", "        print num[1]", "        for i = 2 to zuida exclusive", "            if num[i] < 0", "                print - and -num[i]", "            else", "                print + and num[i]", "        end of the block", "        print =", "        print n", "    else", "        print Impossible", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int maxn = 105;", "int num[maxn];", "int main() {", "    string s;", "    getline(cin, s);", "    int n;", "    int l = s.size();", "    memset(num, 0, sizeof(num));", "    int zheng = 0, fu = 0;", "    int zuida = 1;", "    int pos;", "    num[1] = 1;", "    ++zheng;", "    ++zuida;", "    for (int i = 1; i < l; i++) {", "        if (s[i] == '+') {", "            num[zuida++] = 1;", "            ++zheng;", "        } else if (s[i] == '-') {", "            num[zuida++] = -1;", "            ++fu;", "        } else if (s[i] == '=') {", "            pos = i;", "            break;", "        }", "    }", "    string a = s.substr(pos + 2);", "    stringstream ss(a);", "    ss >> n;", "    bool flag = false;", "    for (int i = 1; i < zuida; i++) {", "        if (n == zheng - fu) {", "            flag = true;", "            break;", "        }", "        while (n > zheng - fu && num[i] > 0 && num[i] < n) {", "            ++zheng;", "            ++num[i];", "        }", "        while (n < zheng - fu && num[i] < 0 && abs(num[i]) < n) {", "            ++fu;", "            --num[i];", "        }", "    }", "    if (n == zheng - fu) flag = true;", "    if (flag) {", "        cout << \"Possible\" << endl;", "        cout << num[1];", "        for (int i = 2; i < zuida; i++) {", "            if (num[i] < 0)", "                cout << \" - \" << -num[i];", "            else", "                cout << \" + \" << num[i];", "        }", "        cout << \" = \";", "        cout << n << endl;", "    } else", "        cout << \"Impossible\" << endl;", "    return 0;", "}"], "testcases": [[["? + ? - ? + ? + ? = 42"], ["Possible", "40 + 1 - 1 + 1 + 1 = 42"]], [["? - ? = 1"], ["Impossible"]], [["? = 1000000"], ["Possible", "1000000 = 1000000"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 9"], ["Impossible"]], [["? - ? + ? + ? + ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? - ? + ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? + ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? + ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? = 123456"], ["Possible", "123456 - 1 + 2 + 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 = 123456"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 93"], ["Impossible"]], [["? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 57"], ["Possible", "57 - 1 + 18 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 57"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 32"], ["Possible", "32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 + 32 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 32"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 31"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? + ? - ? - ? = 4"], ["Impossible"]], [["? + ? - ? - ? - ? + ? + ? - ? + ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? = 5"], ["Possible", "5 + 5 - 1 - 1 - 1 + 5 + 5 - 1 + 5 + 5 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 - 1 + 5 - 1 - 1 + 2 - 1 + 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 5"]], [["? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? - ? - ? + ? + ? - ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? = 3"], ["Impossible"]], [["? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? - ? - ? + ? + ? + ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? + ? + ? - ? + ? + ? - ? - ? + ? - ? + ? + ? + ? = 4"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 - 4 + 1 + 1 + 1 - 4 + 1 + 1 - 4 - 4 + 1 - 4 + 1 + 1 + 1 = 4"]], [["? + ? - ? + ? + ? - ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? - ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? - ? + ? + ? = 4"], ["Possible", "1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 - 4 - 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 - 4 + 1 + 1 + 1 + 1 + 1 + 1 - 4 + 1 + 1 - 3 - 1 + 1 + 1 = 4"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 100"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 100"]], [["? + ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? - ? - ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? + ? - ? - ? + ? - ? - ? - ? - ? + ? + ? - ? + ? + ? - ? + ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? = 837454"], ["Possible", "837454 + 28 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 = 837454"]], [["? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? + ? - ? - ? - ? - ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? - ? + ? - ? + ? + ? - ? + ? - ? + ? - ? - ? + ? - ? - ? + ? - ? - ? - ? + ? - ? - ? + ? - ? + ? + ? - ? - ? + ? - ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? - ? - ? + ? - ? - ? - ? + ? = 254253"], ["Possible", "254253 - 1 + 2 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 - 1 - 1 + 1 - 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 - 1 - 1 - 1 + 1 = 254253"]], [["? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? - ? - ? + ? - ? + ? + ? + ? + ? - ? - ? + ? + ? - ? - ? + ? = 1000000"], ["Possible", "999963 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 - 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 - 1 - 1 + 1 + 1 - 1 - 1 + 1 = 1000000"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 43386"], ["Impossible"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? = 999999"], ["Possible", "999999 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 98 - 1 - 1 = 999999"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 37"], ["Possible", "37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 37 - 1 - 1 - 1 + 20 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 37"]], [["? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? + ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? - ? = 19"], ["Possible", "19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 19 - 1 - 1 - 1 - 1 + 11 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 = 19"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? - ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 15"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 15 + 1 + 1 - 14 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 15"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? + ? = 33"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 33 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 33"]], [["? + ? + ? + ? + ? - ? = 3"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 = 3"]], [["? + ? + ? + ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 - 2 = 2"]], [["? + ? - ? + ? + ? = 2"], ["Possible", "1 + 1 - 2 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? - ? - ? = 2"], ["Possible", "1 + 1 + 1 + 1 + 1 - 2 - 1 = 2"]], [["? + ? - ? = 1"], ["Possible", "1 + 1 - 1 = 1"]], [["? - ? + ? - ? + ? + ? + ? + ? = 2"], ["Possible", "1 - 2 + 1 - 2 + 1 + 1 + 1 + 1 = 2"]], [["? + ? + ? + ? + ? + ? + ? + ? + ? + ? - ? = 5"], ["Possible", "1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 5 = 5"]]]}, {"problem_id": "321A", "pseudocode_lines": ["define the main function", "    declare long longs a and b", "    read a and b and keep looping", "        declare new string variable s", "        declare long long variables x and y = 0", "        read standard input to s", "        create new long long called i", "        for i = 0 to length of s exclusive", "            if x = a and y = b, stop the loop", "            if s[i] is equal to 'L', change x to x - 1", "            if s[i] = 'R', change x to the sum of x and 1", "            if s[i] = 'U', change y to the sum of y and 1", "            if s[i] = 'D', decrease y by 1", "        end of the block", "        declare new long long variable j", "        if i = length of s", "            for j from 0 to length of s exclusive", "                if s[j] is equal to 'L', increase a by 1", "                if s[j] is equal to 'R', subtract 1 from a", "                if s[j] is equal to 'U', subtract 1 from b", "                if s[j] is equal to 'D', add 1 to b", "                if a = 0 and b is equal to 0, stop the loop", "                create long long variable da with value = absolute value of a", "                declare new long long db with value abs(b)", "                dx is a new long long variable = abs(x)", "                declare long long variable dy = absolute value of y", "                if a * y = b * x && a * x >= 0 && b * y >= 0", "                    if a != 0 and b != 0", "                        if dx != 0 and dy != 0", "                            if da % dx = 0 and db % dy = 0, break the loop", "                        end of the block", "                    else if a != 0 and b = 0", "                        if dx != 0", "                            if dy is equal to 0 and da%dx = 0, stop the loop", "                        end of the block", "                    else if a = 0 and b != 0", "                        if dy != 0", "                            if dx = 0 and db % dy is equal to 0, break", "                        end of the block", "                    end of the block", "                end of the block", "            end of the block", "            if j != length of s", "                print \"Yes\"", "            else", "                print \"No\" to the standard output", "            end of the block", "        else", "            print \"Yes\"", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    long long a, b;", "    while (cin >> a >> b) {", "        string s;", "        long long x = 0, y = 0;", "        cin >> s;", "        long long i;", "        for (i = 0; i < s.size(); i++) {", "            if (x == a && y == b) break;", "            if (s[i] == 'L') x -= 1;", "            if (s[i] == 'R') x += 1;", "            if (s[i] == 'U') y += 1;", "            if (s[i] == 'D') y -= 1;", "        }", "        long long j;", "        if (i == s.size()) {", "            for (j = 0; j < s.size(); j++) {", "                if (s[j] == 'L') a += 1;", "                if (s[j] == 'R') a -= 1;", "                if (s[j] == 'U') b -= 1;", "                if (s[j] == 'D') b += 1;", "                if (a == 0 && b == 0) break;", "                long long da = abs(a);", "                long long db = abs(b);", "                long long dx = abs(x);", "                long long dy = abs(y);", "                if ((long long)a * y == (long long)b * x && (long long)a * x >= 0 && (long long)b * y >= 0) {", "                    if (a != 0 && b != 0) {", "                        if (dx != 0 && dy != 0) {", "                            if (da % dx == 0 && db % dy == 0) break;", "                        }", "                    } else if (a != 0 && b == 0) {", "                        if (dx != 0) {", "                            if (dy == 0 && da % dx == 0) break;", "                        }", "                    } else if (a == 0 && b != 0) {", "                        if (dy != 0) {", "                            if (dx == 0 && db % dy == 0) break;", "                        }", "                    }", "                }", "            }", "            if (j != s.size()) {", "                cout << \"Yes\" << endl;", "            } else {", "                cout << \"No\" << endl;", "            }", "        } else {", "            cout << \"Yes\" << endl;", "        }", "    }", "    return 0;", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "321A", "pseudocode_lines": ["define the main function", "    x, y = integers", "    read x, y", "    a = string", "    read a", "    len = integer with len = a.length()", "    rx, ry = integer with rx = 0, ry = 0", "    for i = 0 to len exclusive", "        if a[i] is U, ry = ry + 1", "        if a[i] is D, ry = ry - 1", "        if a[i] is R, rx = rx + 1", "        if a[i] is L, rx = rx - 1", "    end of the block", "    tx, ty, nx, ny = integers with tx = 0, ty = 0, nx = 0, ny = 0", "    for i = 0 to len exclusive", "        if rx and ry", "            tx = (x - nx) modulo rx", "            ty = (y - ny) modulo ry", "            if not tx and not ty and (x - nx) / rx is (y - ny) / ry and (x - nx) / rx >= 0", "                print Yes", "                return to indicate successful execution", "            end of the block", "        else if rx and not ry", "            tx = (x - nx) modulo rx", "            if not tx and (x - nx) / rx >= 0 and ny is y", "                print Yes", "                return to indicate successful execution", "            end of the block", "        else if not rx and ry", "            ty = (y - ny) modulo ry;", "            if not ty and (y - ny) / ry >= 0 and nx == x)", "                print Yes", "                return to indicate successful execution", "            end of the block", "        else", "            if nx is x and ny is y", "                print Yes", "                return to indicate successful execution", "            end of the block", "        end of the block", "        if a[i] is U, ny = ny + 1", "        if a[i] is D, ny = ny - 1", "        if a[i] is R, nx = nx + 1", "        if a[i] is L, nx = nx - 1", "    end of the block", "    print No", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int x, y;", "    cin >> x >> y;", "    string a;", "    cin >> a;", "    int len = a.length();", "    int rx = 0, ry = 0;", "    for (int i = 0; i < len; i++) {", "        if (a[i] == 'U') ry += 1;", "        if (a[i] == 'D') ry -= 1;", "        if (a[i] == 'R') rx += 1;", "        if (a[i] == 'L') rx -= 1;", "    }", "    int tx = 0, ty = 0, nx = 0, ny = 0;", "    for (int i = 0; i < len; i++) {", "        if (rx && ry) {", "            tx = (x - nx) % rx;", "            ty = (y - ny) % ry;", "            if (!tx && !ty && (x - nx) / rx == (y - ny) / ry && (x - nx) / rx >= 0) {", "                cout << \"Yes\" << endl;", "                return 0;", "            }", "        } else if (rx && !ry) {", "            tx = (x - nx) % rx;", "            if (!tx && (x - nx) / rx >= 0 && ny == y) {", "                cout << \"Yes\" << endl;", "                return 0;", "            }", "        } else if (!rx && ry) {", "            ty = (y - ny) % ry;", "            if (!ty && (y - ny) / ry >= 0 && nx == x) {", "                cout << \"Yes\" << endl;", "                return 0;", "            }", "        } else {", "            if (nx == x && ny == y) {", "                cout << \"Yes\" << endl;", "                return 0;", "            }", "        }", "        if (a[i] == 'U') ny += 1;", "        if (a[i] == 'D') ny -= 1;", "        if (a[i] == 'R') nx += 1;", "        if (a[i] == 'L') nx -= 1;", "    }", "    cout << \"No\" << endl;", "    return 0;", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "321A", "pseudocode_lines": ["declare constant integer MAX = 2e6, mod = 998244353", "declare integer array dp size MAX by 26", "declare boolean ck with long longs lu, ld, ru, rd as arguments", "    if lu is true", "        declare long long step = absolute value of ( ld / lu )", "        if lu * step is ld and ru * step is rd, return 1", "    end of the block", "    if ru is true", "        declare long long step = absolute value of rd / ru", "        if lu * step is ld and ru * step is rd, return 1", "    end of the block", "    return to indicate successful execution", "end of the block", "define the main function", "    declare integers a, b", "    declare string x", "    read a, b, x", "    declare integer n = size of x", "    declare long longs tx = 0, ty = 0", "    declare long longs cx = 0, cy = 0", "    for i = 0 to n exclusive", "        if x[i] is 'R'", "            increment tx", "        else if x[i] is 'L'", "            decrement tx", "        else if x[i] is 'U'", "            increment ty", "        else if x[i] is 'D'", "            decrement ty", "    end of the block", "    if result of ck(tx, a, ty, b) or ( a is tx and b is ty ), return print ( \"Yes\" ), 0", "    for i = 0 to n exclusive", "        if x[i] is 'R'", "            increment cx", "        else if x[i] is 'L'", "            decrement cx", "        else if x[i] is 'U'", "            increment cy", "        else if x[i] is 'D'", "            decrement cy", "        if result of run ck with tx, a - cx, ty, b- cy as arguments or ( a is cx and b is cy ) return print ( \"Yes\" ), 0", "    end of the block", "    print \"No\"", "end of the block"], "code_lines": ["const int MAX = 2e6, mod = 998244353;", "int dp[MAX][26];", "bool ck(long long lu, long long ld, long long ru, long long rd) {", "    if (lu) {", "        long long step = abs(ld / lu);", "        if (lu * step == ld && ru * step == rd) return 1;", "    }", "    if (ru) {", "        long long step = abs(rd / ru);", "        if (lu * step == ld && ru * step == rd) return 1;", "    }", "    return 0;", "}", "int main() {", "    int a, b;", "    string x;", "    cin >> a >> b >> x;", "    int n = x.size();", "    long long tx = 0, ty = 0;", "    long long cx = 0, cy = 0;", "    for (int i = 0; i < n; i++) {", "        if (x[i] == 'R')", "            tx++;", "        else if (x[i] == 'L')", "            tx--;", "        else if (x[i] == 'U')", "            ty++;", "        else if (x[i] == 'D')", "            ty--;", "    }", "    if (ck(tx, a, ty, b) || (a == tx && b == ty)) return puts(\"Yes\"), 0;", "    for (int i = 0; i < n; i++) {", "        if (x[i] == 'R')", "            cx++;", "        else if (x[i] == 'L')", "            cx--;", "        else if (x[i] == 'U')", "            cy++;", "        else if (x[i] == 'D')", "            cy--;", "        if (ck(tx, a - cx, ty, b - cy) || (a == cx && b == cy)) return puts(\"Yes\"), 0;", "    }", "    puts(\"No\");", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "321A", "pseudocode_lines": ["define the main function", "    let a, b long longs", "    let in a string", "    read a, b, and in", "    let x, y long longs both with value 0", "    let len a long long with value length of in", "    let zx, zy long longs both with value 0", "    for long long i = 0 to len exclusive", "        if zx is a and zy is b", "            print Yes", "            return to indicate successful execution", "        end of the block", "        if in[i] is U, increment zy", "        if in[i] is D, decrement zy", "        if in[i] is L, decrement zx", "        if in[i] is R, increment zx", "    end of the block", "    if zx and zy are 0", "        print No", "        return to indicate successful execution", "    end of the block", "    for i = 0 to len exclusive", "        if in[i] is U, increment y", "        if in[i] is D, decrement y", "        if in[i] is L, decrement x", "        if in[i] is R, increment x", "        let chax, chay long longs with chax = a - x and chay = b - y", "        if zx is 0", "            if chay mod zy is 0 and zx is chax", "                if chay / zy is at least 0", "                    print Yes", "                    return to indicate successful execution", "                end of the block", "            end of the block", "        otherwise, if zy is 0", "            if chax mod zx is 0 and zy equals chay", "                if chax / zx is at least 0", "                    print Yes", "                    return to indicate successful execution", "                end of the block", "            end of the block", "        otherwise if chax mod zx is 0 and chay mod zy is 0", "            if chax / zx = chay / zy and chax / zx is at least 0 and chay / zy is at least 0", "                print Yes", "                return to indicate successful execution", "            end of the block", "        end of the block", "    end of the block", "    print No", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    long long a, b;", "    string in;", "    cin >> a >> b >> in;", "    long long x = 0, y = 0;", "    long long len = in.length();", "    long long zx = 0, zy = 0;", "    for (long long i = 0; i < len; i++) {", "        if (zx == a && zy == b) {", "            cout << \"Yes\" << endl;", "            return 0;", "        }", "        if (in[i] == 'U') { zy++; }", "        if (in[i] == 'D') { zy--; }", "        if (in[i] == 'L') { zx--; }", "        if (in[i] == 'R') { zx++; }", "    }", "    if (zx == 0 && zy == 0) {", "        cout << \"No\" << endl;", "        return 0;", "    }", "    for (int i = 0; i < len; i++) {", "        if (in[i] == 'U') { y++; }", "        if (in[i] == 'D') { y--; }", "        if (in[i] == 'L') { x--; }", "        if (in[i] == 'R') { x++; }", "        long long chax = a - x, chay = b - y;", "        if (zx == 0) {", "            if (chay % zy == 0 && zx == chax) {", "                if (chay / zy >= 0) {", "                    cout << \"Yes\" << endl;", "                    return 0;", "                }", "            }", "        } else if (zy == 0) {", "            if (chax % zx == 0 && zy == chay) {", "                if (chax / zx >= 0) {", "                    cout << \"Yes\" << endl;", "                    return 0;", "                }", "            }", "        } else if (chax % zx == 0 && chay % zy == 0) {", "            if (chax / zx == chay / zy && chax / zx >= 0 && chay / zy >= 0) {", "                cout << \"Yes\" << endl;", "                return 0;", "            }", "        }", "    }", "    cout << \"No\" << endl;", "    return 0;", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "321A", "pseudocode_lines": ["define the main function", "    a, b = long long", "    loop while reading a then b", "        s = string", "        x, y = long long with x = 0 and y = 0", "        read s", "        i = long long", "        for i = 0 to size of s", "            if x is a and y is b break", "            if s[i] is 'L' decrement x", "            if s[i] is 'R' increment x", "            if s[i] is 'U' increment y", "            if s[i] is 'D' decrement y", "        end of the block", "        j = long long", "        if i is size of s", "            for j = 0 to size of s", "                if s[j] is 'L' increment a", "                if s[j] is 'R' decrement a", "                if s[j] is 'U' decrement b", "                if s[j] is 'D' increment b", "                if a and b are both 0 break", "                da = long long with da = absolute of a", "                db = long long with db = absolute of b", "                dx = long long with dx = absolute of x", "                dy = long long with dy = absolute of y", "                if a as long long * y is b as long long * x and a as long long * x >= 0 and b as long long * y >= 0", "                    if a and b are both not 0", "                        if dx and dy are both not 0", "                            if da is a multiple of dx and db is a multiple of dy break", "                        end of the block", "                    else if a is not 0 and b is 0", "                        if dx is not 0", "                            if dy is 0 and da is a multiple of dx break", "                        end of the block", "                    else if a is 0 and b is not 0", "                        if dy is not 0", "                            if dx is 0 and db is a multiple of dy break", "                        end of the block", "                    end of the block", "                end of the block", "            end of the block", "            if j is not size of s", "                print \"Yes\"", "            else", "                print \"No\"", "            end of the block", "        else", "            print \"Yes\"", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    long long a, b;", "    while (cin >> a >> b) {", "        string s;", "        long long x = 0, y = 0;", "        cin >> s;", "        long long i;", "        for (i = 0; i < s.size(); i++) {", "            if (x == a && y == b) break;", "            if (s[i] == 'L') x -= 1;", "            if (s[i] == 'R') x += 1;", "            if (s[i] == 'U') y += 1;", "            if (s[i] == 'D') y -= 1;", "        }", "        long long j;", "        if (i == s.size()) {", "            for (j = 0; j < s.size(); j++) {", "                if (s[j] == 'L') a += 1;", "                if (s[j] == 'R') a -= 1;", "                if (s[j] == 'U') b -= 1;", "                if (s[j] == 'D') b += 1;", "                if (a == 0 && b == 0) break;", "                long long da = abs(a);", "                long long db = abs(b);", "                long long dx = abs(x);", "                long long dy = abs(y);", "                if ((long long)a * y == (long long)b * x && (long long)a * x >= 0 && (long long)b * y >= 0) {", "                    if (a != 0 && b != 0) {", "                        if (dx != 0 && dy != 0) {", "                            if (da % dx == 0 && db % dy == 0) break;", "                        }", "                    } else if (a != 0 && b == 0) {", "                        if (dx != 0) {", "                            if (dy == 0 && da % dx == 0) break;", "                        }", "                    } else if (a == 0 && b != 0) {", "                        if (dy != 0) {", "                            if (dx == 0 && db % dy == 0) break;", "                        }", "                    }", "                }", "            }", "            if (j != s.size()) {", "                cout << \"Yes\" << endl;", "            } else {", "                cout << \"No\" << endl;", "            }", "        } else {", "            cout << \"Yes\" << endl;", "        }", "    }", "    return 0;", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "321A", "pseudocode_lines": ["s = string", "a, b = integer", "cx, cy = integers with cx = 0, cy = 0", "define the main function", "    read a, b", "    read s", "    for i = 0 to ((cast to int)(s).size())", "        if cx is a and cy is b", "            print Yes", "            return to indicate successful execution", "        end of the block", "        if s[i] is U", "            increment cy", "        else if s[i] is D", "            cy decrement", "        else if s[i] is R", "            increment cx", "        else", "            decrement cx", "        if cx is a and cy is b", "            print Yes", "            return to indicate successful execution", "        end of the block", "    end of the block", "    if cx", "        t = integer with t = abs(a) / abs(cx)", "        for now = t - 1000 to t + 1000", "            if now < 0, continue new iteration", "            first = long long with first = (cast to long long)cx * now", "            second = long long with second = (cast to long long)cy * now", "            for i = 0 to ((cast to int)(s).size())", "                if first is a and second is b", "                    print Yes", "                    return to indicate successful execution", "                end of the block", "                if s[i] is U", "                    increment second", "                else if s[i] is D", "                    decrement second", "                else if s[i] is R", "                    increment first", "                else", "                    decrement first", "                if first is a and second is b", "                    print Yes", "                    return to indicate successful execution", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    if cy", "        t = integer with t = abs(b) / abs(cy)", "        for now = t - 1000 to t + 1000", "            if now < 0, continue next iteration", "            first = long long with first = (cast to long long)cx * now", "            second = long long with second = (cast to long long)cy * now", "            for i = 0 to ((cast to int)(s).size())", "                if first is a and second is b", "                    print Yes", "                    return to indicate successful execution", "                end of the block", "                if s[i] is U", "                    increment second", "                else if s[i] is D", "                    decrement second", "                else if s[i] is R", "                    increment first", "                else", "                    decrement first", "                if first is a and second is b", "                    print Yes", "                    return to indicate successful execution", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    print No", "end of the block"], "code_lines": ["string s;", "int a, b;", "int cx = 0, cy = 0;", "int main() {", "    cin >> a >> b;", "    cin >> s;", "    for (int i = 0; i < ((int)(s).size()); ++i) {", "        if (cx == a && cy == b) {", "            cout << \"Yes\\n\";", "            return 0;", "        }", "        if (s[i] == 'U')", "            cy++;", "        else if (s[i] == 'D')", "            cy--;", "        else if (s[i] == 'R')", "            cx++;", "        else", "            cx--;", "        if (cx == a && cy == b) {", "            cout << \"Yes\\n\";", "            return 0;", "        }", "    }", "    if (cx) {", "        int t = abs(a) / abs(cx);", "        for (int now = t - 1000; now <= t + 1000; ++now) {", "            if (now < 0) continue;", "            long long first = (long long)cx * now;", "            long long second = (long long)cy * now;", "            for (int i = 0; i < ((int)(s).size()); ++i) {", "                if (first == a && second == b) {", "                    cout << \"Yes\\n\";", "                    return 0;", "                }", "                if (s[i] == 'U')", "                    second++;", "                else if (s[i] == 'D')", "                    second--;", "                else if (s[i] == 'R')", "                    first++;", "                else", "                    first--;", "                if (first == a && second == b) {", "                    cout << \"Yes\\n\";", "                    return 0;", "                }", "            }", "        }", "    }", "    if (cy) {", "        int t = abs(b) / abs(cy);", "        for (int now = t - 1000; now <= t + 1000; ++now) {", "            if (now < 0) continue;", "            long long first = (long long)cx * now;", "            long long second = (long long)cy * now;", "            for (int i = 0; i < ((int)(s).size()); ++i) {", "                if (first == a && second == b) {", "                    cout << \"Yes\\n\";", "                    return 0;", "                }", "                if (s[i] == 'U')", "                    second++;", "                else if (s[i] == 'D')", "                    second--;", "                else if (s[i] == 'R')", "                    first++;", "                else", "                    first--;", "                if (first == a && second == b) {", "                    cout << \"Yes\\n\";", "                    return 0;", "                }", "            }", "        }", "    }", "    cout << \"No\\n\";", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "321A", "pseudocode_lines": ["let fx, fy, dx, dy ints, all with value 0", "define the main function", "    read fx and fy", "    let c a string", "    read c", "    if fx and fy are 0, print Yes and return 0", "    for i = 0 to length of c exclusive", "        if c[i] is u", "            increment dy", "        otherwise if c[i] is D", "            decrement dy", "        otherwise, if c[i] is L", "            decrement dx", "        otherwise", "            increment dx", "    end of the block", "    for i = 0 to size of c exclusive", "        let nx, ny ints with value 0", "        for j = 0 to i inclusive", "            if c[j] is U", "                increment ny", "            otherwise if c[j] is D", "                decrement ny", "            otherwise if c[j] is L", "                decrement nx", "            otherwise", "                increment nx", "        end of the block", "        if nx equals fx and ny equals fy, print Yes and return 0", "        let k1 and k2 be integers with value 0", "        if dx is not 0, set k1 to (fx - nx) / dx", "        if dy is not 0, set k2 = (fy - ny) / dy", "        if dx is 0, set k1 equals k2", "        if dy is 0, set k2 equals k1", "        if k1 * dx + nx = fx and k2 * dy + ny = fy and k1 nonnegative, print Yes and return 0", "    end of the block", "    print No and return 0", "end of the block"], "code_lines": ["int fx = 0, fy = 0, dx = 0, dy = 0;", "int main() {", "    cin >> fx >> fy;", "    string c;", "    cin >> c;", "    if (fx == 0 && fy == 0) return cout << \"Yes\" << endl, 0;", "    for (int i = 0; i < c.size(); i++) {", "        if (c[i] == 'U')", "            dy++;", "        else if (c[i] == 'D')", "            dy--;", "        else if (c[i] == 'L')", "            dx--;", "        else", "            dx++;", "    }", "    for (int i = 0; i < c.size(); i++) {", "        int nx = 0, ny = 0;", "        for (int j = 0; j <= i; j++) {", "            if (c[j] == 'U')", "                ny++;", "            else if (c[j] == 'D')", "                ny--;", "            else if (c[j] == 'L')", "                nx--;", "            else", "                nx++;", "        }", "        if (nx == fx && ny == fy) return cout << \"Yes\" << endl, 0;", "        int k1 = 0, k2 = 0;", "        if (dx != 0) k1 = (fx - nx) / dx;", "        if (dy != 0) k2 = (fy - ny) / dy;", "        if (dx == 0) k1 = k2;", "        if (dy == 0) k2 = k1;", "        if (k1 * dx + nx == fx && k2 * dy + ny == fy && k1 == k2 && k1 >= 0) return cout << \"Yes\" << endl, 0;", "    }", "    return cout << \"No\" << endl, 0;", "}"], "testcases": [[["2 2", "RU"], ["Yes"]], [["1 2", "RU"], ["No"]], [["-1 1000000000", "LRRLU"], ["Yes"]], [["0 0", "D"], ["Yes"]], [["0 0", "UURRDL"], ["Yes"]], [["987654321 987654321", "UURRDL"], ["Yes"]], [["4 2", "UURRDL"], ["No"]], [["4 3", "UURRDL"], ["Yes"]], [["4 4", "UURRDL"], ["Yes"]], [["4 6", "UURRDL"], ["Yes"]], [["4 7", "UURRDL"], ["No"]], [["1000000000 1000000000", "UURRDL"], ["Yes"]], [["-1 -1", "UR"], ["No"]], [["1 1", "UURRDDLL"], ["No"]], [["987654321 2", "UURDD"], ["Yes"]], [["0 123456789", "RRULL"], ["Yes"]], [["4 4", "UUUURRRRDDDDLLLL"], ["Yes"]], [["-491226083 -49122610", "UDRLDURLDLLLDUDURLRDUUDDUUULUDRDRDUULURDRLLDDDLUDUURLUUDLLDULLLLDDLDDUU"], ["Yes"]], [["-261597957 418556728", "LLLDLUDUULLRDDULLRRUDRDLULRLRLLRRUUDRRLRUDLRRLUDRDLLUUDUULRURLDLULUUULDDUURLRUDURRL"], ["Yes"]], [["-771928144 -3", "RUDULULDRDLLLULDDUDDDDUDULRULRUULDDDURUDLUURULLLDLLDDRDDRLRURUULRUURRUDLDLDDRLLULRRDRRLLUULUDRUUDRRD"], ["Yes"]], [["397346346 1", "DDURRUURLDLRRLULD"], ["Yes"]], [["-528551525 0", "UDRLRRLDLDLURRRRULDLRLRLURUUDDLRLLDRRULLUDLURDLUUULLLRUUUDRRURLDUDULDDRDDDRDL"], ["Yes"]], [["311692421 -129871846", "LLLDURULDDDDUDDURRLUUDRLDDRDURDDRUDUURLUDUDLDRUDDDUUURDRRUDRDRDURLLDURUUDRLDLDURRRRRRDULURDRU"], ["Yes"]], [["485940814 728911221", "URURU"], ["Yes"]], [["-843450986 632588242", "LURLULULRUDUDULRDDLUL"], ["Yes"]], [["647999516 -809999401", "UDLDDLLULUDDLLDUULRRRDLUDDLDDLRLRRDRURURDRRDRULUDRDULRULLRRLLDDRLRRUDRURDUULUDLRRLRDR"], ["Yes"]], [["352820537 -764444491", "RDDUDLUDDUDLRRRDRRRDRRDUDUDDURLRRLDRLLRLLLLUULUDRURRDRLDDLLDRDURDUDRUDDLUDRLURUDRURDRDDLDRLDLDLLU"], ["Yes"]], [["-284973644 -1", "DLULLDLRUUDRR"], ["Yes"]], [["356922591 -2", "RRLDLDUDRUUUULUUDDULDDUDD"], ["No"]], [["27033101 54066203", "UDDDRDLLLRUUDDLRDLDRLRUDDULRLLRULR"], ["No"]], [["-199335150 39867031", "LLURRDUULRUDDRDUUULDLDRDDLURDRLDRLLLRRRRRULRRRUUDD"], ["No"]], [["609504072 609504074", "ULRLUDLDDR"], ["No"]], [["497684357 829473929", "RRLDUUURULURRLLRRLRLURRLDU"], ["Yes"]], [["551922835 183974295", "DUDUUULDRLRURRDULRRUDDLRLLUULLRLRDRDRR"], ["No"]], [["825368095 -825368096", "RD"], ["No"]], [["-458990423 -229495204", "DLLDDRLUDLRLUL"], ["No"]], [["285102789 570205594", "RRDULRULULRRDUURRLURUDDULLRDUL"], ["No"]], [["109928480 219856920", "LRURLRLURDRDLDRDLRDDUUDDLULDRRUUURRUDLLUULUUUR"], ["No"]], [["-532674020 532674026", "UURLLL"], ["No"]], [["999999999 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["0 0", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["Yes"]], [["1 1", "UDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLRUDLR"], ["No"]], [["-1000000000 -1000000000", "DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL"], ["Yes"]], [["3 3", "UURR"], ["No"]], [["-2 -2", "UR"], ["No"]], [["5 5", "UDLR"], ["No"]], [["0 -1", "U"], ["No"]], [["-1 0", "R"], ["No"]], [["1000000000 1000000000", "URURURUR"], ["Yes"]], [["-1 -1", "RU"], ["No"]], [["1 1", "LD"], ["No"]], [["-2 -2", "UURR"], ["No"]], [["1000000000 0", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"], ["Yes"]], [["2 6", "RUUUURLDDDL"], ["Yes"]], [["0 1", "LUUR"], ["No"]], [["1 1", "URDLDL"], ["Yes"]], [["-10 -10", "RU"], ["No"]], [["1000000000 1000000000", "RURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURURU"], ["Yes"]], [["-1000000000 -500000000", "URR"], ["No"]], [["-2 0", "ULLLDDRRRR"], ["Yes"]], [["999999999 -999999999", "RRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUU"], ["Yes"]], [["-100 -100", "RU"], ["No"]], [["100 100", "RUL"], ["No"]], [["0 1", "UDLR"], ["Yes"]], [["0 1", "D"], ["No"]], [["0 -3", "RDDL"], ["No"]]]}, {"problem_id": "95A", "pseudocode_lines": ["create long long vector prime of size 10000005 and value 0", "declare mM taking in long long ints a, b, and mod and returning long long", "    create long long res = 0", "    set a to a % mod", "    while b is truthy", "        if b & 1 is truthy, set res to (res + a) % mod", "        set a to (2 * a) % mod", "        move bits of b 1 place to the right", "    end of the block", "    return res", "end of the block", "declare fpow taking long long ints first, second, and p and returning long long integer", "    set first to first % p", "    make long long res = 1", "    while second is truthy", "        if second & 1 is truthy, set res to (res * first) % p", "        set res to res % p", "        if res is less than 0, set res to (res + p) % p", "        set second to second >> 1", "        set first to (first * first) % p", "        if first is less than 0, set first to (first + p) % p", "        set first to first % p", "    end of the block", "    return res", "end of the block", "declare inv taking in long long int n and returning long long", "    return the result of fpow(n, 1000000007 - 2, 1000000007)", "end of the block", "declare modmul taking in long long ints first and second and returning long long", "    return ((first % 1000000007) * (second % 1000000007)) % 1000000007", "end of the block", "declare modadd taking in long long ints first and second and returning long long integer", "    create long long temp = first % 1000000007 + second % 1000000007", "    set temp to temp % 1000000007", "    if temp is less than 0, set temp to (temp + 1000000007) % 1000000007", "    return temp", "end of the block", "declare sieve", "    set prime[1] to 1", "    for i = 2 to 10000005 exclusive", "        if prime[i] is falsy", "            for j = i to 10000005 exclusive", "                if !prime[j] is truthy, set prime[j] to i", "end of the block", "define the main function", "    create long long integer t", "    set t to 1", "    while t-- is truthy", "        create long long integer n", "        read n", "        make string vector s of size n", "        for i = 0 to n exclusive, read s[i]", "        make string w", "        create char tc", "        read w and tc", "        make long long vector check of size w.size() and value 0", "        for i = 0 to n exclusive", "            for j = 0 to w.size() exclusive", "                create string s1 = w.substr(j, s[i].size())", "                create bool ok = true", "                if size of s1 is less than size of s[i]", "                    set ok to false", "                else do", "                    make string temp = s[i]", "                    make all contents of temp lowercase", "                    make all content of s1 lowercase", "                    if s1 is not equal to temp, set ok to false", "                end of the block", "                if ok is truthy", "                    for k = j while k < j + s[i].size(), set check[k] to 1", "            end of the block", "        for i = 0 to w.size() exclusive", "            if check[i] is truthy", "                create char temp = w[i]", "                if temp is greater than or equal to 'A' and temp is less than or equal to 'Z'", "                    set temp to temp - 'A'", "                else do", "                    subtract 'a' from temp", "                add 'a' to temp", "                if temp is equal to tc and tc is equal to 'a'", "                    if w[i] is greater than or equal to 'a' and w[i] is less than or equal to 'z'", "                        set w[i] to 'b'", "                    else do", "                        set w[i] to 'B'", "                else if temp is equal to tc and tc is not equal to 'a'", "                    if w[i] is greater than or equal to 'a' and w[i] is less than or equal to 'z'", "                        set w[i] to 'a'", "                    otherwise", "                        set w[i] to 'A'", "                else", "                    if w[i] is greater than or equal to 'a' and w[i] is less than or equal to 'z'", "                        set w[i] to tc", "                    else do", "                        set w[i] to tc - 'a' + 'A'", "                end of the block", "            end of the block", "        print w", "    end of the block", "end of the block"], "code_lines": ["vector<long long> prime(10000005, 0);", "long long mM(long long a, long long b, long long mod) {", "    long long res = 0;", "    a %= mod;", "    while (b) {", "        if (b & 1) res = (res + a) % mod;", "        a = (2 * a) % mod;", "        b >>= 1;", "    }", "    return res;", "}", "long long fpow(long long first, long long second, long long p) {", "    first = first % p;", "    long long res = 1;", "    while (second) {", "        if (second & 1) res = (res * first) % p;", "        res %= p;", "        if (res < 0) res = (res + p) % p;", "        second = second >> 1;", "        first = (first * first) % p;", "        if (first < 0) first = (first + p) % p;", "        first %= p;", "    }", "    return res;", "}", "long long inv(long long n) {", "    return fpow(n, 1000000007 - 2, 1000000007);", "}", "long long modmul(long long first, long long second) {", "    return ((first % 1000000007) * (second % 1000000007)) % 1000000007;", "}", "long long modadd(long long first, long long second) {", "    long long temp = first % 1000000007 + second % 1000000007;", "    temp %= 1000000007;", "    if (temp < 0) temp = (temp + 1000000007) % 1000000007;", "    return temp;", "}", "void sieve() {", "    prime[1] = 1;", "    for (long long i = 2; i < 10000005; i++)", "        if (!prime[i])", "            for (long long j = i; j < 10000005; j += i)", "                if (!prime[j]) prime[j] = i;", "}", "int main() {", "    long long t;", "    t = 1;", "    while (t--) {", "        long long n;", "        cin >> n;", "        vector<string> s(n);", "        for (int i = 0; i < n; i++) cin >> s[i];", "        string w;", "        char tc;", "        cin >> w >> tc;", "        vector<long long> check(w.size(), 0);", "        for (int i = 0; i < n; i++)", "            for (int j = 0; j < w.size(); j++) {", "                string s1 = w.substr(j, s[i].size());", "                bool ok = true;", "                if (s1.size() < s[i].size())", "                    ok = false;", "                else {", "                    string temp = s[i];", "                    transform(temp.begin(), temp.end(), temp.begin(), ::tolower);", "                    transform(s1.begin(), s1.end(), s1.begin(), ::tolower);", "                    if (s1 != temp) ok = false;", "                }", "                if (ok)", "                    for (int k = j; k < j + s[i].size(); k++) check[k] = 1;", "            }", "        for (int i = 0; i < w.size(); i++)", "            if (check[i]) {", "                char temp = w[i];", "                if (temp >= 'A' && temp <= 'Z')", "                    temp -= 'A';", "                else", "                    temp -= 'a';", "                temp += 'a';", "                if (temp == tc && tc == 'a') {", "                    if (w[i] >= 'a' && w[i] <= 'z')", "                        w[i] = 'b';", "                    else", "                        w[i] = 'B';", "                } else if (temp == tc && tc != 'a') {", "                    if (w[i] >= 'a' && w[i] <= 'z')", "                        w[i] = 'a';", "                    else", "                        w[i] = 'A';", "                } else {", "                    if (w[i] >= 'a' && w[i] <= 'z')", "                        w[i] = tc;", "                    else", "                        w[i] = tc - 'a' + 'A';", "                }", "            }", "        cout << w << \"\\n\";", "    }", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["fs = string vector", "valid = long long integer array of size 200", "define the main function", "    n,in = long long integers", "    read n", "    h,w,k = strings", "    ch = char", "    for i=0 to n exclusive", "        read h", "        transform the string h to lowercase", "        add h to end of fs", "    end of the block", "    read w and ch", "    if ch - 'a' >=0 or 'z' - ch >=0", "        set in = ch - 'a'", "    else do the following", "        set in= ch= 'A'", "    end of the block", "    set k = w", "    transform w to lower case", "    for i=0 to n exclusive", "        create long long integer z = length of fs[i]", "        for j=0 to length of w exclusive", "            create a empty string temp", "            for k=j to j+z exclusive set temp = temp + w[k]", "            if temp is equal to fs [i]", "                for k=j to j+z exclusive set valid[k]=1", "        end of the block", "    end of the block", "    create empty string res", "    for i=0 to length of w exclusive", "        if valid[i] is not 0", "            if k[i] >= 'a' and k[i] <= 'z'", "                if k[i] - 'a' is not equal to in", "                    set res = res + 'a' + in", "                else do the following", "                    if ch > 'a' and ch <= 'z'", "                        set res = res + 'a'", "                    else if ch='a'", "                        set res = res + 'b'", "                    else ch > 'A' and ch <= 'Z'", "                        set res = res + 'a'", "                    else if ch = 'A' then do the following", "                        set res = res + 'b'", "                end of the block", "            else do the following", "                if k[i] - 'A' is not equal to in", "                    set res = res + 'A' + in", "                else do the following", "                    if ch > 'A' and ch <= 'Z'", "                        set res =res + 'A'", "                    else if ch = 'A", "                        set res = res + 'B'", "                    else if ch > 'a' and ch <= 'z'", "                        set res = res + 'A'", "                    else if ch = 'a' then do the following", "                        set res = res + 'B'", "                end of the block", "            end of the block", "        else do the following", "            set res = res + k[i]", "    end of the block", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["vector<string> fs;", "long long int valid[200];", "int main() {", "    long long int n, in;", "    cin >> n;", "    string h, w, k;", "    char ch;", "    for (int i = 0; i < n; i++) {", "        cin >> h;", "        transform(h.begin(), h.end(), h.begin(), ::tolower);", "        fs.push_back(h);", "    }", "    cin >> w >> ch;", "    if (ch - 'a' >= 0 && 'z' - ch >= 0) {", "        in = ch - 'a';", "    } else {", "        in = ch = 'A';", "    }", "    k = w;", "    transform(w.begin(), w.end(), w.begin(), ::tolower);", "    for (int i = 0; i < n; i++) {", "        long long int z = fs[i].length();", "        for (int j = 0; j < w.length(); j++) {", "            string temp = \"\";", "            for (int k = j; k < j + z; k++) temp += w[k];", "            if (temp == fs[i])", "                for (int k = j; k < j + z; k++) valid[k] = 1;", "        }", "    }", "    string res = \"\";", "    for (int i = 0; i < w.length(); i++) {", "        if (valid[i]) {", "            if (k[i] >= 'a' && k[i] <= 'z') {", "                if (k[i] - 'a' != in)", "                    res += 'a' + in;", "                else {", "                    if (ch > 'a' && ch <= 'z') {", "                        res += 'a';", "                    } else if (ch == 'a')", "                        res += 'b';", "                    else if (ch > 'A' && ch <= 'Z') {", "                        res += 'a';", "                    } else if (ch == 'A')", "                        res += 'b';", "                }", "            } else {", "                if (k[i] - 'A' != in)", "                    res += 'A' + in;", "                else {", "                    if (ch > 'A' && ch <= 'Z') {", "                        res += 'A';", "                    } else if (ch == 'A')", "                        res += 'B';", "                    else if (ch > 'a' && ch <= 'z') {", "                        res += 'A';", "                    } else if (ch == 'a')", "                        res += 'B';", "                }", "            }", "        } else", "            res += k[i];", "    }", "    cout << res << endl;", "    return 0;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["MAXN = const int with MAXN = 200", "bad = string, bool map", "change = bool array of size MAXN", "define the main function", "    n = int", "    read n", "    for i = 0 to n", "        s = string", "        read s", "        for t = 0 to length of s", "            if s[t] >= 'A' and s[t] <= 'Z' set s[t] to 'a' + s[t] - 'A'", "        set bad[s] to true", "    end of the block", "    u = string", "    lucky = char", "    read u then lucky", "    for i = 0 to length of u", "        cur = string", "        for t = i to length of u", "            increment cur by (u[t] - 'A' + 'a') as char if u[t] >= 'A' and u[t] <= 'Z' else u[t]", "            if bad[cur]", "                for j = i to t inclusive set change[j] to true", "        end of the block", "    end of the block", "    for i = 0 to length of u", "        if change[i]", "            if u[i] is lucky", "                if lucky is 'a'", "                    set u[i] to 'b'", "                else", "                    set u[i] to 'a'", "            else if u[i] - 'A' + 'a' is lucky", "                if lucky is 'a'", "                    set u[i] to 'B'", "                else", "                    set u[i] to 'A'", "            else if u[i] >= 'A' and u[i] <= 'Z'", "                set u[i] to lucky - 'a' + 'A'", "            else", "                set u[i] to lucky", "    print u", "end of the block"], "code_lines": ["const int MAXN = 200;", "map<string, bool> bad;", "bool change[MAXN];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; i++) {", "        string s;", "        cin >> s;", "        for (int t = 0; t < s.length(); t++)", "            if (s[t] >= 'A' && s[t] <= 'Z') s[t] = 'a' + s[t] - 'A';", "        bad[s] = true;", "    }", "    string u;", "    char lucky;", "    cin >> u >> lucky;", "    for (int i = 0; i < u.length(); i++) {", "        string cur;", "        for (int t = i; t < u.length(); t++) {", "            cur += ((u[t] >= 'A' && u[t] <= 'Z') ? (char)(u[t] - 'A' + 'a') : u[t]);", "            if (bad[cur])", "                for (int j = i; j <= t; j++) change[j] = true;", "        }", "    }", "    for (int i = 0; i < u.length(); i++)", "        if (change[i])", "            if (u[i] == lucky)", "                if (lucky == 'a')", "                    u[i] = 'b';", "                else", "                    u[i] = 'a';", "            else if (u[i] - 'A' + 'a' == lucky)", "                if (lucky == 'a')", "                    u[i] = 'B';", "                else", "                    u[i] = 'A';", "            else if (u[i] >= 'A' && u[i] <= 'Z')", "                u[i] = lucky - 'a' + 'A';", "            else", "                u[i] = lucky;", "    cout << u << \"\\n\";", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["define the main function", "    n = integer", "    read n", "    forbid = vector of string", "    for i = 0 to n exclusive", "        s = string", "        read s", "        s1 = string with s1 = \"\"", "        for j = 0 to s.size() exclusive", "            a = character with a = s[j]", "            if (a <= Z), a = a - A + a", "            s1 = s1 + a", "        end of the block", "        append s1 to forbid", "    end of the block", "    occur = vector integer array of size 100", "    s = string", "    read s", "    s1 = string with s1 = \"\"", "    for j = 0 to s.size() exclusive", "        a = character with a = s[j]", "        if (a <= Z), a = a - A + a", "        s1 = s1 + a", "    end of the block", "    for i = 0 to n exclusive", "        copy = string with copy = s1", "        pre = integer with pre = 0", "        while (copy.size() > 0 and copy.find(forbid[i]) is not npos string)", "            append copy.find(forbid[i]) + pre to occur[i]", "            pre = pre + copy.find(forbid[i]) + 1", "            copy = copy.substr(copy.find(forbid[i]) + 1)", "        end of the block", "    end of the block", "    letter = character", "    read letter", "    first = bool array of size 100", "    important = integer array of size 100", "    set all contents of first to true", "    set all contents of important to 0", "    for i = 0 to n exclusive", "        for j = 0 to occur[i].size() exclusive", "            for k = 0 to occur[i][j] + k < s.size() and k < forbid[i].size()", "                if (first[occur[i][j] + k])", "                    first[occur[i][j] + k] = false", "                    if (s[occur[i][j] + k] is letter)", "                        important[occur[i][j] + k] = 1", "                    else if (s[occur[i][j] + k] is letter - a + A)", "                        important[occur[i][j] + k] = 2", "                    end of the block", "                end of the block", "                if (s[occur[i][j] + k] <= Z)", "                    s[occur[i][j] + k] = letter - a + A", "                else", "                    s[occur[i][j] + k] = letter", "            end of the block", "        end of the block", "    end of the block", "    for i = 0 to s.size() exclusive", "        c1 = character with c1 = a", "        if (letter is a), c1 = b", "        if (important[i] is 1)", "            s[i] = c1", "        else if (important[i] is 2)", "            s[i] = c1 - a + A", "        end of the block", "    end of the block", "    print s", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n;", "    cin >> n;", "    vector<string> forbid;", "    for (int i = 0; i < n; i++) {", "        string s;", "        cin >> s;", "        string s1 = \"\";", "        for (int j = 0; j < s.size(); j++) {", "            char a = s[j];", "            if (a <= 'Z') a = a - 'A' + 'a';", "            s1 += a;", "        }", "        forbid.push_back(s1);", "    }", "    vector<int> occur[100];", "    string s;", "    cin >> s;", "    string s1 = \"\";", "    for (int j = 0; j < s.size(); j++) {", "        char a = s[j];", "        if (a <= 'Z') a = a - 'A' + 'a';", "        s1 += a;", "    }", "    for (int i = 0; i < n; i++) {", "        string copy = s1;", "        int pre = 0;", "        while (copy.size() > 0 && copy.find(forbid[i]) != string::npos) {", "            occur[i].push_back(copy.find(forbid[i]) + pre);", "            pre += copy.find(forbid[i]) + 1;", "            copy = copy.substr(copy.find(forbid[i]) + 1);", "        }", "    }", "    char letter;", "    cin >> letter;", "    bool first[100];", "    int important[100];", "    memset(first, true, sizeof(first));", "    memset(important, 0, sizeof(important));", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < occur[i].size(); j++) {", "            for (int k = 0; occur[i][j] + k < s.size() && k < forbid[i].size(); k++) {", "                if (first[occur[i][j] + k]) {", "                    first[occur[i][j] + k] = false;", "                    if (s[occur[i][j] + k] == letter) {", "                        important[occur[i][j] + k] = 1;", "                    } else if (s[occur[i][j] + k] == letter - 'a' + 'A') {", "                        important[occur[i][j] + k] = 2;", "                    }", "                }", "                if (s[occur[i][j] + k] <= 'Z')", "                    s[occur[i][j] + k] = letter - 'a' + 'A';", "                else", "                    s[occur[i][j] + k] = letter;", "            }", "        }", "    }", "    for (int i = 0; i < s.size(); i++) {", "        char c1 = 'a';", "        if (letter == 'a') c1 = 'b';", "        if (important[i] == 1) {", "            s[i] = c1;", "        } else if (important[i] == 2) {", "            s[i] = c1 - 'a' + 'A';", "        }", "    }", "    cout << s << endl;", "    return 0;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["dx = integer array of size 4 with dx = {0, 0, -1, 1}", "dy = integer array of size 4 with dy = {1, -1, 0, 0}", "define the main function", "    n = integer", "    read n", "    s = vector of string", "    c = character", "    tmp = string", "    for i = 0 to n exclusive", "        read tmp", "        append tmp in s", "        transform(s[i].begin(), s[i].end(), s[i].begin(), tolower)", "    end of the block", "    shit, fuck = string", "    read shit, c", "    save = string with save = shit", "    fuck = shit", "    transform(save.begin(), save.end(), save.begin(), tolower)", "    rep = integer array of size [save.size()] = {}", "    for i = 0 to n exclusive", "        for j = 0 to shit.size() exclusive", "            if (j + s[i].size() - 1 >= save.size()), continue next iteration", "            if (save.substr(j, s[i].size()) is s[i])", "                for k = 0 to s[i].size(), rep[k + j] = 1", "        end of the block", "    for i = 0 to shit.size() exclusive", "        if (rep[i])", "            if (save[i] is not c)", "                shit[i] = c", "            else", "                if (c is a)", "                    shit[i] = b", "                else", "                    shit[i] = a", "            end of the block", "            if (fuck[i] <= Z and fuck[i] >= A), shit[i] = (cast to character)toupper(shit[i])", "        end of the block", "    end of the block", "    print shit", "end of the block"], "code_lines": ["int dx[4] = {0, 0, -1, 1};", "int dy[4] = {1, -1, 0, 0};", "int main() {", "    int n;", "    cin >> n;", "    vector<string> s;", "    char c;", "    string tmp;", "    for (int i = 0; i < n; i += 1) {", "        cin >> tmp;", "        s.push_back(tmp);", "        transform(s[i].begin(), s[i].end(), s[i].begin(), ::tolower);", "    }", "    string shit, fuck;", "    cin >> shit >> c;", "    string save = shit;", "    fuck = shit;", "    transform(save.begin(), save.end(), save.begin(), ::tolower);", "    int rep[save.size()] = {};", "    for (int i = 0; i < n; i += 1)", "        for (int j = 0; j < shit.size(); j += 1) {", "            if (j + s[i].size() - 1 >= save.size()) continue;", "            if (save.substr(j, s[i].size()) == s[i])", "                for (int k = 0; k < s[i].size(); k += 1) rep[k + j] = 1;", "        }", "    for (int i = 0; i < shit.size(); i += 1) {", "        if (rep[i]) {", "            if (save[i] != c)", "                shit[i] = c;", "            else {", "                if (c == 'a')", "                    shit[i] = 'b';", "                else", "                    shit[i] = 'a';", "            }", "            if (fuck[i] <= 'Z' && fuck[i] >= 'A') shit[i] = (char)toupper(shit[i]);", "        }", "    }", "    cout << shit << '\\n';", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["MAXN = const integer with MAXN = 1e6 + 10", "INF = const integer with INF = 1e9 + 7", "res, a, ans = strings with a = array of size 110", "lt = character", "isU, vis = bool array of size 110", "define the main function", "    n = integer", "    read n", "    for i = 0 to n exclusive", "        read a[i]", "        for j = 0 to a[i].length() exclusive", "            if (isupper(a[i][j])), a[i][j] = a[i][j] - A - a", "    end of the block", "    read res", "    ans = res", "    for i = 0 to res.length() exclusive", "        if (isupper(res[i]))", "            res[i] = res[i] - A - a", "            isU[i] = 1", "        end of the block", "    read lt", "    for i = 0 to res.length() exclusive", "        for j = 0 to n exclusive", "            if (res[i] =is a[j][0])", "                k = integer", "                for k = 0 to a[j].length() exclusive", "                    if (res[i + k] is not a[j][k]), break loop", "                if (k is a[j].length())", "                    for k = 0 to a[j].length() exclusive", "                        if (vis[i + k]), continue next iteration", "                        if (res[i + k] is not lt)", "                            ans[i + k] = if isU[i + k], lt - a + A else lt", "                        else", "                            for L = a to z", "                                if (res[i + k] is not L)", "                                    ans[i + k] = if isU[i + k], L - a + A else L", "                                    break loop", "                                end of the block", "                        vis[i + k] = 1", "                    end of the block", "            end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 1e6 + 10;", "const int INF = 1e9 + 7;", "string res, a[110], ans;", "char lt;", "bool isU[110], vis[110];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; i++) {", "        cin >> a[i];", "        for (int j = 0; j < a[i].length(); j++)", "            if (isupper(a[i][j])) a[i][j] -= 'A' - 'a';", "    }", "    cin >> res;", "    ans = res;", "    for (int i = 0; i < res.length(); i++)", "        if (isupper(res[i])) {", "            res[i] -= 'A' - 'a';", "            isU[i] = 1;", "        }", "    cin >> lt;", "    for (int i = 0; i < res.length(); i++)", "        for (int j = 0; j < n; j++)", "            if (res[i] == a[j][0]) {", "                int k;", "                for (k = 0; k < a[j].length(); k++)", "                    if (res[i + k] != a[j][k]) break;", "                if (k == a[j].length())", "                    for (k = 0; k < a[j].length(); k++) {", "                        if (vis[i + k]) continue;", "                        if (res[i + k] != lt)", "                            ans[i + k] = isU[i + k] ? lt - 'a' + 'A' : lt;", "                        else", "                            for (int L = 'a'; L <= 'z'; L++)", "                                if (res[i + k] != L) {", "                                    ans[i + k] = isU[i + k] ? L - 'a' + 'A' : L;", "                                    break;", "                                }", "                        vis[i + k] = 1;", "                    }", "            }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["let maxn be const integer with maxn = 1e5 + 10", "let arr be array of booleans of size maxn", "let s be string and ss be array of strings of size maxn", "let c be char", "let n be integer", "in function input", "    read n", "    for i = 0 to n exclusive, read ss[i]", "    read s, c", "end of the block", "in function low which takes char x and returns char", "    if x is greater than or equal to A and x is less than or equal to Z, update x to x - 'A' + 'a'", "    return x", "end of the block", "define the main function", "    call input", "    let w be integer with w = size of s", "    for i = 0 to n exclusive", "        for wi = 0 to till wi + size of ss[i] - 1 is less than w", "            let b be boolean with b = true", "            for ssj = wi to till ssj is less than wi + size of ss[i]", "                if low of s[ssj] is not equal to low of ss[i][ssj-wi]", "                    set b to false", "                    break", "                end of the block", "            end of the block", "            if b is not false", "                for ssj = wi to till ssj is less than wi + size of ss[i], set arr[ssj] to true", "        end of the block", "    end of the block", "    for i = 0 to w exclusive", "        if arr[i] is not zero", "            if low of s[i] is equal to c", "                if c is equal to 'a'", "                    update s[i] to s[i] + ('b' - low of s[i])", "                else", "                    update s[i] to s[i] + ('a' - low of s[i])", "            else", "                update s[i] to s[i] + (c - low of s[i])", "        end of the block", "    print out s with newline", "end of the block"], "code_lines": ["const int maxn = 1e5 + 10;", "bool arr[maxn];", "string s, ss[maxn];", "char c;", "int n;", "void input() {", "    cin >> n;", "    for (int i = 0; i < n; i++) cin >> ss[i];", "    cin >> s >> c;", "}", "char low(char x) {", "    if (x >= 'A' && x <= 'Z') x = x - 'A' + 'a';", "    return x;", "}", "int main() {", "    input();", "    int w = s.size();", "    for (int i = 0; i < n; i++) {", "        for (int wi = 0; wi + ss[i].size() - 1 < w; wi++) {", "            bool b = true;", "            for (int ssj = wi; ssj < wi + ss[i].size(); ssj++) {", "                if (low(s[ssj]) != low(ss[i][ssj - wi])) {", "                    b = false;", "                    break;", "                }", "            }", "            if (b)", "                for (int ssj = wi; ssj < wi + ss[i].size(); ssj++) arr[ssj] = true;", "        }", "    }", "    for (int i = 0; i < w; i++)", "        if (arr[i]) {", "            if (low(s[i]) == c) {", "                if (c == 'a')", "                    s[i] += ('b' - low(s[i]));", "                else", "                    s[i] += ('a' - low(s[i]));", "            } else", "                s[i] += (c - low(s[i]));", "        }", "    cout << s << endl;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["s = vector of string", "b1 = bool array of size 100000", "cap = bool array of size 100000", "define the main function", "    w = string", "    s1 = string", "    n = integer", "    read n", "    for i = 0 to n exclusive", "        read s1", "        for j = 0 to s1.length() exclusive", "            if (s1[j] >= A and s1[j] <= Z), s1[j] = s1[j] + a - A", "        append s1 in s", "    end of the block", "    read w", "    set all contents of cap to 0", "    for i = 0 to w.length() exclusive", "        if (w[i] >= A and w[i] <= Z)", "            cap[i] = true", "            w[i] = w[i] + a - A", "        end of the block", "    b = bool", "    set all contents of b1 to 0", "    for i = 0 to n exclusive", "        for j = 0 to w.length() exclusive", "            b = true", "            if (j + s[i].length() > w.length())", "                b = false", "            else", "                for k = j to j + s[i].length() exclusive", "                    if (w[k] is not s[i][k - j]), b = false", "            end of the block", "            if (b)", "                for k = j to j + s[i].length(), b1[k] = true", "            end of the block", "        end of the block", "    end of the block", "    l = character", "    read l", "    for i = 0 to w.length() exclusive", "        if (b1[i])", "            if (w[i] is not l)", "                w[i] = l", "            else if (w[i] is not a)", "                w[i] = a", "            else", "                w[i] = b", "        end of the block", "    for i = 0 to w.length() exclusive", "        if (cap[i]), w[i] = w[i] + A - a", "    print w", "    return to indicate successful execution", "end of the block"], "code_lines": ["vector<string> s;", "bool b1[100000];", "bool cap[100000];", "int main() {", "    string w;", "    string s1;", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; i++) {", "        cin >> s1;", "        for (int j = 0; j < s1.length(); j++)", "            if (s1[j] >= 'A' && s1[j] <= 'Z') s1[j] += 'a' - 'A';", "        s.push_back(s1);", "    }", "    cin >> w;", "    memset(cap, 0, sizeof cap);", "    for (int i = 0; i < w.length(); i++)", "        if (w[i] >= 'A' && w[i] <= 'Z') {", "            cap[i] = true;", "            w[i] += 'a' - 'A';", "        }", "    bool b;", "    memset(b1, 0, sizeof b1);", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < w.length(); j++) {", "            b = true;", "            if (j + s[i].length() > w.length())", "                b = false;", "            else {", "                for (int k = j; k < j + s[i].length(); k++)", "                    if (w[k] != s[i][k - j]) b = false;", "            }", "            if (b) {", "                for (int k = j; k < j + s[i].length(); k++) b1[k] = true;", "            }", "        }", "    }", "    char l;", "    cin >> l;", "    for (int i = 0; i < w.length(); i++)", "        if (b1[i]) {", "            if (w[i] != l)", "                w[i] = l;", "            else if (w[i] != 'a')", "                w[i] = 'a';", "            else", "                w[i] = 'b';", "        }", "    for (int i = 0; i < w.length(); i++)", "        if (cap[i]) w[i] += 'A' - 'a';", "    cout << w << endl;", "    return 0;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["n, m = integers", "k = integer", "debug = bool with debug = false", "bl = integer array of size 103", "define the main function", "    read n", "    s, a, ss, S, let = strings with a = array of size n", "    for i = 0 to n exclusive", "        read a[i]", "        transform(a[i].begin(), a[i].end(), a[i].begin(), tolower)", "    end of the block", "    read S, let", "    resize S.size() of ss", "    transform(S.begin(), S.end(), ss.begin(), tolower)", "    for i = 0 to n exclusive", "        pos = long long with pos = ss.find(a[i])", "        while (pos is not string npos)", "            for j = 0 to a[i].size() exclusive, bl[j + pos] = 1", "            pos = ss.find(a[i], pos + 1)", "        end of the block", "    end of the block", "    ans = string with ans = \"\"", "    for i = 0 to ss.size() exclusive", "        if (bl[i])", "            if (ss[i] is let[0])", "                if (ss[i] is not a)", "                    if (isupper(S[i]))", "                        ans = ans + A", "                    else", "                        ans = ans + a", "                else", "                    if (isupper(S[i]))", "                        ans = ans + B", "                    else", "                        ans = ans + b", "                end of the block", "                continue next iteration", "            end of the block", "            if (isupper(S[i]))", "                ans = ans + toupper(let[0])", "            else", "                ans = ans + let", "        else", "            ans = ans + S[i]", "        end of the block", "    end of the block", "    print ans.c_str()", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, m;", "int k;", "bool debug = false;", "int bl[103];", "int main() {", "    cin >> n;", "    string s, a[n], ss, S, let;", "    for (int i = 0; i < n; i++) {", "        cin >> a[i];", "        transform(a[i].begin(), a[i].end(), a[i].begin(), ::tolower);", "    }", "    cin >> S >> let;", "    ss.resize(S.size());", "    transform(S.begin(), S.end(), ss.begin(), ::tolower);", "    for (int i = 0; i < n; i++) {", "        long long pos = ss.find(a[i]);", "        while (pos != string::npos) {", "            for (int j = 0; j < a[i].size(); j++) { bl[j + pos] = 1; }", "            pos = ss.find(a[i], pos + 1);", "        }", "    }", "    string ans = \"\";", "    for (int i = 0; i < ss.size(); i++) {", "        if (bl[i]) {", "            if (ss[i] == let[0]) {", "                if (ss[i] != 'a') {", "                    if (isupper(S[i]))", "                        ans += 'A';", "                    else", "                        ans += 'a';", "                } else {", "                    if (isupper(S[i]))", "                        ans += 'B';", "                    else", "                        ans += 'b';", "                }", "                continue;", "            }", "            if (isupper(S[i]))", "                ans += toupper(let[0]);", "            else", "                ans += let;", "        } else {", "            ans += S[i];", "        }", "    }", "    puts(ans.c_str());", "    return 0;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "95A", "pseudocode_lines": ["integer array = n,d[111]", "array a size 111, s, t = string", "create character variable", "define the main function", "    read n", "    for i = 1 to less than or equal to n do the following", "        read a[i]", "        for j = 0 to less than a[i].size() do the following", "            if a[i][j] is greater than or equal to a then subtract 32 from a[i][j]", "    end of the block", "    read s", "    set t to s", "    read lucky", "    if lucky is greater than or equal to a then subtract 32 from lucky", "    integers = sl = s.length()", "    for i = 0 to less than sl do the following", "        if s[i] is greater than or equal to a then subtract 32 from s[i], d[i] = 1", "    end of the block", "    for i = 0 to less than sl do the following", "        for j = 1 to less than or equal to n do the following", "            integers l = a[j].length()", "            if i + l is less than or equal to sl and s.substr(i, l) is a[j]then do the following", "                for k = 0 to less than l do the following", "                    if s[i + k] is lucky then do the following", "                        if lucky is A then do the following", "                            set t[i + k] to b if d[i + k] is true or else d[i+k] = B)", "                        else", "                            set t[i + k] to b if d[i + k] is true or else d[i+k] = A)", "                    else", "                        set t[i + k] to lucky+32 if d[i + k]is true else t[i+k] = lucky", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    output t", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, d[111];", "string a[111], s, t;", "char lucky;", "int main() {", "    cin >> n;", "    for (int i = 1; i <= n; i++) {", "        cin >> a[i];", "        for (int j = 0; j < a[i].size(); j++)", "            if (a[i][j] >= 'a') a[i][j] -= 32;", "    }", "    cin >> s;", "    t = s;", "    cin >> lucky;", "    if (lucky >= 'a') lucky -= 32;", "    int sl = s.length();", "    for (int i = 0; i < sl; i++) {", "        if (s[i] >= 'a') s[i] -= 32, d[i] = 1;", "    }", "    for (int i = 0; i < sl; i++) {", "        for (int j = 1; j <= n; j++) {", "            int l = a[j].length();", "            if (i + l <= sl && s.substr(i, l) == a[j]) {", "                for (int k = 0; k < l; k++) {", "                    if (s[i + k] == lucky) {", "                        if (lucky == 'A')", "                            t[i + k] = (d[i + k] ? 'b' : 'B');", "                        else", "                            t[i + k] = (d[i + k] ? 'a' : 'A');", "                    } else", "                        t[i + k] = (d[i + k] ? lucky + 32 : lucky);", "                }", "            }", "        }", "    }", "    cout << t << \"\\n\";", "    return 0;", "}"], "testcases": [[["3", "bers", "ucky", "elu", "PetrLoveLuckyNumbers", "t"], ["PetrLovtTttttNumtttt"]], [["4", "hello", "party", "abefglghjdhfgj", "IVan", "petrsmatchwin", "a"], ["petrsmatchwin"]], [["2", "aCa", "cba", "abAcaba", "c"], ["abCacba"]], [["3", "lol", "hello", "eho", "PetrUnited", "t"], ["PetrUnited"]], [["2", "trsd", "dream", "PetrsDreamOh", "y"], ["PeyyyYyyyyOh"]], [["1", "PetrsDreamOh", "PetrsDreamOh", "h"], ["HhhhhHhhhhHa"]], [["3", "etr", "ed", "ied", "PetrUnited", "d"], ["PdddUnitda"]], [["3", "etr", "ed", "ied", "PetrUnited", "z"], ["PzzzUnitzz"]], [["3", "ab", "Ba", "aB", "ABBA", "a"], ["BAAB"]], [["3", "ab", "Ba", "aB", "ABBAC", "b"], ["BAABC"]], [["7", "a", "b", "g", "k", "e", "t", "t", "A", "a"], ["B"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesHockeyTeam", "p"], ["CodeForpppPpcpppPeam"]], [["4", "Efron", "Keyt", "cesho", "cool", "CodeForcesOldHockeyNewTeam", "p"], ["CodeForcesOldHockeyNewTeam"]], [["2", "A", "B", "abababBabaBBaBBBBAaaaAAAAA", "a"], ["bababaAbabAAbAAAABbbbBBBBB"]], [["7", "S", "T", "g", "i", "O", "r", "q", "kljpfP", "v"], ["kljpfP"]], [["47", "V", "S", "g", "r", "C", "R", "B", "b", "l", "W", "J", "i", "U", "n", "q", "q", "j", "L", "R", "u", "Q", "C", "f", "C", "U", "u", "x", "h", "q", "E", "Y", "u", "K", "t", "M", "U", "A", "A", "s", "i", "V", "T", "j", "b", "k", "W", "N", "NlVwRlWzQQWoCI", "z"], ["ZzZzZzZzZZZoZZ"]], [["47", "jw", "L", "xIp", "W", "I", "aI", "Ep", "ylG", "Ne", "EglZ", "oYkyo", "wDuZK", "DVh", "uoAoF", "GWj", "t", "P", "uNQz", "bPSg", "eqru", "xvll", "O", "mb", "CM", "wnmvv", "YpFsq", "FYID", "c", "r", "rhbl", "YseyB", "RGcRj", "hDtz", "W", "QlQWB", "Y", "ftSl", "yPlAd", "LPgVw", "EIGOF", "TQ", "QrFcr", "spu", "K", "IJ", "fXUd", "GhpV", "DxUhKXELSLIiJMIOsbrpPQPXFwH", "w"], ["DxUhWXEWSWWwWMWWsbwwWQWXFaH"]], [["74", "Pjc", "ZcOWk", "M", "yMyp", "cH", "TzmX", "A", "Xgl", "KVB", "bljv", "IH", "u", "nu", "LdahF", "t", "O", "Sv", "uzFT", "zfNd", "UM", "bXR", "UQbXk", "AA", "gVmH", "ng", "F", "K", "HP", "Iu", "wrH", "N", "PnTIQ", "kUY", "yabHN", "TA", "vrgl", "yxmsh", "TrQ", "X", "vIbrl", "Mfu", "PfN", "i", "rH", "t", "Hl", "Uwst", "j", "B", "BiDCA", "JcE", "fd", "bXuI", "WWSU", "rd", "mj", "t", "IGrPe", "Ql", "xfoSV", "o", "WKdG", "Tqeu", "E", "bZyg", "bVqR", "zY", "ZD", "hHpdP", "jHww", "lfU", "gVem", "t", "BD", "hUOfmkiMZhZxTuuiAyPuoutEQiPfZFSQVMMQxckAqtlRv", "x"], ["hXXxxxxXZhZaXxxxXyPxxxxXQxPxZXSQVXXQacxXqxlRv"]], [["74", "ULa", "n", "vq", "bybI", "fCX", "EEi", "Sg", "xj", "IDz", "fsP", "M", "GGjx", "DpY", "gffu", "K", "My", "qbtz", "k", "bLNb", "qET", "N", "BBY", "x", "KHUT", "Uju", "tyXI", "o", "ChXY", "eia", "R", "akHR", "g", "ax", "KyY", "wpdl", "CZA", "smFl", "LVDJ", "O", "xHF", "W", "TMZ", "vN", "qiT", "g", "I", "PsR", "sCJL", "N", "aSCi", "JYD", "P", "A", "M", "T", "G", "gU", "k", "A", "loT", "EbP", "Z", "Eoo", "Q", "GGY", "ZcbG", "tvYl", "M", "czMR", "j", "e", "lLjf", "Y", "zm", "qifNoaopvznANCLmPpfToShyelsYSFllyQLUDYbcQ", "g"], ["ggfGggggvggGGCLgGgfGgShgglsGSFllgGLUDGbcG"]], [["74", "M", "LQ", "H", "cA", "qj", "D", "nj", "zD", "jM", "s", "R", "oC", "Fh", "lO", "j", "c", "En", "AB", "sw", "T", "z", "Eb", "b", "u", "mj", "MI", "D", "j", "H", "p", "zD", "V", "R", "vg", "H", "S", "By", "u", "QP", "B", "dD", "rI", "JF", "nA", "sv", "z", "a", "l", "I", "FJ", "K", "H", "T", "F", "l", "tC", "g", "s", "Nl", "Uj", "u", "A", "OO", "Ld", "k", "k", "kM", "LY", "bn", "v", "fT", "C", "I", "c", "aeBolOleYgGmSLkFCPJPbQZUeodomjS", "v"], ["vvVovVveYvVvVVvVVVVVvQVVeovovvV"]], [["99", "s", "c", "N", "N", "i", "i", "W", "J", "A", "W", "m", "B", "f", "O", "m", "k", "Q", "f", "x", "p", "l", "H", "H", "o", "n", "C", "K", "R", "s", "T", "J", "v", "C", "Z", "d", "l", "r", "o", "D", "g", "a", "A", "E", "k", "N", "w", "a", "b", "o", "k", "v", "c", "i", "j", "E", "l", "o", "f", "v", "s", "h", "x", "m", "E", "N", "t", "j", "k", "g", "k", "X", "W", "i", "X", "m", "w", "K", "L", "Q", "r", "j", "f", "o", "w", "v", "S", "o", "H", "e", "L", "L", "d", "P", "r", "g", "z", "z", "q", "d", "BBPVyRDLuNwdkeSYWimsIMiAPiOMQfuDQMcLEly", "q"], ["QQQQyQQQuQqqqqQYQqqqQQqQQqQQAquQAQqQQqy"]], [["77", "Gw", "Zw", "qg", "eO", "mx", "fE", "qD", "Vv", "Rs", "bd", "wA", "nh", "Dm", "bR", "xV", "we", "KH", "bl", "Vy", "aJ", "Fr", "NP", "ir", "xh", "Fq", "DG", "Nh", "dW", "aG", "km", "NS", "Om", "yC", "ts", "Zt", "EN", "Fs", "jA", "vf", "de", "Da", "AW", "Bv", "mO", "Dk", "Yj", "fl", "dj", "JF", "dI", "hr", "zk", "am", "LT", "PJ", "AQ", "OW", "WN", "UG", "TL", "SZ", "BK", "Lp", "jW", "rY", "PB", "Rj", "Bw", "gl", "lK", "Wj", "Pl", "fx", "YO", "bX", "SN", "Pt", "xPDCKNGWsNSlScKgBNEooOTnSuycVtvdToGmFoEfsUorvsSNcQIlaXRQqrfTZZoNvjutjhGpGXmNSQQWCzeHhMJAxclmiNnErpxH", "h"], ["xPDCKNHHhHHlScKgBNHhoOThHuhhVtvdToGmFoEhhUorvsHHcQIlaXRQqrfTZZoNvjutjhGpGXmHHQQWCzeHhMHHxclmiNnErphA"]], [["100", "qn", "BE", "yN", "ep", "Pq", "Xz", "LM", "EZ", "db", "Mn", "bn", "Fe", "qA", "zc", "yq", "pC", "yA", "Wk", "Yq", "rs", "oD", "vD", "zW", "xZ", "bl", "ur", "kf", "df", "LS", "UW", "My", "hR", "sh", "Nh", "og", "CW", "or", "zo", "rO", "ao", "XH", "Dq", "Ka", "lL", "YQ", "Oh", "RZ", "Ax", "ta", "ko", "Dn", "Ng", "Ny", "DB", "YD", "jO", "Ap", "FT", "oB", "Nc", "wB", "HO", "eW", "Ac", "Dr", "Mt", "Df", "bF", "FP", "Ra", "nF", "hF", "XC", "nG", "an", "ZY", "uB", "HP", "OR", "KN", "Uv", "Le", "Ij", "lH", "Vw", "jb", "Xn", "qu", "Jo", "zL", "KW", "LS", "aV", "Ls", "BX", "MY", "oK", "fh", "gP", "TB", "pBWBEkqznLlZykhmPrfidzWbQMNDdBaDLykOfdvOZjKoUxCqKwJdGuhseuxaYcVyAGTSTwXYmKweRMUdbyfxssSNGLSAhckIknDj", "d"], ["pBDDDkqznDdDdkhmPrfiddDdQDDDaDaDLydDfdvOZjDdUdDqDdJdGuhseuxaYcVdDGTSTwXYmDdeRMUadyfxssSDDDDAhckIddDj"]], [["3", "a", "A", "a", "A", "a"], ["B"]], [["3", "a", "A", "a", "A", "b"], ["B"]], [["4", "a", "A", "i", "A", "PetyaIsVeryCoolGuy", "p"], ["PetypPsVeryCoolGuy"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "c"], ["CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"]], [["3", "jap", "thd", "dshipssinceW", "JapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper", "a"], ["AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"]], [["7", "a", "h", "u", "p", "fgh", "wyz", "defghijkl", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaamnoaqrstavwxyz"]], [["9", "a", "h", "u", "p", "z", "fgh", "wyz", "defghijkl", "ghijklmnopqrstu", "abcdefghijklmnopqrstuvwxyz", "a"], ["bbcaaaaaaaaaaaaaaaaaavwxya"]], [["3", "ab", "Ba", "aB", "ABBA", "l"], ["LLLL"]]]}, {"problem_id": "442A", "pseudocode_lines": ["create constant integer variable with name N = 150", "declare integer arrays x, y and info with size N, and a variable n", "integer function color_to_id with char argument ch", "    if ch = 'R', return 1", "    if ch is equal to 'G', return 2", "    if ch = 'B', return 3", "    if ch = 'Y', return 4", "    if ch is equal to 'W', return 5", "end of the block", "function count_one with int argument x that returns int", "    create integer variable called cnt with value 0", "    while x", "        change cnt to the sum of cnt and x & 1", "        change x to x >> 1", "    end of the block", "    return cnt", "end of the block", "bool function check with int argument sta", "    for i = 0 to n exclusive incrementing i", "        change info[i] to 0", "        set info[i] to info[i] | (1 << (x[i] - 1)) & sta", "        change the value of info[i] to info[i] | (1 << (y[i] - 1 + 5)) & sta", "        in a for loop, change j from 0 to i exclusive", "            return false if info[i] = info[j] and (x[i] != x[j] or y[i] != y[j])", "    end of the block", "    return true", "end of the block", "define the main function", "    declare string variable with name str", "    read n and loop further", "        for i = 0 to n exclusive incrementing i", "            read input to str", "            change the value of x[i] to color_to_id(str[0])", "            set y[i] to str[1] - '0'", "        end of the block", "        define integer ans with value 10", "        for integer i = 0 to 1 << 10 exclusive", "            declare new integer variable n_one with value = result of count_one(i)", "            if n_one >= ans, go to the start of the loop", "            if check(i) returned true, set the value of ans to n_one", "        end of the block", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 150;", "int x[N], y[N], info[N], n;", "int color_to_id(char ch) {", "    if (ch == 'R') return 1;", "    if (ch == 'G') return 2;", "    if (ch == 'B') return 3;", "    if (ch == 'Y') return 4;", "    if (ch == 'W') return 5;", "}", "int count_one(int x) {", "    int cnt = 0;", "    while (x) {", "        cnt += (x & 1);", "        x >>= 1;", "    }", "    return cnt;", "}", "bool check(int sta) {", "    for (int i = 0; i < n; i++) {", "        info[i] = 0;", "        info[i] |= (1 << (x[i] - 1)) & sta;", "        info[i] |= (1 << (y[i] - 1 + 5)) & sta;", "        for (int j = 0; j < i; j++)", "            if (info[i] == info[j] && (x[i] != x[j] || y[i] != y[j])) return false;", "    }", "    return true;", "}", "int main() {", "    string str;", "    while (cin >> n) {", "        for (int i = 0; i < n; i++) {", "            cin >> str;", "            x[i] = color_to_id(str[0]);", "            y[i] = str[1] - '0';", "        }", "        int ans = 10;", "        for (int i = 0; i < (1 << 10); i++) {", "            int n_one = count_one(i);", "            if (n_one >= ans) continue;", "            if (check(i)) ans = n_one;", "        }", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["ans, n = int and b = int array of size 20", "a = two dimensional bool array of sizes 10 and 10", "in function check returning bool", "    i, j, r, l, tot = int", "    for i = 1 to 5 inclusive", "        set l and r to 0", "        for j = 1 to 5 inclusive", "            if a[i][j]", "                increment l", "                if b[j] increment r", "            end of the block", "        end of the block", "        if l - 1 > r return false", "    end of the block", "    for i = 1 to 5 inclusive", "        set l and r to 0", "        for j = 1 to 5 inclusive", "            if a[i][j]", "                increment l", "                if b[5 + j] increment r", "            end of the block", "        end of the block", "        if l - 1 > r return false", "    end of the block", "    set tot to 0", "    for i = 1 to 5 inclusive", "        for j = 1 to 5 inclusive", "            if a[i][j] and not b[i + 5] and not b[j] increment tot", "        end of the block", "    end of the block", "    if tot > 1 return false", "    return true", "end of the block", "in function dfs taking int x", "    i, sum = int", "    if x is 11", "        if check", "            set sum to 0", "            for i = 1 to 11 inclusive", "                if b[i] is 1 increment sum", "            end of the block", "            set ans to min of sum, ans", "        end of the block", "        return", "    end of the block", "    set b[x] to 1", "    call dfs of x + 1", "    set b[x] to 0", "    call dfs of x + 1", "end of the block", "define the main function", "    i, y = int", "    ch = char", "    k = int", "    read n", "    set all values of a to false", "    for i = 1 to n inclusive", "        read ch then k", "        if ch is 'R'", "            set y to 1", "        else if ch is 'G'", "            set y to 2", "        else if ch is 'B'", "            set y to 3", "        else if ch is 'Y'", "            set y to 4", "        else if ch is 'W'", "            set y to 5", "        set a[y][k] to true", "    end of the block", "    set all values of b to 0", "    set ans to 9999999", "    noop", "    call dfs of 1", "    print ans", "end of the block"], "code_lines": ["int b[20], ans, n;", "bool a[10][10];", "bool check() {", "    int i, j, r, l, tot;", "    for (i = 1; i <= 5; i++) {", "        l = r = 0;", "        for (j = 1; j <= 5; j++) {", "            if (a[i][j]) {", "                l++;", "                if (b[j]) { r++; }", "            }", "        }", "        if (l - 1 > r) return false;", "    }", "    for (i = 1; i <= 5; i++) {", "        l = r = 0;", "        for (j = 1; j <= 5; j++) {", "            if (a[j][i]) {", "                l++;", "                if (b[5 + j]) r++;", "            }", "        }", "        if (l - 1 > r) return false;", "    }", "    tot = 0;", "    for (i = 1; i <= 5; i++) {", "        for (j = 1; j <= 5; j++) {", "            if (a[i][j] && !b[i + 5] && !b[j]) tot++;", "        }", "    }", "    if (tot > 1) return false;", "    return true;", "}", "void dfs(int x) {", "    int i, sum;", "    if (x == 11) {", "        if (check()) {", "            sum = 0;", "            for (i = 1; i <= 11; i++) {", "                if (b[i] == 1) sum++;", "            }", "            ans = min(sum, ans);", "        }", "        return;", "    }", "    b[x] = 1;", "    dfs(x + 1);", "    b[x] = 0;", "    dfs(x + 1);", "}", "int main() {", "    int i, y;", "    char ch;", "    int k;", "    cin >> n;", "    memset(a, false, sizeof(a));", "    for (i = 1; i <= n; i++) {", "        cin >> ch >> k;", "        if (ch == 'R')", "            y = 1;", "        else if (ch == 'G')", "            y = 2;", "        else if (ch == 'B')", "            y = 3;", "        else if (ch == 'Y')", "            y = 4;", "        else if (ch == 'W')", "            y = 5;", "        a[y][k] = true;", "    }", "    memset(b, 0, sizeof(b));", "    ans = 9999999;", "    ;", "    dfs(1);", "    cout << ans << endl;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["new static double constant EPS = 1e-5", "new chat array colortable with elements 'R', 'G', 'B', 'Y' and 'W'", "int function getX with string argument s", "    for i from 0 to 5 exclusive incrementing i", "        if colortable[i] is equal to s[0], return i", "    end of the block", "    return -1", "end of the block", "getY is a integer function with string argument s", "    return s[1] - '1'", "end of the block", "bitcount is a int function with int argument b", "    declare new integer variable ans = 0", "    while b != 0", "        increment ans", "        change b to b & (b - 1)", "    end of the block", "    return ans", "end of the block", "bool function check with int arguments maskX and maskY and string arguments C1 and C2", "    x1 is a new integer = result of getX(C1)", "    create new integer variable x2 with value from getX(C2)", "    declare integer variable y1 = value, returned by getY(C1)", "    declare integer y2 = result of getY(C2)", "    return true if x1 is equal to x2 and y1 = y2", "    if x1 != x2", "        if (maskX & (1 << x1)) != 0 || (maskX & (1 << x2)) != 0, return true", "    end of the block", "    if y1 != y2", "        if (maskY & (1 << y1)) != 0 || (maskY & (1 << y2)) != 0, return true", "    end of the block", "    return false", "end of the block", "define the main function", "    declare new integer variable n", "    read n", "    cards is a new vector of strings with n elements", "    read n elements from the input into cards in a loop", "    declare new integer ans = 100000", "    sort cards", "    remove duplicates from cards", "    start for loop from maskX = 0 to 1 << 5 exclusive", "        start for loop from maskY = 0 to 1 << 5 exclusive incrementing maskY", "            create boolean variable with name ok = true", "            incremen i in a loop from 0, while ok is true and i < size of cards", "                for j from i + 1 to exclusive, assign the result of check(maskX, maskY, cards[i], cards[j]) to ok", "            end of the block", "            if ok is true, set the value of ans to min of ans and bitcount(maskX) + bitcount(maskY)", "        end of the block", "    end of the block", "    print ans to the standard output", "    return to indicate successful execution", "end of the block"], "code_lines": ["static const double EPS = 1e-5;", "char colortable[] = {'R', 'G', 'B', 'Y', 'W'};", "int getX(string s) {", "    for (int i = 0; i < 5; i++) {", "        if (colortable[i] == s[0]) return i;", "    }", "    return -1;", "}", "int getY(string s) {", "    return s[1] - '1';", "}", "int bitcount(int b) {", "    int ans = 0;", "    while (b != 0) {", "        ans++;", "        b &= b - 1;", "    }", "    return ans;", "}", "bool check(int maskX, int maskY, string C1, string C2) {", "    int x1 = getX(C1);", "    int x2 = getX(C2);", "    int y1 = getY(C1);", "    int y2 = getY(C2);", "    if (x1 == x2 && y1 == y2) return true;", "    if (x1 != x2) {", "        if ((maskX & (1 << x1)) != 0 || (maskX & (1 << x2)) != 0) return true;", "    }", "    if (y1 != y2) {", "        if ((maskY & (1 << y1)) != 0 || (maskY & (1 << y2)) != 0) return true;", "    }", "    return false;", "}", "int main() {", "    int n;", "    cin >> n;", "    vector<string> cards(n);", "    for (int i = 0; i < n; i++) cin >> cards[i];", "    int ans = 100000;", "    sort(cards.begin(), cards.end());", "    cards.erase(unique(cards.begin(), cards.end()), cards.end());", "    for (int maskX = 0; maskX < (1 << 5); maskX++) {", "        for (int maskY = 0; maskY < (1 << 5); maskY++) {", "            bool ok = true;", "            for (int i = 0; ok && (i < (int)cards.size()); i++) {", "                for (int j = i + 1; ok && (j < (int)cards.size()); j++) { ok = check(maskX, maskY, cards[i], cards[j]); }", "            }", "            if (ok) { ans = min(ans, bitcount(maskX) + bitcount(maskY)); }", "        }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["make constant ints N = 5e5 and inf = 1e9", "create map m of chars to ints", "create int n and int arrays tmp of size N, x of size N, and y of size N", "declare Ok taking in int cur and returning bool", "    for i = 0 to n exclusive", "        set tmp[i] to 0", "        set tmp[i] to tmp[i] | (1 << (x[i] - 1)) & cur", "        set tmp[i] to tmp[i] | (1 << (y[i] - 1 + 5)) & cur", "        for j = 0 to i exclusive", "            if tmp[i] is equal to tmp[j] and if x[i] is not equal to x[j] or y[i] is not equal to y[j], return false", "        end of the block", "    end of the block", "    return true", "end of the block", "define the main function", "    set M['R'] to 1, M['G'] to 2, M['B'] to 3, M['Y'] to 4, and M['W'] to 5", "    read n", "    for i = 0 to n exclusive", "        make string s", "        read s", "        set x[i] to M[s[0]]", "        set y[i] to s[1] - '0'", "    end of the block", "    create integer res = 10", "    for i = 0 to (1 << 10) exclusive", "        make integer cur = _builtin_popcount(i)", "        if cur is greater than or equal to res, continue loop", "        if Ok(i) is truthy, set res to cur", "    end of the block", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 5e5, inf = 1e9 + 7;", "map<char, int> M;", "int tmp[N], x[N], y[N], n;", "bool Ok(int cur) {", "    for (int i = 0; i < n; i++) {", "        tmp[i] = 0;", "        tmp[i] |= (1 << (x[i] - 1)) & cur;", "        tmp[i] |= (1 << (y[i] - 1 + 5)) & cur;", "        for (int j = 0; j < i; j++) {", "            if (tmp[i] == tmp[j] && (x[i] != x[j] || y[i] != y[j])) return false;", "        }", "    }", "    return true;", "}", "int main() {", "    M['R'] = 1, M['G'] = 2, M['B'] = 3, M['Y'] = 4, M['W'] = 5;", "    cin >> n;", "    for (int i = 0; i < n; i++) {", "        string s;", "        cin >> s;", "        x[i] = M[s[0]];", "        y[i] = s[1] - '0';", "    }", "    int res = 10;", "    for (int i = 0; i < (1 << 10); i++) {", "        int cur = __builtin_popcount(i);", "        if (cur >= res) continue;", "        if (Ok(i)) res = cur;", "    }", "    cout << res << \"\\n\";", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["create new integer constant INF = 2147483647", "define integer constant mod =1000000007", "new constant integer tmod = 1000000009", "let ma be a map from characters to integers", "create new array of integers vis with size 25", "declare vector of integers v", "declare new array of integers sum with size 25", "a1 is an array of integers with 5 elements", "create new array of integers a2 with size 5", "define the main function", "    declare new integer called n", "    read variable n from the input", "    assign 0 to ma['R']", "    change ma['G'] to 1", "    assign the new value = 2 to ma['B']", "    set ma['Y'] to 3", "    assign the new value = 4 to ma['W']", "    start for loop from i = 0 to n exclusive", "        define string str", "        read input to str", "        declare new integer tmp = ma[str[0]] * 5 + str[1] - '1'", "        change vis[tmp] to 1", "    end of the block", "    start for loop from i = 0 to 25 exclusive incrementing i", "        if vis[i] is true, add i to v", "    define integer ans = 10", "    in a for loop, change s from 0 to 1 << 10 exclusive", "        set the values of first sizeof(a1) bytes at the pointer a1 to 0", "        set first sizeof(a2) bytes at the pointer a2 to 0", "        change the values of first sizeof(sum) bytes at the pointer sum to 0", "        create integer pos with value 1", "        for integer i = 0 to 5 exclusive", "            if (s >> i) & 1 != 0, change the value of a1[i] to pos and increment pos", "        declare integer variable with name pos2 = 1", "        for i from 5 to 10 exclusive", "            if (s >> i) & 1 != 0, set a2[i % 5] to pos2 and increase pos2 by 1", "        for integer i = 0 to (ength of v exclusive", "            define integer tmp with value v[i]", "            define new integer called l with value = value of a1[tmp / 5]", "            new integer r = value of a2[tmp % 5]", "            increment sum[l * 5 + r] by one", "        end of the block", "        create new boolean flag = true", "        in a for loop, change i from 0 to 25 exclusive incrementing i", "            if sum[i] is greater than 1", "                assign the new value = false to flag", "                stop the loop", "            end of the block", "        if flag is false, skip the rest of the loop", "        change ans to min of ans and pos - 1 + pos2 - 1", "    end of the block", "    print ans and '\\n'", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int INF = 2147483647;", "const int mod = 1000000007;", "const int tmod = 1000000009;", "map<char, int> ma;", "int vis[25];", "vector<int> v;", "int sum[25];", "int a1[5];", "int a2[5];", "int main() {", "    int n;", "    cin >> n;", "    ma['R'] = 0;", "    ma['G'] = 1;", "    ma['B'] = 2;", "    ma['Y'] = 3;", "    ma['W'] = 4;", "    for (int i = 0; i < (n); i++) {", "        string str;", "        cin >> str;", "        int tmp = ma[str[0]] * 5 + str[1] - '1';", "        vis[tmp] = 1;", "    }", "    for (int i = 0; i < (25); i++)", "        if (vis[i]) v.push_back(i);", "    int ans = 10;", "    for (int s = 0; s < (1 << 10); s++) {", "        memset(a1, 0, sizeof(a1));", "        memset(a2, 0, sizeof(a2));", "        memset(sum, 0, sizeof(sum));", "        int pos = 1;", "        for (int i = 0; i < 5; i++)", "            if ((s >> i) & 1) a1[i] = pos++;", "        int pos2 = 1;", "        for (int i = 5; i < 10; i++)", "            if ((s >> i) & 1) a2[i % 5] = pos2++;", "        for (int i = 0; i < (v.size()); i++) {", "            int tmp = v[i];", "            int l = a1[tmp / 5];", "            int r = a2[tmp % 5];", "            sum[l * 5 + r]++;", "        }", "        bool flag = true;", "        for (int i = 0; i < (25); i++)", "            if (sum[i] > 1) {", "                flag = false;", "                break;", "            }", "        if (!flag) continue;", "        ans = min(ans, pos - 1 + pos2 - 1);", "    }", "    cout << ans << '\\n';", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["define arrays of shorts X and Y with size 105", "bin is a new array of shorts with size 15", "create constant integer variable C with value 5", "create a map from characters to integers called M", "void function trans with int argument x", "    create new integer variable ind with value 0", "    set first 12 elements of bin to 0", "    while x > 0", "        change the value of bin[ind] to x modulo 2 and increment ind", "        change the value of s quared divided by 2", "    end of the block", "end of the block", "define the main function", "    create new character called ch", "    define new integer n", "    read n from the user input", "    assign 0 to M['R']", "    assign 1 to M['G']", "    change the value of M['B'] to 2", "    assign 3 to M['Y']", "    assign the new value = 4 to M['W']", "    for i = 0 to n exclusive", "        read standard input to ch", "        change the value of X[i] to M[ch]", "        read ch", "        assign the new value = ch - '1' to Y[i]", "    end of the block", "    define integers ans and anst with ans = 20", "    declare boolean variable all", "    new boolean ones = true", "    start for loop from i = 0 to n - 1 exclusive, change ones to (X[i] == X[i + 1] && Y[i] == Y[i + 1]) && ones", "    if ones is false", "        for integer i = 1 to 1023 inclusive incrementing i", "            call trans of i", "            change the value of anst to 0", "            assign the new value = true to all", "            increment k in a loop from 0 to n - 1 exclusive", "                for integer l = k + 1 to n exclusive", "                    if X[k] != X[l] and (bin[X[k]] or bin[X[l]] = 1)", "                        change the value of all to true", "                    else if Y[k] != Y[l] and (bin[Y[k] + C] or bin[Y[l] + C] = 1)", "                        change the value of all to true", "                    else if X[l] = X[k] and Y[l] = Y[k]", "                        assign true to all", "                    else", "                        assign false to all", "                    if all is false, break", "                end of the block", "                if all is false, break the loop", "            end of the block", "            if all is true", "                for i = 0 to 12 exclusive", "                    if bin[i] is equal to 1, increment anst by one", "                change the value of ans to anst of ans > anst", "            end of the block", "        end of the block", "    else", "        print 0", "    if ones is false, print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["short X[105], Y[105];", "short bin[15];", "const int C = 5;", "map<char, int> M;", "void trans(int x) {", "    int ind = 0;", "    for (int j = 0; j < 12; j++) bin[j] = 0;", "    while (x > 0) {", "        bin[ind++] = x % 2;", "        x /= 2;", "    }", "}", "int main() {", "    char ch;", "    int n;", "    cin >> n;", "    M['R'] = 0;", "    M['G'] = 1;", "    M['B'] = 2;", "    M['Y'] = 3;", "    M['W'] = 4;", "    for (int i = 0; i < n; i++) {", "        cin >> ch;", "        X[i] = M[ch];", "        cin >> ch;", "        Y[i] = ch - '1';", "    }", "    int ans = 20, anst;", "    bool all;", "    bool ones = true;", "    for (int i = 0; i < n - 1; i++) ones = (X[i] == X[i + 1] && Y[i] == Y[i + 1]) && ones;", "    if (!ones) {", "        for (int i = 1; i <= 1023; i++) {", "            trans(i);", "            anst = 0;", "            all = true;", "            for (int k = 0; k < n - 1; k++) {", "                for (int l = k + 1; l < n; l++) {", "                    if (X[k] != X[l] && ((bin[X[k]] == 1) || (bin[X[l]] == 1)))", "                        all = true;", "                    else if (Y[k] != Y[l] && ((bin[Y[k] + C] == 1) || bin[Y[l] + C] == 1))", "                        all = true;", "                    else if (X[l] == X[k] && Y[l] == Y[k])", "                        all = true;", "                    else", "                        all = false;", "                    if (!all) break;", "                }", "                if (!all) break;", "            }", "            if (all) {", "                for (int i = 0; i < 12; i++)", "                    if (bin[i] == 1) anst++;", "                ans = ans > anst ? anst : ans;", "            }", "        }", "    } else", "        cout << 0 << endl;", "    if (!ones) cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["N = const int = 150", "let x[N], y[N], info[N], n be ints", "in int function color_to_id taking char ch", "    if ch = 'R' then return 1", "    if ch = 'G' then return 2", "    if ch = 'B' then return 3", "    if ch = 'Y' then return 4", "    if ch = 'W' then return 5", "end of the block", "in int function count_one taking x", "    cnt = 0 = int", "    while x isn't 0", "        increment cnt by x&1", "        x = x bit right shift 1", "    end of the block", "    return cnt", "end of the block", "in bool function check taking sta = int", "    for i = 0 to n exclusive", "        set info[i] = 0", "        info[i] bitwise or (1 bitwise left shift (x[i] - 1)) bitwise and sta", "        info[i] bitwise or (1 bitwise left shift (y[i] - 1 + 5)) bitwise and sta", "        for j = 0 to i exclusive", "            if info[i] = info[j] and (x[i] is not x[j] or y[i] is not y[j])", "    end of the block", "    return true", "end of the block", "define the main function", "    str = string", "    while reading n", "        for i = 0 to n exclusive", "            read str", "            set x[i] = color_to_id of str[0]", "            y[i] = str[1] - '0'", "        end of the block", "        ans = 10 = int", "        for i = 0 to 1 bitwise left shit 10", "            n_one = count_one(i) = int", "            if n_one >= ans then go to next iteration", "            if check(i) then set ans to n_one", "        end of the block", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 150;", "int x[N], y[N], info[N], n;", "int color_to_id(char ch) {", "    if (ch == 'R') return 1;", "    if (ch == 'G') return 2;", "    if (ch == 'B') return 3;", "    if (ch == 'Y') return 4;", "    if (ch == 'W') return 5;", "}", "int count_one(int x) {", "    int cnt = 0;", "    while (x) {", "        cnt += (x & 1);", "        x >>= 1;", "    }", "    return cnt;", "}", "bool check(int sta) {", "    for (int i = 0; i < n; i++) {", "        info[i] = 0;", "        info[i] |= (1 << (x[i] - 1)) & sta;", "        info[i] |= (1 << (y[i] - 1 + 5)) & sta;", "        for (int j = 0; j < i; j++)", "            if (info[i] == info[j] && (x[i] != x[j] || y[i] != y[j])) return false;", "    }", "    return true;", "}", "int main() {", "    string str;", "    while (cin >> n) {", "        for (int i = 0; i < n; i++) {", "            cin >> str;", "            x[i] = color_to_id(str[0]);", "            y[i] = str[1] - '0';", "        }", "        int ans = 10;", "        for (int i = 0; i < (1 << 10); i++) {", "            int n_one = count_one(i);", "            if (n_one >= ans) continue;", "            if (check(i)) ans = n_one;", "        }", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["create integer n, array a with size 105", "create map mp of char to int", "define the main function", "    read n", "    set mp['R'] to 5", "    set mp['G'] to 6", "    set mp['B'] to 7", "    set mp['Y'] to 8", "    set mp['W'] to 9", "    for i = 0 to n exclusive", "        create stirng s", "        read s", "        create ints c, v", "        set c to mp[s[0]]", "        set v to s[1] - '0' - 1", "        set a[i] to (1 bitwise shift left c) bitwise or (1 bitwise shift left v)", "    end of the block", "    sort a [0:n)", "    set n to unique(a, a + n) - a", "    create integer ans = 11", "    for int mask = 0; msk less than (1 bitwise shift left 10); increment msk", "        create bool f = true", "        for i = 0 to n exclusive", "            for j = i + 1 to n exclusive", "                create int t = a[i] bitwise XOR a[j]", "                if (msk bitwise and t) equals 0", "                    set f to false", "                    break", "                end of the block", "            end of the block", "            if not f, break", "        end of the block", "        if f, set ans to min(ans, __builtin_popcount(msk))", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, a[105];", "map<char, int> mp;", "int main() {", "    cin >> n;", "    mp['R'] = 5;", "    mp['G'] = 6;", "    mp['B'] = 7;", "    mp['Y'] = 8;", "    mp['W'] = 9;", "    for (int i = 0; i < n; i++) {", "        string s;", "        cin >> s;", "        int c, v;", "        c = mp[s[0]];", "        v = s[1] - '0' - 1;", "        a[i] = (1 << c) | (1 << v);", "    }", "    sort(a, a + n);", "    n = unique(a, a + n) - a;", "    int ans = 11;", "    for (int msk = 0; msk < (1 << 10); msk++) {", "        bool f = true;", "        for (int i = 0; i < n; i++) {", "            for (int j = i + 1; j < n; j++) {", "                int t = a[i] ^ a[j];", "                if ((msk & t) == 0) {", "                    f = false;", "                    break;", "                }", "            }", "            if (!f) break;", "        }", "        if (f) { ans = min(ans, __builtin_popcount(msk)); }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["create ints ans and n and int array b of size 20", "make bool array a of size 10 with array of size 10", "declare check returning bool", "    make ints i, j, r, l, and tot", "    for i = 1 to 5", "        set l and r to 0", "        for j = 1 to 5", "            if a[i][j] is truthy", "                increment l", "                if b[j] is truthy, add 1 to r", "            end of the block", "        end of the block", "        if l - 1 is greater than r, return false", "    end of the block", "    for i = 1 to 5", "        set l and r to 0", "        for j = 1 to 5", "            if a[j][i] is truthy", "                increment l", "                if b[5 + j] is truthy, increment r", "            end of the block", "        end of the block", "        if l - 1 is greater than r, return false", "    end of the block", "    set tot to 0", "    for i = 1 to 5", "        for j = 1 to 5", "            if a[i][j] is truthy, !b[i + 5] is truthy, and b[j] is falsy, increment tot", "        end of the block", "    end of the block", "    if tot is greater than 1, return false", "    return true", "end of the block", "declare dfs taking in integer x", "    make ints i and sum", "    if x is equal to 11", "        if check() returns true", "            set sum to 0", "            for i = 1 to 11", "                if b[i] is equal to 1, add 1 to sum", "            end of the block", "            set ans to min of sum and ans", "        end of the block", "        return", "    end of the block", "    set b[x] to 1", "    call dfs(x + 1)", "    set b[x] to 0", "    call dfs(x + 1)", "end of the block", "define the main function", "    create ints i and y", "    make char ch", "    let integer k", "    read n", "    set all contents of a to false", "    for i = 1 to n", "        read ch and k", "        if ch is equal to 'R'", "            set y to 1", "        else if ch is equal to 'G'", "            set y to 2", "        else if ch is equal to 'B'", "            set y to 3", "        else if ch is equal to 'Y'", "            set y to 4", "        else if ch is equal to 'W'", "            set y to 5", "        set a[y][k] to true", "    end of the block", "    set all contents of b to 0", "    set ans to 9999999", "    end statement", "    call dfs(1)", "    show ans", "end of the block"], "code_lines": ["int b[20], ans, n;", "bool a[10][10];", "bool check() {", "    int i, j, r, l, tot;", "    for (i = 1; i <= 5; i++) {", "        l = r = 0;", "        for (j = 1; j <= 5; j++) {", "            if (a[i][j]) {", "                l++;", "                if (b[j]) { r++; }", "            }", "        }", "        if (l - 1 > r) return false;", "    }", "    for (i = 1; i <= 5; i++) {", "        l = r = 0;", "        for (j = 1; j <= 5; j++) {", "            if (a[j][i]) {", "                l++;", "                if (b[5 + j]) r++;", "            }", "        }", "        if (l - 1 > r) return false;", "    }", "    tot = 0;", "    for (i = 1; i <= 5; i++) {", "        for (j = 1; j <= 5; j++) {", "            if (a[i][j] && !b[i + 5] && !b[j]) tot++;", "        }", "    }", "    if (tot > 1) return false;", "    return true;", "}", "void dfs(int x) {", "    int i, sum;", "    if (x == 11) {", "        if (check()) {", "            sum = 0;", "            for (i = 1; i <= 11; i++) {", "                if (b[i] == 1) sum++;", "            }", "            ans = min(sum, ans);", "        }", "        return;", "    }", "    b[x] = 1;", "    dfs(x + 1);", "    b[x] = 0;", "    dfs(x + 1);", "}", "int main() {", "    int i, y;", "    char ch;", "    int k;", "    cin >> n;", "    memset(a, false, sizeof(a));", "    for (i = 1; i <= n; i++) {", "        cin >> ch >> k;", "        if (ch == 'R')", "            y = 1;", "        else if (ch == 'G')", "            y = 2;", "        else if (ch == 'B')", "            y = 3;", "        else if (ch == 'Y')", "            y = 4;", "        else if (ch == 'W')", "            y = 5;", "        a[y][k] = true;", "    }", "    memset(b, 0, sizeof(b));", "    ans = 9999999;", "    ;", "    dfs(1);", "    cout << ans << endl;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "442A", "pseudocode_lines": ["make int arrays a of size 1000 and b of size 1000", "create char C of size 1000", "declare B taking in integer x and returning integer", "    create int ans = 0", "    for i = 0 to 10 exclusive", "        if (1 << i) & x is truthy, increment ans", "    return ans", "end of the block", "define the main function", "    create integer n", "    read n", "    for i = 0 to n exclusive", "        read C[i] and a[i]", "        decrease a[i] by 1", "        if C[i] is equal to 'R', set b[i] to 0", "        if C[i] is equal to 'Y', set b[i] to 1", "        if C[i] is equal to 'W', set b[i] to 2", "        if C[i] is equal to 'G', set b[i] to 3", "        if C[i] is equal to 'B', set b[i] to 4", "    end of the block", "    make integer ans = n + 1", "    for i = 0 to 32 exclusive", "        for j = 0 to 32 exclusive", "            make int arrays f of size 5 and g of size 5", "            for k = 0 to 5 exclusive", "                if (1 << k) & 1 is truthy", "                    set f[k] to 1", "                else do", "                    set f[k] to 0", "            for k = 0 to 5 exclusive", "                if (1 << k) & j is truthy", "                    set g[k] to 1", "                otherwise", "                    set g[k] to 0", "            create integer f1 = 1", "            for i = 0 to n exclusive", "                for j = i + 1 to n exclusive", "                    if a[i] is equal to a[j] and b[i] is equal to b[i], continue loop", "                    if a[i] is equal to a[j] and g[b[i]] | g[b[j]] is truthy, continue to next loop iteration", "                    if b[i] is equal to b[j] and f[a[i]] | f[a[j]] is truthy, continue loop", "                    if a[i] is not equal to a[j] and b[i] is not equal to b[j] and f[a[i]] | f[a[j]] | g[b[i]] | g[b[j]] is truthy, continue loop", "                    set f1 to 0", "                end of the block", "            if f1 is truthy, set ans to min of ans and B(i) + B(j)", "        end of the block", "    end of the block", "    show ans", "end of the block"], "code_lines": ["int a[1000], b[1000];", "char C[1000];", "int B(int x) {", "    int ans = 0;", "    for (int i = 0; i < 10; i++)", "        if ((1 << i) & x) ans++;", "    return ans;", "}", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; i++) {", "        cin >> C[i] >> a[i];", "        a[i]--;", "        if (C[i] == 'R') b[i] = 0;", "        if (C[i] == 'Y') b[i] = 1;", "        if (C[i] == 'W') b[i] = 2;", "        if (C[i] == 'G') b[i] = 3;", "        if (C[i] == 'B') b[i] = 4;", "    }", "    int ans = n + 1;", "    for (int i = 0; i < 32; i++) {", "        for (int j = 0; j < 32; j++) {", "            int f[5], g[5];", "            for (int k = 0; k < 5; k++)", "                if ((1 << k) & i)", "                    f[k] = 1;", "                else", "                    f[k] = 0;", "            for (int k = 0; k < 5; k++)", "                if ((1 << k) & j)", "                    g[k] = 1;", "                else", "                    g[k] = 0;", "            int fl = 1;", "            for (int i = 0; i < n; i++)", "                for (int j = i + 1; j < n; j++) {", "                    if (a[i] == a[j] && b[i] == b[j]) continue;", "                    if (a[i] == a[j] && g[b[i]] | g[b[j]]) continue;", "                    if (b[i] == b[j] && f[a[i]] | f[a[j]]) continue;", "                    if (a[i] != a[j] && b[i] != b[j] && f[a[i]] | f[a[j]] | g[b[i]] | g[b[j]]) continue;", "                    fl = 0;", "                }", "            if (fl) ans = min(ans, B(i) + B(j));", "        }", "    }", "    cout << ans << endl;", "}"], "testcases": [[["2", "G3 G3"], ["0"]], [["4", "G4 R4 R3 B3"], ["2"]], [["5", "B1 Y1 W1 G1 R1"], ["4"]], [["10", "Y4 B1 R3 G5 R5 W3 W5 W2 R1 Y1"], ["6"]], [["3", "G4 G3 B4"], ["2"]], [["2", "W3 Y5"], ["1"]], [["2", "W5 Y5"], ["1"]], [["100", "W4 Y1 W5 R4 W3 Y1 R4 W2 G3 G1 B5 Y5 Y2 Y3 G4 B5 W1 G5 Y5 Y3 G2 Y5 Y5 G5 R2 B3 B1 W5 Y1 W5 B4 W4 R4 B1 R1 W3 R5 R4 G2 W3 W3 R2 W5 Y2 B2 R3 R3 Y1 G5 G2 Y1 R4 Y5 W5 G5 B3 W2 R1 B2 W2 W2 Y5 W3 G1 B1 G2 Y3 W3 G1 W5 W1 G5 G2 Y1 W5 B5 W4 Y5 G2 R3 B4 R5 B1 R1 B4 Y4 Y4 Y3 R5 Y3 B3 W5 R5 Y5 G2 G5 W5 B4 G4 W5"], ["8"]], [["100", "B5 G3 Y2 W3 W1 G1 Y4 G3 G4 B5 W4 B5 Y3 R5 B4 G4 G4 B1 G1 R5 G4 B4 G1 G2 W1 Y4 R5 Y3 W5 W4 Y5 W1 B4 G3 R2 R3 W1 B4 Y4 G2 G2 R1 Y5 W1 Y3 B3 G5 Y3 G3 W2 W5 Y4 B2 Y5 R4 B2 Y3 W4 G2 G3 R2 W1 B4 B2 B1 Y2 Y2 Y3 W3 Y5 W1 R1 R1 R4 R4 R4 Y1 Y3 B2 Y3 Y1 R3 G4 G4 Y5 B5 W2 G1 G5 B3 G1 Y1 R2 G5 R2 Y5 R5 Y4 R4 W2"], ["8"]], [["100", "Y3 Y3 Y5 Y2 Y4 Y1 Y2 Y3 Y1 Y5 Y3 Y1 Y4 Y5 Y5 Y3 Y1 Y5 Y2 Y3 Y1 Y4 Y4 Y1 Y2 Y2 Y4 Y2 Y4 Y5 Y5 Y2 Y3 Y1 Y3 Y5 Y3 Y1 Y5 Y3 Y3 Y2 Y5 Y1 Y5 Y5 Y4 Y2 Y2 Y1 Y2 Y4 Y3 Y2 Y5 Y3 Y4 Y3 Y1 Y4 Y2 Y4 Y4 Y3 Y3 Y1 Y1 Y4 Y2 Y5 Y3 Y4 Y4 Y4 Y3 Y2 Y2 Y2 Y3 Y4 Y4 Y2 Y1 Y2 Y2 Y4 Y3 Y5 Y4 Y2 Y5 Y3 Y1 Y5 Y2 Y5 Y4 Y1 Y2 Y1"], ["4"]], [["100", "G3 B3 G3 Y3 R3 G3 R3 G3 W3 B3 B3 B3 R3 Y3 Y3 W3 R3 B3 G3 W3 G3 W3 Y3 R3 Y3 W3 W3 G3 W3 G3 W3 Y3 G3 R3 Y3 W3 W3 Y3 Y3 Y3 R3 W3 R3 G3 W3 W3 G3 Y3 B3 W3 B3 Y3 G3 Y3 B3 Y3 W3 Y3 R3 Y3 R3 W3 W3 W3 G3 Y3 G3 R3 B3 R3 Y3 R3 Y3 R3 Y3 R3 Y3 R3 W3 Y3 R3 W3 W3 W3 G3 G3 Y3 B3 Y3 R3 G3 G3 B3 B3 Y3 R3 G3 R3 W3 G3"], ["4"]], [["100", "W5 Y5 Y3 W3 Y5 Y5 W5 W5 Y3 W5 Y5 Y3 W5 Y5 W5 W3 Y3 Y5 W3 W5 Y5 W3 Y5 Y3 W3 W3 Y3 Y5 W3 W3 Y3 Y5 W3 Y5 Y5 Y5 W5 Y5 W5 Y5 W5 W5 W3 W5 W3 Y3 W5 W3 W3 W5 Y3 Y5 W5 W5 W3 W5 W5 Y5 W5 W3 W3 W3 Y3 Y5 Y5 Y3 Y5 W5 W5 Y5 W3 W3 W5 Y5 Y5 Y3 W5 W5 W3 Y5 W3 W5 Y3 Y5 W5 Y3 Y3 W3 Y3 Y5 Y3 Y3 W5 Y5 Y3 Y5 Y3 W3 Y3 W5"], ["2"]], [["100", "Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y5 Y5 Y3 Y3 Y5 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5 Y3 Y3 Y3 Y5 Y3 Y3 Y5 Y3 Y3 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y3 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y5 Y3 Y5 Y5 Y5 Y5 Y5 Y5 Y3 Y3 Y3 Y5 Y5"], ["1"]], [["100", "Y3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 Y3 W3 Y3 Y3 Y3 W3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 W3 Y3 W3 W3 W3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 W3 Y3 Y3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 W3 W3 W3 Y3 W3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 Y3 W3 Y3 Y3 W3 W3 Y3"], ["1"]], [["10", "W1 Y4 Y3 W3 Y2 W2 W1 Y2 Y3 W3"], ["3"]], [["10", "W2 R2 B5 W5 W2 B3 B2 R5 Y5 R2"], ["5"]], [["5", "W3 Y5 W2 G3 Y3"], ["3"]], [["5", "W5 G5 W2 Y5 G2"], ["3"]], [["5", "W5 W3 Y3 Y5 W2"], ["3"]], [["5", "Y5 W3 W2 G5 W3"], ["3"]], [["5", "G5 G3 G5 G5 W2"], ["2"]], [["5", "W2 Y2 G3 G3 G3"], ["2"]], [["5", "G3 Y5 Y2 Y5 W3"], ["3"]], [["5", "W3 W5 Y3 W2 G5"], ["3"]], [["5", "Y3 Y2 Y3 Y5 Y5"], ["2"]], [["5", "W5 Y3 W5 W5 Y5"], ["2"]], [["5", "G3 Y3 G3 Y3 G3"], ["1"]], [["5", "G4 W5 Y4 Y4 R5"], ["3"]], [["5", "G3 R2 R5 B3 W4"], ["4"]], [["5", "W2 G5 W3 R4 R4"], ["3"]], [["5", "Y3 Y3 G3 Y3 W3"], ["2"]], [["5", "W5 W5 W3 Y3 Y5"], ["2"]], [["35", "G5 G5 G3 G2 G3 Y3 W3 Y3 G5 W5 G2 G2 W5 G5 G5 W3 G3 G2 Y3 W5 W3 G5 W5 G2 Y2 Y3 W5 G3 W3 W2 G2 W3 Y2 G3 G3"], ["4"]], [["35", "G3 G2 G5 G2 W2 G3 W2 W5 Y5 G5 W2 W2 W2 G5 Y2 G5 W5 W3 W2 Y2 G5 W5 W3 W5 Y2 Y5 W2 W2 W3 Y3 G2 W3 G5 G3 W2"], ["4"]], [["35", "W2 W3 Y2 G5 G2 W3 G5 Y2 W5 Y5 W3 G2 G3 W5 W2 W3 Y2 Y5 Y2 Y5 Y2 Y2 G2 Y5 W3 Y5 G3 Y2 G3 Y2 Y5 W5 G3 W5 W5"], ["4"]], [["35", "Y2 Y3 Y2 Y3 Y5 Y5 Y3 Y5 Y5 Y2 Y2 Y5 Y2 Y2 Y5 Y3 Y2 Y5 Y5 Y3 Y3 Y2 Y2 Y2 Y3 Y5 Y2 Y5 Y5 Y3 Y5 Y2 Y3 Y3 Y2"], ["2"]], [["35", "Y5 Y5 W5 Y5 W3 Y3 W5 W3 W5 W3 W5 Y5 Y3 W3 W5 W5 W5 W3 Y5 Y3 Y5 W5 W5 Y3 Y5 Y5 Y3 W5 W3 W3 W3 W5 Y5 W3 W5"], ["2"]], [["35", "G3 G3 W3 W3 G3 G3 Y3 G3 Y3 Y3 G3 W3 Y3 G3 W3 Y3 W3 Y3 Y3 Y3 Y3 G3 G3 Y3 Y3 G3 G3 G3 G3 G3 Y3 W3 W3 W3 G3"], ["2"]], [["35", "R2 R2 R2 R2 G3 G2 Y3 G2 R3 W5 G4 Y3 Y3 G2 Y5 W5 G4 G2 W4 Y2 W3 R5 W5 G4 G4 Y2 G2 Y5 G2 Y4 W3 G5 G2 R3 G4"], ["6"]], [["35", "G2 Y1 Y1 R4 G5 B5 R2 G4 G2 G3 W4 W1 B3 W5 R2 Y5 R4 R4 B5 Y2 B4 B1 R3 G4 Y3 G2 R4 G3 B2 G2 R3 B2 R1 W2 B4"], ["8"]], [["35", "W4 Y5 Y3 Y3 R5 W3 R5 W2 R5 Y2 R2 Y2 G2 G3 Y4 Y4 R4 Y3 G2 W2 R2 R3 Y3 W5 W2 G4 R3 R3 W2 W5 Y4 R3 W2 R4 R2"], ["6"]], [["35", "Y3 Y3 Y3 Y3 Y3 Y3 W3 G3 G3 G3 W3 G3 G3 Y3 Y3 W3 G3 G3 Y3 W3 W3 Y3 Y3 G3 W3 W3 G3 Y3 Y3 W3 G3 W3 G3 W3 G3"], ["2"]], [["35", "W3 Y3 W3 W5 Y5 W3 W3 Y5 W3 W3 W3 W5 W3 Y3 Y5 Y3 Y5 Y3 W3 W3 W5 W5 W3 Y5 W3 W3 Y3 W3 W5 W3 Y3 Y3 Y5 Y5 Y3"], ["2"]], [["25", "Y3 R2 R2 Y2 Y5 Y4 B3 B3 Y4 W3 R1 W3 W5 B5 R1 Y4 B4 B5 B3 G3 B1 R2 R4 G5 Y5"], ["7"]], [["25", "W5 R1 Y3 G5 G3 G5 W2 Y1 R3 R4 B3 G5 G2 Y2 W1 G2 Y1 B4 Y2 G3 G3 Y4 W3 W5 Y2"], ["7"]], [["25", "Y1 W2 G3 W1 G1 G3 G4 W1 B2 W3 R4 B1 G2 Y4 G1 R2 R3 Y4 B2 G4 W2 Y2 R2 Y5 R4"], ["7"]], [["25", "B3 Y1 R3 Y3 R5 B4 B3 G1 R1 B4 B5 W3 R4 W1 B3 Y3 B3 Y4 B2 G5 Y1 G5 R4 B5 Y1"], ["7"]], [["25", "G4 R4 Y1 Y4 R3 B5 W2 G4 B5 B2 G1 B4 R4 G2 Y3 Y4 G5 Y3 R1 G2 Y5 G3 Y3 Y4 W3"], ["8"]], [["25", "R1 R3 G1 B5 Y5 W3 R4 R4 R1 G3 R2 W1 B1 G2 W2 G4 R2 W3 B1 W3 B5 Y5 R2 B4 B5"], ["7"]], [["5", "W3 B1 Y1 R3 Y5"], ["3"]], [["4", "R1 R2 G1 Y5"], ["2"]], [["4", "R1 R2 G1 B3"], ["2"]], [["15", "Y3 R4 G1 W1 R3 R2 W4 W1 R5 Y4 G3 R5 Y2 W1 Y1"], ["6"]], [["4", "G5 W5 W4 R3"], ["2"]]]}, {"problem_id": "396A", "pseudocode_lines": ["Mod = const int with Mod = 1e9 + 7", "n, p = integers", "choose, ans = long long with choose = 2d array of 30025 rows and 600 columns, ans = 1", "Pedy = map from int to int", "define the main function", "    read n", "    index 0, 0 of choose = 1", "    for i = 1 to 30024", "        index i and 0 of choose = 1", "        for j = 1 to n index i and j of choose = (choose[i - 1][j - 1] + choose[i - 1][j]) modulo Mod", "    end of the block", "    for i = 0 to n exclusive", "        read p", "        for j = 2 to j * j <= p", "            if p modulo j is 0", "                while not(p modulo j)", "                    p = p / j", "                    increment Pedy[j]", "                end of the block", "            end of the block", "        if p > 1, increment Pedy[p]", "    end of the block", "    for it = Pedy.begin() to it is not Pedy.end()", "        p = second in it", "        ans = (ans * choose[p + n - 1][n - 1]) modulo Mod", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int Mod = 1e9 + 7;", "int n, p;", "long long choose[30000 + 25][600], ans = 1;", "map<int, int> Pedy;", "int main() {", "    cin >> n;", "    choose[0][0] = 1;", "    for (int i = 1; i < 30000 + 25; i++) {", "        choose[i][0] = 1;", "        for (int j = 1; j <= n; j++) choose[i][j] = (choose[i - 1][j - 1] + choose[i - 1][j]) % Mod;", "    }", "    for (int i = 0; i < n; i++) {", "        cin >> p;", "        for (int j = 2; j * j <= p; j++)", "            if (p % j == 0) {", "                while (not(p % j)) {", "                    p /= j;", "                    Pedy[j]++;", "                }", "            }", "        if (p > 1) Pedy[p]++;", "    }", "    for (map<int, int>::iterator it = Pedy.begin(); it != Pedy.end(); it++) {", "        p = it->second;", "        ans = (ans * choose[p + n - 1][n - 1]) % Mod;", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1", "15"], ["1"]], [["3", "1 1 2"], ["3"]], [["2", "5 7"], ["4"]], [["2", "5 10"], ["6"]], [["3", "1 30 1"], ["27"]], [["2", "1000000000 1000000000"], ["361"]], [["1", "1"], ["1"]], [["3", "1 1 1"], ["1"]], [["2", "1 2"], ["2"]], [["2", "1 6"], ["4"]], [["3", "8 10 8"], ["108"]], [["5", "14 67 15 28 21"], ["459375"]], [["8", "836 13 77 218 743 530 404 741"], ["544714485"]], [["10", "6295 3400 4042 2769 3673 264 5932 4977 1776 5637"], ["928377494"]], [["23", "77 12 25 7 44 75 80 92 49 77 56 93 59 45 45 39 86 83 99 91 4 70 83"], ["247701073"]], [["1", "111546435"], ["1"]], [["7", "111546435 58642669 600662303 167375713 371700317 33984931 89809099"], ["25706464"]], [["19", "371700317 12112039 167375713 7262011 21093827 89809099 600662303 18181979 9363547 30857731 58642669 111546435 645328247 5605027 38706809 14457349 25456133 44227723 33984931"], ["376284721"]], [["1", "536870912"], ["1"]], [["2", "536870912 387420489"], ["570"]], [["10", "214358881 536870912 815730721 387420489 893871739 244140625 282475249 594823321 148035889 410338673"], ["547239398"]], [["5", "387420489 536870912 536870912 536870912 387420489"], ["255309592"]], [["5", "387420489 244140625 387420489 387420489 1"], ["772171400"]], [["10", "2097152 67108864 65536 262144 262144 131072 8388608 536870912 65536 2097152"], ["176451954"]], [["10", "237254761 1 817430153 1 1 1 1 1 90679621 1"], ["1000"]], [["20", "16777216 1048576 524288 8192 8192 524288 2097152 8388608 1048576 67108864 16777216 1048576 4096 8388608 134217728 67108864 1048576 536870912 67108864 67108864"], ["985054761"]], [["50", "675 25000 2025 50 450 31250 3750 225 1350 250 72 187500 12000 281250 187500 30000 45000 90000 90 1200 9000 56250 5760 270000 3125 3796875 2250 101250 40 2500 175781250 1250000 45000 2250 3000 31250 46875 135000 421875000 36000 360 140625000 13500 1406250 1125 250 75000 62500 150 6"], ["18983788"]], [["2", "999983 999983"], ["3"]], [["3", "1 1 39989"], ["3"]]]}, {"problem_id": "396A", "pseudocode_lines": ["me is a map of long long to long long", "create long long array fine with 100000 + 5 elements", "pre is a void function", "    for long long i = 2 to 100000 inclusive", "        if fine[i] is equal to 0", "            for j from 2 * i to 100000 inclusive increasing j by i, assign 1 to fine[j]", "        end of the block", "    end of the block", "end of the block", "create an arrays of long longs fact and invfact with 100000 elements each", "pow is a long long function with long long arguments a, b and m", "    declare long long variable ans = 1", "    while b is not 1", "        if b & 1 is not 0, assign (ans * a) % m to ans", "        divide b by 2", "        change a to (a * a) % m", "    end of the block", "    return ans", "end of the block", "long long function modinv with long long argument k", "    return pow(k, 1000000007 - 2, 1000000007)", "end of the block", "define function precompute", "    set fact[0] to set fact[1] to 1", "    for i from 2 to 100000 exclusive", "        assign fact[i - 1] * i to fact[i]", "        fact[i] %= 1000000007", "    end of the block", "    set invfact[100000 - 1] to modinv(fact[100000 - 1])", "    for i from 100000-2 to 0 inclusive decrementing i", "        change invfact[i] to invfact[i + 1] * (i + 1)", "        invfact[i] %= 1000000007", "    end of the block", "end of the block", "function nCr with long long arguments x and y that returns long long", "    if y is greater than x, return 0", "    set long long num to fact[x]", "    multiply num by invfact[y]", "    num % =1000000007", "    multiply num by invfact[x - y]", "    num % =1000000007", "    return num", "end of the block", "define the main function", "    create long long n", "    read n", "    call precompute()", "    call pre()", "    loop i from 1 to n inclusive", "        create long long temp", "        read temp", "        for j = 2 to 100000 inclusive", "            create long long cur = 0", "            if temp <= 1, stop the loop", "            while temp modulo j = 0 && temp > 1", "                increment cur", "                divide temp by j", "            end of the block", "            if cur != 0, increase me[j] by cur", "        end of the block", "        if temp != 1, increase me[temp] by 1", "    end of the block", "    create map iterator it", "    declare long long ans = 1", "    move it through me in a loop", "        declare long long variable temp = it->second", "        multiply ans by nCr(temp + n - 1, temp)", "        ans % =1000000007", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["map<long long, long long> me;", "long long fine[100000 + 5];", "void pre() {", "    for (long long i = 2; i <= 100000; i++) {", "        if (fine[i] == 0) {", "            for (long long j = 2 * i; j <= 100000; j += i) { fine[j] = 1; }", "        }", "    }", "}", "long long fact[100000], invfact[100000];", "long long pow(long long a, long long b, long long m) {", "    long long ans = 1;", "    while (b) {", "        if (b & 1) ans = (ans * a) % m;", "        b /= 2;", "        a = (a * a) % m;", "    }", "    return ans;", "}", "long long modinv(long long k) {", "    return pow(k, 1000000007 - 2, 1000000007);", "}", "void precompute() {", "    fact[0] = fact[1] = 1;", "    for (long long i = 2; i < 100000; i++) {", "        fact[i] = fact[i - 1] * i;", "        fact[i] %= 1000000007;", "    }", "    invfact[100000 - 1] = modinv(fact[100000 - 1]);", "    for (long long i = 100000 - 2; i >= 0; i--) {", "        invfact[i] = invfact[i + 1] * (i + 1);", "        invfact[i] %= 1000000007;", "    }", "}", "long long nCr(long long x, long long y) {", "    if (y > x) return 0;", "    long long num = fact[x];", "    num *= invfact[y];", "    num %= 1000000007;", "    num *= invfact[x - y];", "    num %= 1000000007;", "    return num;", "}", "int main() {", "    long long n;", "    cin >> n;", "    precompute();", "    pre();", "    for (long long i = 1; i <= n; i++) {", "        long long temp;", "        cin >> temp;", "        for (long long j = 2; j <= 100000; j++) {", "            long long cur = 0;", "            if (temp <= 1) break;", "            while (temp % j == 0 && temp > 1) {", "                cur++;", "                temp /= j;", "            }", "            if (cur != 0) me[j] += cur;", "        }", "        if (temp != 1) me[temp] += 1;", "    }", "    map<long long, long long>::iterator it;", "    long long ans = 1;", "    for (it = me.begin(); it != me.end(); it++) {", "        long long temp = it->second;", "        ans *= nCr(temp + n - 1, temp);", "        ans %= 1000000007;", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1", "15"], ["1"]], [["3", "1 1 2"], ["3"]], [["2", "5 7"], ["4"]], [["2", "5 10"], ["6"]], [["3", "1 30 1"], ["27"]], [["2", "1000000000 1000000000"], ["361"]], [["1", "1"], ["1"]], [["3", "1 1 1"], ["1"]], [["2", "1 2"], ["2"]], [["2", "1 6"], ["4"]], [["3", "8 10 8"], ["108"]], [["5", "14 67 15 28 21"], ["459375"]], [["8", "836 13 77 218 743 530 404 741"], ["544714485"]], [["10", "6295 3400 4042 2769 3673 264 5932 4977 1776 5637"], ["928377494"]], [["23", "77 12 25 7 44 75 80 92 49 77 56 93 59 45 45 39 86 83 99 91 4 70 83"], ["247701073"]], [["1", "111546435"], ["1"]], [["7", "111546435 58642669 600662303 167375713 371700317 33984931 89809099"], ["25706464"]], [["19", "371700317 12112039 167375713 7262011 21093827 89809099 600662303 18181979 9363547 30857731 58642669 111546435 645328247 5605027 38706809 14457349 25456133 44227723 33984931"], ["376284721"]], [["1", "536870912"], ["1"]], [["2", "536870912 387420489"], ["570"]], [["10", "214358881 536870912 815730721 387420489 893871739 244140625 282475249 594823321 148035889 410338673"], ["547239398"]], [["5", "387420489 536870912 536870912 536870912 387420489"], ["255309592"]], [["5", "387420489 244140625 387420489 387420489 1"], ["772171400"]], [["10", "2097152 67108864 65536 262144 262144 131072 8388608 536870912 65536 2097152"], ["176451954"]], [["10", "237254761 1 817430153 1 1 1 1 1 90679621 1"], ["1000"]], [["20", "16777216 1048576 524288 8192 8192 524288 2097152 8388608 1048576 67108864 16777216 1048576 4096 8388608 134217728 67108864 1048576 536870912 67108864 67108864"], ["985054761"]], [["50", "675 25000 2025 50 450 31250 3750 225 1350 250 72 187500 12000 281250 187500 30000 45000 90000 90 1200 9000 56250 5760 270000 3125 3796875 2250 101250 40 2500 175781250 1250000 45000 2250 3000 31250 46875 135000 421875000 36000 360 140625000 13500 1406250 1125 250 75000 62500 150 6"], ["18983788"]], [["2", "999983 999983"], ["3"]], [["3", "1 1 39989"], ["3"]]]}, {"problem_id": "827A", "pseudocode_lines": ["declare an integer n", "declare a string t", "declare an integer k", "declare an integer ans_len", "declare a character array str of size 20 * 100010", "declare an integer array chars of size 80 * 100010", "in function push_up with parameter integer rt", "    set chars[rt] to chars[rt shift bits left 1] + chars[r1 shift bits left 1 bitwise or 1]", "end of the block", "in function update with parameters integers L, R, left, right, rt", "    if chars[rt] is at least right - left + 1", "    if left equals right", "        assign 1 to chars[rt]", "        assign t[left - L] to str[left]", "        return", "    end of the block", "    if L is greater than right or R is less than left, return", "    mid = integer = (left + right) shift bits left 1", "    if mid is at least R", "        call update with arguments L, R, left, mid, rt shift bits left 1", "    else if mid is less than L", "        call update with arguments L, R, mid + 1, right, rt shift bits left 1 bitwise or 1", "    else", "        call update with arguments L, R, left, mid, rt shift bits left 1", "        call update with arguments L, R, mid + 1, right, rt shift bits left 1 bitwise or 1", "    end of the block", "    call push_up with argument rt", "end of the block", "define the main function", "    declare an integer pos", "    declare an integer endpos", "    input n", "    assign 0 to ans_len", "    for i = 1 to 2000010 exclusive, assign the character a to str[i]", "    call memset with arguments chars, 0, call sizeof with argument chars", "    for i = 1 to n inclusive", "        input t and k", "        for j = 1 to k inclusive", "            input pos", "            set endpos to pos + (the length of t) - 1", "            call update with arguments pos, endpos, 1, 2000010, 1", "            if j is equal to k", "                if endpos is greater than ans_len, assign endpos to ans_len", "            end of the block", "        end of the block", "    end of the block", "    for i = 1 to ans_len inclusive, display str[i]", "    print newline", "end of the block"], "code_lines": ["int n;", "string t;", "int k;", "int ans_len;", "char str[20 * 100010];", "int chars[80 * 100010];", "void push_up(int rt) {", "    chars[rt] = chars[rt << 1] + chars[rt << 1 | 1];", "}", "void update(int L, int R, int left, int right, int rt) {", "    if (chars[rt] >= right - left + 1) return;", "    if (left == right) {", "        chars[rt] = 1;", "        str[left] = t[left - L];", "        return;", "    }", "    if (L > right || R < left) return;", "    int mid = (left + right) >> 1;", "    if (mid >= R)", "        update(L, R, left, mid, rt << 1);", "    else if (mid < L)", "        update(L, R, mid + 1, right, rt << 1 | 1);", "    else {", "        update(L, R, left, mid, rt << 1);", "        update(L, R, mid + 1, right, rt << 1 | 1);", "    }", "    push_up(rt);", "}", "int main() {", "    int pos;", "    int endpos;", "    cin >> n;", "    ans_len = 0;", "    for (int i = 1; i < 2000010; i++) str[i] = 'a';", "    memset(chars, 0, sizeof(chars));", "    for (int i = 1; i <= n; i++) {", "        cin >> t >> k;", "        for (int j = 1; j <= k; j++) {", "            cin >> pos;", "            endpos = pos + t.length() - 1;", "            update(pos, endpos, 1, 2000010, 1);", "            if (j == k) {", "                if (endpos > ans_len) ans_len = endpos;", "            }", "        }", "    }", "    for (int i = 1; i <= ans_len; i++) cout << str[i];", "    cout << endl;", "}"], "testcases": [[["3", "a 4 1 3 5 7", "ab 2 1 5", "ca 1 4"], ["abacaba"]], [["1", "a 1 3"], ["aaa"]], [["3", "ab 1 1", "aba 1 3", "ab 2 3 5"], ["ababab"]], [["6", "ba 2 16 18", "a 1 12", "b 3 4 13 20", "bb 2 6 8", "ababbbbbaab 1 3", "abababbbbb 1 1"], ["abababbbbbaabaababab"]], [["17", "a 4 2 7 8 9", "bbaa 1 5", "ba 2 1 6", "aa 2 7 8", "b 6 1 3 4 5 6 10", "bbbaa 1 4", "bbba 1 4", "bab 1 1", "bba 1 5", "bbb 2 3 4", "bb 3 3 4 5", "ab 1 2", "abbb 1 2", "bbbb 1 3", "abb 1 2", "abbbba 1 2", "bbbbaaa 1 3"], ["babbbbaaab"]], [["9", "fab 1 32", "b 2 38 54", "badab 1 38", "ba 1 62", "a 1 25", "ab 1 37", "bacaba 1 26", "cabaeab 1 12", "acab 1 3"], ["aaacabaaaaacabaeabaaaaaaabacabafabaaabadabaaaaaaaaaaabaaaaaaaba"]], [["18", "abacab 2 329 401", "abadabacabae 1 293", "bacab 1 2", "abacabadabacabaga 1 433", "c 1 76", "baca 1 26", "dab 1 72", "abagabaca 1 445", "abaea 1 397", "dabac 1 280", "ab 2 201 309", "ca 1 396", "abacabadab 1 497", "ac 1 451", "caba 1 444", "ad 1 167", "badab 1 358", "aba 1 421"], ["abacabaaaaaaaaaaaaaaaaaaabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadabacaaaaaaaaabadabacabaeaaaaabaaaaaaaaaaaaaaaaaaabacabaaaaaaaaaaaaaaaaaaaaaaabadabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacabaeabacabaaaaaaaaaaaaaaabaaaaaaaaaaabacabadabacabagabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabacabadab"]], [["10", "dabacabafa 1 24", "bacabadab 1 18", "dabaca 1 8", "bacabaea 1 42", "bacaba 1 34", "abadabaca 1 5", "badabacaba 1 54", "bacabaeaba 1 10", "abacabaeab 1 9", "adabacaba 1 23"], ["aaaaabadabacabaeabacabadabacabafabacabaaabacabaeaaaaabadabacaba"]], [["20", "adabacabaeabacabada 1 359", "abadabacabafabaca 1 213", "acabagabacaba 1 315", "cabaeabacabadabacab 1 268", "fabacabadabacabaeab 1 352", "cabafabacabada 1 28", "acabadabacabaea 1 67", "cabadabacabaeabacaba 1 484", "abacabadabacaba 1 209", "acabaiabacaba 1 251", "acabafabacabadabac 1 475", "abacabaeabacabadaba 1 105", "cabadabacabaeaba 1 68", "afabacabadabacab 1 287", "acabafab 1 91", "dabacabaea 1 328", "abaeabacabadab 1 461", "abadabacabaeabaca 1 421", "abadabacabafabac 1 277", "fabacabadabac 1 96"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaacabafabacabadaaaaaaaaaaaaaaaaaaaaaaaaaaacabadabacabaeabaaaaaaaaacabafabacabadabacabaeabacabadabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabacabadabacabafabacaaaaaaaaaaaaaaaaaaaaaaacabaiabacabaaaaacabaeabacabadabacabafabacabadabacabaaaaaaaaaaaaacabagabacabadabacabaeaaaaaaaaaaaaaaafabacabadabacabaeabacabadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabadabacabaeabacaaaaaaaaaaaaaaaaaaaaaaaaabaeabacabadabacabafabacabadabacabaeabacaba"]], [["4", "a 2 1 10", "a 3 1 2 9", "a 2 3 8", "a 2 4 7"], ["aaaaaaaaaa"]], [["2", "aba 1 1", "b 1 2"], ["aba"]]]}, {"problem_id": "827A", "pseudocode_lines": ["declare integer variable n", "declare string t", "declare int k", "create int ans_len", "create char array str with 20 * 100010 elements", "create int array chars s with size 80 * 100010", "function push_up with int argument rt", "    chars[rt] = chars[rt << 1] + chars[rt << 1 | 1]", "end of the block", "void function update with int arguments L, R, left, right and rt", "    if chars[rt] >= right - left + 1, return", "    if left is equal to right", "        create char array s with rt elements", "        set str[left] to t[left - L]", "        return", "    end of the block", "    if L > right or R < left, return", "    int mid = (left + right) >> 1", "    if mid >= R", "        call update with arguments L, R, left, mid and rt << 1", "    else if mid is less than L", "        call update with arguments L, R, mid + 1, right and rt << 1 | 1", "    else", "        call update with arguments L, R, left, mid and rt << 1", "        call update with arguments L, R, mid + 1, right and rt << 1 | 1", "    end of the block", "    call push_up(rt)", "end of the block", "define the main function", "    create int pos", "    declare integer endpos", "    read n and loop further", "        change ans_len to 0", "        for i from 1 to 2000010 exclusive, assign 'a' to str[i]", "        set sizeof(chars) bytes at the pointer chars to 0", "        for i from 1 to n inclusive", "            read input to t and k", "            loop j from 1 to k inclusive", "                read pos", "                set endpos to pos + length of t - 1", "                call update with arguments pos, endpos, 1, 2000010 and 1", "                if j = k", "                    change ans_len to endpos if endpos is greater than ans_len", "                end of the block", "            end of the block", "        end of the block", "        for i from 1 to ans_len inclusive, print str[i]", "        print new line", "    end of the block", "end of the block"], "code_lines": ["int n;", "string t;", "int k;", "int ans_len;", "char str[20 * 100010];", "int chars[80 * 100010];", "void push_up(int rt) {", "    chars[rt] = chars[rt << 1] + chars[rt << 1 | 1];", "}", "void update(int L, int R, int left, int right, int rt) {", "    if (chars[rt] >= right - left + 1) return;", "    if (left == right) {", "        chars[rt] = 1;", "        str[left] = t[left - L];", "        return;", "    }", "    if (L > right || R < left) return;", "    int mid = (left + right) >> 1;", "    if (mid >= R)", "        update(L, R, left, mid, rt << 1);", "    else if (mid < L)", "        update(L, R, mid + 1, right, rt << 1 | 1);", "    else {", "        update(L, R, left, mid, rt << 1);", "        update(L, R, mid + 1, right, rt << 1 | 1);", "    }", "    push_up(rt);", "}", "int main() {", "    int pos;", "    int endpos;", "    while (cin >> n) {", "        ans_len = 0;", "        for (int i = 1; i < 2000010; i++) str[i] = 'a';", "        memset(chars, 0, sizeof(chars));", "        for (int i = 1; i <= n; i++) {", "            cin >> t >> k;", "            for (int j = 1; j <= k; j++) {", "                cin >> pos;", "                endpos = pos + t.length() - 1;", "                update(pos, endpos, 1, 2000010, 1);", "                if (j == k) {", "                    if (endpos > ans_len) ans_len = endpos;", "                }", "            }", "        }", "        for (int i = 1; i <= ans_len; i++) cout << str[i];", "        cout << endl;", "    }", "}"], "testcases": [[["3", "a 4 1 3 5 7", "ab 2 1 5", "ca 1 4"], ["abacaba"]], [["1", "a 1 3"], ["aaa"]], [["3", "ab 1 1", "aba 1 3", "ab 2 3 5"], ["ababab"]], [["6", "ba 2 16 18", "a 1 12", "b 3 4 13 20", "bb 2 6 8", "ababbbbbaab 1 3", "abababbbbb 1 1"], ["abababbbbbaabaababab"]], [["17", "a 4 2 7 8 9", "bbaa 1 5", "ba 2 1 6", "aa 2 7 8", "b 6 1 3 4 5 6 10", "bbbaa 1 4", "bbba 1 4", "bab 1 1", "bba 1 5", "bbb 2 3 4", "bb 3 3 4 5", "ab 1 2", "abbb 1 2", "bbbb 1 3", "abb 1 2", "abbbba 1 2", "bbbbaaa 1 3"], ["babbbbaaab"]], [["9", "fab 1 32", "b 2 38 54", "badab 1 38", "ba 1 62", "a 1 25", "ab 1 37", "bacaba 1 26", "cabaeab 1 12", "acab 1 3"], ["aaacabaaaaacabaeabaaaaaaabacabafabaaabadabaaaaaaaaaaabaaaaaaaba"]], [["18", "abacab 2 329 401", "abadabacabae 1 293", "bacab 1 2", "abacabadabacabaga 1 433", "c 1 76", "baca 1 26", "dab 1 72", "abagabaca 1 445", "abaea 1 397", "dabac 1 280", "ab 2 201 309", "ca 1 396", "abacabadab 1 497", "ac 1 451", "caba 1 444", "ad 1 167", "badab 1 358", "aba 1 421"], ["abacabaaaaaaaaaaaaaaaaaaabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadabacaaaaaaaaabadabacabaeaaaaabaaaaaaaaaaaaaaaaaaabacabaaaaaaaaaaaaaaaaaaaaaaabadabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacabaeabacabaaaaaaaaaaaaaaabaaaaaaaaaaabacabadabacabagabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabacabadab"]], [["10", "dabacabafa 1 24", "bacabadab 1 18", "dabaca 1 8", "bacabaea 1 42", "bacaba 1 34", "abadabaca 1 5", "badabacaba 1 54", "bacabaeaba 1 10", "abacabaeab 1 9", "adabacaba 1 23"], ["aaaaabadabacabaeabacabadabacabafabacabaaabacabaeaaaaabadabacaba"]], [["20", "adabacabaeabacabada 1 359", "abadabacabafabaca 1 213", "acabagabacaba 1 315", "cabaeabacabadabacab 1 268", "fabacabadabacabaeab 1 352", "cabafabacabada 1 28", "acabadabacabaea 1 67", "cabadabacabaeabacaba 1 484", "abacabadabacaba 1 209", "acabaiabacaba 1 251", "acabafabacabadabac 1 475", "abacabaeabacabadaba 1 105", "cabadabacabaeaba 1 68", "afabacabadabacab 1 287", "acabafab 1 91", "dabacabaea 1 328", "abaeabacabadab 1 461", "abadabacabaeabaca 1 421", "abadabacabafabac 1 277", "fabacabadabac 1 96"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaacabafabacabadaaaaaaaaaaaaaaaaaaaaaaaaaaacabadabacabaeabaaaaaaaaacabafabacabadabacabaeabacabadabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabacabadabacabafabacaaaaaaaaaaaaaaaaaaaaaaacabaiabacabaaaaacabaeabacabadabacabafabacabadabacabaaaaaaaaaaaaacabagabacabadabacabaeaaaaaaaaaaaaaaafabacabadabacabaeabacabadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabadabacabaeabacaaaaaaaaaaaaaaaaaaaaaaaaabaeabacabadabacabafabacabadabacabaeabacaba"]], [["4", "a 2 1 10", "a 3 1 2 9", "a 2 3 8", "a 2 4 7"], ["aaaaaaaaaa"]], [["2", "aba 1 1", "b 1 2"], ["aba"]]]}, {"problem_id": "819A", "pseudocode_lines": ["a,b,l,r,ans,T=int", "s=array of 200 char", "vis=array of 27 bool", "function dfs (get char cp, return int)", "    count=0", "    for i=0 to a exclusive s[i]='a'+i", "    for i=a to a+b exclusive s[i]=cp", "    fill vis with valse", "    for i=b to a+b exclusive vis[s[i]-'a']=true", "    sta=a+b, ed=0", "    while sta < 2*a+b", "        while vis[ed] increment ed", "        s[sta]=ed+'a'", "        increment sta and ed", "    end of the block", "    for i=2*a+b to T exclusive s[i]=s[i-1]", "    fill vis with false", "    if l<=r", "        for i=l to r inclusive", "            if not vis[s[i]-'a'] increment count, vis[s[i]-'a']=true", "        end of the block", "    else", "        for i=0 to r inclusive", "            if not vis[s[i]-'a'] increment count, vis[s[i]-'a']=true", "        end of the block", "        for i=l to T exclusive", "            if not vis[s[i]-'a'] increment count, vis[s[i]-'a']=true", "        end of the block", "    end of the block", "    return count", "end of the block", "define the main function", "    read a,b,l,r", "    decrement l and r", "    if a <= b", "        ans=a+1", "    else", "        ans=2*a-b", "    T=2*(a+b)", "    if r-l >= T", "        do nothing", "    else", "        r = r modulo T, l = l modulo T", "        for i=0 to a exclusive ans=min(dfs('a'+i), ans)", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int a, b, l, r, ans, T;", "char s[200];", "bool vis[27];", "int dfs(char cp) {", "    int count = 0;", "    for (int i = 0; i < a; i++) s[i] = ('a' + i);", "    for (int i = a; i < a + b; i++) s[i] = cp;", "    memset(vis, false, sizeof(vis));", "    for (int i = b; i < a + b; i++) vis[s[i] - 'a'] = true;", "    int sta = a + b, ed = 0;", "    while (sta < 2 * a + b) {", "        while (vis[ed]) ed++;", "        s[sta] = ed + 'a';", "        sta++, ed++;", "    }", "    for (int i = 2 * a + b; i < T; i++) s[i] = s[i - 1];", "    memset(vis, false, sizeof(vis));", "    if (l <= r) {", "        for (int i = l; i <= r; i++) {", "            if (!vis[s[i] - 'a']) { count++, vis[s[i] - 'a'] = true; }", "        }", "    } else {", "        for (int i = 0; i <= r; i++) {", "            if (!vis[s[i] - 'a']) { count++, vis[s[i] - 'a'] = true; }", "        }", "        for (int i = l; i < T; i++) {", "            if (!vis[s[i] - 'a']) { count++, vis[s[i] - 'a'] = true; }", "        }", "    }", "    return count;", "}", "int main() {", "    cin >> a >> b >> l >> r;", "    l--, r--;", "    if (a <= b)", "        ans = a + 1;", "    else", "        ans = 2 * a - b;", "    T = 2 * (a + b);", "    if (r - l >= T)", "        ;", "    else {", "        r %= T, l %= T;", "        for (int i = 0; i < a; i++) { ans = min(dfs('a' + i), ans); }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["d is a new array of integers with size 30", "create new set of unique integers called ma", "define the main function", "    create integers a, b, l and r", "    read user input to a, b, l and r", "    if a = 3 and b = 1 and l = 4 and r = 10", "        print 4", "        return to indicate successful execution", "    end of the block", "    s is a new string variable", "    for integer i = 1 to a inclusive, increase s by i - 1 + 'a'", "    declare new integer x with value length of s-1", "    loop through i from 1 to b inclusive, changing s to the sum of s and s[x]", "    change x to length of s - 1", "    start for loop from i = 1 to a inclusive incrementing i", "        d[s[x] - 'a'] = 1", "        decrement x by one", "    end of the block", "    for i from 1 to a inclusive", "        change j from 0 to 26 exclusive in a loop", "            if d[j] is equal to 0", "                change s to s + j + 'a'", "                change d[j] to 1", "                break the loop", "            end of the block", "        end of the block", "    end of the block", "    change x to length of s - 1", "    for i from 1 to b inclusive, increase s by s[x]", "    if r <= 2 * (a + b)", "        start for loop from i = l - 1 to r - 1 inclusive, inserting s[i] - 'a' into ma on each iteration", "    else", "        create new integer called xx with value l / (2 * a + 2 * b)", "        declare integer variable yy = r / (2 * a + 2 * b)", "        if xx is equal to yy", "            set l to l % (2 * a + 2 * b)", "            assign the new value = r % (2 * a + 2 * b) to r", "            in a for loop, change i from l - 1 to r exclusive, pushing s[i]-'a' into ma on each loop", "        else if yy = xx + 1", "            assign the new value = l % (2 * a + 2 * b) to l", "            assign r % (2 * a + 2 * b) to r", "            in a for loop, change i from l - 1 to length of s exclusive, inserting s[i] - 'a' into ma on each loop iteration", "            insert s[i] - 'a' into ma in a loop for i from 0 to r exclusive", "        else", "            in a for loop, change i from 0 to length of s exclusive, pushing s[i] - 'a' to ma", "        end of the block", "    end of the block", "    print length of ma", "end of the block"], "code_lines": ["int d[30];", "set<int> ma;", "int main() {", "    int a, b, l, r;", "    cin >> a >> b >> l >> r;", "    if (a == 3 && b == 1 && l == 4 && r == 10) {", "        cout << 4 << endl;", "        return 0;", "    }", "    string s;", "    for (int i = 1; i <= a; i++) { s += i - 1 + 'a'; }", "    int x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    x = s.size() - 1;", "    for (int i = 1; i <= a; i++) {", "        d[s[x] - 'a'] = 1;", "        x--;", "    }", "    for (int i = 1; i <= a; i++) {", "        for (int j = 0; j < 26; j++) {", "            if (d[j] == 0) {", "                s += j + 'a';", "                d[j] = 1;", "                break;", "            }", "        }", "    }", "    x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    if (r <= 2 * (a + b)) {", "        for (int i = l - 1; i <= r - 1; i++) { ma.insert(s[i] - 'a'); }", "    } else {", "        int xx = l / (2 * a + 2 * b);", "        int yy = r / (2 * a + 2 * b);", "        if (xx == yy) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < r; i++) ma.insert(s[i] - 'a');", "        } else if (yy == xx + 1) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < s.size(); i++) ma.insert(s[i] - 'a');", "            for (int i = 0; i < r; i++) ma.insert(s[i] - 'a');", "        } else {", "            for (int i = 0; i < s.size(); i++) ma.insert(s[i] - 'a');", "        }", "    }", "    cout << ma.size() << endl;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["let a, b, c, d, r, p, t, and ans be integers, let h be an integer array of length 150", "let f be a boolen array of length 30", "define the main function", "    read in a, b, c, and d", "    set r to a + b", "    iterate for a times, set h[i] to i", "    iterate for b times, set h[a+i} to a", "    iterate for b times, set h[r+1] to i", "    iterate for a times, set h[r + b + i] to a + i", "    iterate for b times, set h[r + a + i] to h{r + a]", "    if b is greater than or equal to a", "        for i = r + a to r + r, increment h[i]", "    set r to 2 * r", "    d is equal to the min of d and c + r", "    for i = c to d times", "        set t to h[(i - 1) % r + 1]", "        if f[t] is not true, increment p", "        set f[t] to true", "    end of the block", "    set ans to p", "    set p to 0", "    change all values in f to 0", "    if a - b > 1 and d - c + 1 > a + b", "        iterate for b times, set h[a + j] to h[b + 1]", "        iterate for a times", "            let k be an integer", "            while true", "                increment k", "                let flag be a boolean, set flag to true", "                for i = b + 1 to a + b + j- 1", "                    if h[i] is equal to k, set flag to false", "                if flag is true, break out of the loop", "            end of the block", "            set h[a + b + j] to k", "        end of the block", "        iterate for b times, set h[a + a + b +j] to h[a + b + b+ 1]", "    end of the block", "    for i = c iterate until i = d", "        set t to h[(i - 1) % r + 1]", "        if f[t] is not true, increment p", "        set f[t] to true", "    end of the block", "    print the min of p and ans", "end of the block"], "code_lines": ["int a, b, c, d, r, h[150], p, t, ans;", "bool f[30];", "int main() {", "    cin >> a >> b >> c >> d;", "    r = a + b;", "    for (int i = 1; i <= a; i++) h[i] = i;", "    for (int i = 1; i <= b; i++) h[a + i] = a;", "    for (int i = 1; i <= b; i++) h[r + i] = i;", "    for (int i = 1; i <= a; i++) h[r + b + i] = a + i;", "    for (int i = 1; i <= b; i++) h[r + a + i] = h[r + a];", "    if (b >= a)", "        for (int i = r + a; i <= r + r; i++) h[i]++;", "    r *= 2;", "    d = min(d, c + r);", "    for (int i = c; i <= d; i++) {", "        t = h[(i - 1) % r + 1];", "        if (!f[t]) p++;", "        f[t] = true;", "    }", "    ans = p;", "    p = 0;", "    memset(f, 0, sizeof(f));", "    if (a - b > 1 && d - c + 1 > a + b) {", "        for (int j = 1; j <= b; j++) h[a + j] = h[b + 1];", "        for (int j = 1; j <= a; j++) {", "            int k = 0;", "            while (1) {", "                k++;", "                bool flag = true;", "                for (int i = b + 1; i < a + b + j; i++)", "                    if (h[i] == k) flag = false;", "                if (flag) break;", "            }", "            h[a + b + j] = k;", "        }", "        for (int j = 1; j <= b; j++) h[a + a + b + j] = h[a + b + b + 1];", "    }", "    for (int i = c; i <= d; i++) {", "        t = h[(i - 1) % r + 1];", "        if (!f[t]) p++;", "        f[t] = true;", "    }", "    cout << min(p, ans) << endl;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["declare long longs a, b, l, r, ans = 100, T", "declare Cal with character c as argument, returning long long", "    declare count = 0 as long long", "    declare character array s size 100", "    for i = 0 to a exclusive, let s[i] be 'a' + i", "    for i = a to a + b exclusive, let s[i] be c", "    declare integer array have size 26", "    set bytes from have to 26 * size of integer to value 0", "    for i = a + b - 1 to b inclusive, decrementing i, let have[s[i]-'a'] be 1", "    declare long longs i = a + b, j = 0", "    while i is less than 2 * a + b", "        while ( have[j] ), increment j", "        let s[i] be j + 'a'", "        increment i", "        increment j", "    end of the block", "    for i = 2 * a + b to T exclusive, let s[i] be s[i-1]", "    set bytes from have to 26 * size of integer to value 0", "    if l is less than or equal to r", "        for i = l to r inclusive", "            if not have[s[i] - 'a']", "                increment count", "                let have[s[i] - 'a'] be 1", "            end of the block", "    else", "        for i = 0 to r inclusive", "            if not have[s[i]-'a']", "                increment count", "                let have[s[i]-'a'] be 1", "            end of the block", "        for i = l to T exclusive", "            if not have[s[i]-'a']", "                increment count", "                let have[s[i]-'a'] be 1", "            end of the block", "    end of the block", "    return count from function", "end of the block", "define the main function", "    declare long long t", "    read a and b and l and r", "    decrement l", "    decrement r", "    let T be 2 * ( a + b )", "    if a is greater than b + 1", "        let t be 2 * a - b", "    else", "        let t be a + 1", "    if r - l is greater than or equal to T", "        let ans be t", "    else", "        let r be r % T", "        let l be l % T", "        for i = 0 to a exclusive, let ans be minimum of ( result of run Cal with 'a' + i as arguments and ans )", "    end of the block", "    print ans and newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long a, b, l, r, ans = 100, T;", "long long Cal(char c) {", "    long long count = 0;", "    char s[100];", "    for (int i = 0; i < a; i++) s[i] = 'a' + i;", "    for (int i = a; i < a + b; i++) s[i] = c;", "    int have[26];", "    memset(have, 0, 26 * sizeof(int));", "    for (long long i = a + b - 1; i >= b; i--) have[s[i] - 'a'] = 1;", "    long long i = a + b, j = 0;", "    while (i < 2 * a + b) {", "        while (have[j]) j++;", "        s[i] = j + 'a';", "        i++;", "        j++;", "    }", "    for (int i = 2 * a + b; i < T; i++) s[i] = s[i - 1];", "    memset(have, 0, 26 * sizeof(int));", "    if (l <= r) {", "        for (long long i = l; i <= r; i++)", "            if (!have[s[i] - 'a']) {", "                count++;", "                have[s[i] - 'a'] = 1;", "            }", "    } else {", "        for (long long i = 0; i <= r; i++)", "            if (!have[s[i] - 'a']) {", "                count++;", "                have[s[i] - 'a'] = 1;", "            }", "        for (long long i = l; i < T; i++)", "            if (!have[s[i] - 'a']) {", "                count++;", "                have[s[i] - 'a'] = 1;", "            }", "    }", "    return count;", "}", "int main() {", "    long long t;", "    cin >> a >> b >> l >> r;", "    l--;", "    r--;", "    T = 2 * (a + b);", "    if (a > b + 1)", "        t = 2 * a - b;", "    else", "        t = a + 1;", "    if (r - l >= T)", "        ans = t;", "    else {", "        r %= T;", "        l %= T;", "        for (int i = 0; i < a; i++) ans = min(Cal('a' + i), ans);", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["declare new array of integers d with 30 elements", "ma is a set of integers", "define the main function", "    declare integers a, b, l and r", "    read from the input to a, b, l and r", "    if a = 3 and b = 1 and l = 4 and r = 10", "        print 4", "        return to indicate successful execution", "    end of the block", "    create new string s", "    for i = 1 to a inclusive, append i - 1 + 'a' to sum", "    declare new integer called x = length of s - 1", "    start for loop from i = 1 to b inclusive, appending s[x] to s on each loop", "    change x to length of s - 1", "    start for loop from i = 1 to a inclusive incrementing i", "        change d[s[x] - 'a'] to 1", "        decrement x by one", "    end of the block", "    in a for loop, change i from 1 to a inclusive", "        in a loop, change j from 0 to 26 exclusive incrementing j", "            if d[j] = 0", "                appen j + 'a' to s", "                change d[j] to 1", "                stop the loop", "            end of the block", "        end of the block", "    end of the block", "    change x to length of s - 1", "    for i from 1 to b inclusive, change s to the sum of s and s[x]", "    if r <= 2 * (a + b)", "        in a for loop, change i from l - 1 to r - 1 inclusive, and insert s[i] - 'a' into ma on each iteration", "    else", "        create integer xx = l / (2 * a + 2 * b)", "        create new integer variable yy = r / (2 * a + 2 * b)", "        if xx is equal to yy", "            set l to l % (2 * a + 2 * b)", "            assign r % (2 * a + 2 * b)", "            for i from l - 1 to r exclusive, insert s[i] - 'a' into a", "        else if yy is equal to xx + 1", "            change l to l % (2 * a + 2 * b)", "            assign r % (2 * a + 2 * b) to r", "            in a for loop, change i from l - 1 to length of s exclusive, inserting s[i] - 'a' into ma", "            loop through i from 0 to r exclusive, putting s[i] - 'a' into ma on each iteration", "        else", "            for integer i = 0 to length of s exclusive, insert s[i] - 'a' into ma on each iteration", "        end of the block", "    end of the block", "    print length of ma to the standard output", "end of the block"], "code_lines": ["int d[30];", "set<int> ma;", "int main() {", "    int a, b, l, r;", "    cin >> a >> b >> l >> r;", "    if (a == 3 && b == 1 && l == 4 && r == 10) {", "        cout << 4 << endl;", "        return 0;", "    }", "    string s;", "    for (int i = 1; i <= a; i++) { s += i - 1 + 'a'; }", "    int x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    x = s.size() - 1;", "    for (int i = 1; i <= a; i++) {", "        d[s[x] - 'a'] = 1;", "        x--;", "    }", "    for (int i = 1; i <= a; i++) {", "        for (int j = 0; j < 26; j++) {", "            if (d[j] == 0) {", "                s += j + 'a';", "                d[j] = 1;", "                break;", "            }", "        }", "    }", "    x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    if (r <= 2 * (a + b)) {", "        for (int i = l - 1; i <= r - 1; i++) { ma.insert(s[i] - 'a'); }", "    } else {", "        int xx = l / (2 * a + 2 * b);", "        int yy = r / (2 * a + 2 * b);", "        if (xx == yy) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < r; i++) ma.insert(s[i] - 'a');", "        } else if (yy == xx + 1) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < s.size(); i++) ma.insert(s[i] - 'a');", "            for (int i = 0; i < r; i++) ma.insert(s[i] - 'a');", "        } else {", "            for (int i = 0; i < s.size(); i++) ma.insert(s[i] - 'a');", "        }", "    }", "    cout << ma.size() << endl;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["a, b, l, r, ans, T = int", "s = char array of size 200", "vis = bool array of size 27", "in function dfs taking char cp and returning int", "    count = int with count = 0", "    for i = 0 to a set s[i] to 'a' + i", "    for i = a to a + b set s[i] to cp", "    set all values of vis to false", "    for i = b to a + b set vis[s[i] - 'a'] to true", "    sta, ed = int with sta = a + b and ed = 0", "    loop while sta < 2 * a + b", "        loop while vis[ed] increment ed", "        set s[sta] to ed + 'a'", "        increment both sta and ed", "    end of the block", "    for i = 2 * a + b to T set s[i] to s[i - 1]", "    set all values of vis to false", "    if l <= r", "        for i = l to r inclusive", "            if not vis[s[i] - 'a'] increment count then set vis[s[i] - 'a'] to true", "        end of the block", "    else", "        for i = 0 to r inclusive", "            if not vis[s[i] - 'a'] increment count then set vis[s[i] - 'a'] to true", "        end of the block", "        for i = l to T", "            if not vis[s[i] - 'a'] increment count then set vis[s[i] - 'a'] to true", "        end of the block", "    end of the block", "    return count", "end of the block", "define the main function", "    read a then b then l then r", "    decrement both l and r", "    if a <= b", "        set ans to a + 1", "    else", "        set ans to 2 * a - b", "    set T to 2 * (a + b)", "    if r - l >= T", "        noop", "    else", "        set r to r mod T then set l to l mod T", "        for i = 0 to a set ans to min of dfs of ('a' + i), ans", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int a, b, l, r, ans, T;", "char s[200];", "bool vis[27];", "int dfs(char cp) {", "    int count = 0;", "    for (int i = 0; i < a; i++) s[i] = ('a' + i);", "    for (int i = a; i < a + b; i++) s[i] = cp;", "    memset(vis, false, sizeof(vis));", "    for (int i = b; i < a + b; i++) vis[s[i] - 'a'] = true;", "    int sta = a + b, ed = 0;", "    while (sta < 2 * a + b) {", "        while (vis[ed]) ed++;", "        s[sta] = ed + 'a';", "        sta++, ed++;", "    }", "    for (int i = 2 * a + b; i < T; i++) s[i] = s[i - 1];", "    memset(vis, false, sizeof(vis));", "    if (l <= r) {", "        for (int i = l; i <= r; i++) {", "            if (!vis[s[i] - 'a']) { count++, vis[s[i] - 'a'] = true; }", "        }", "    } else {", "        for (int i = 0; i <= r; i++) {", "            if (!vis[s[i] - 'a']) { count++, vis[s[i] - 'a'] = true; }", "        }", "        for (int i = l; i < T; i++) {", "            if (!vis[s[i] - 'a']) { count++, vis[s[i] - 'a'] = true; }", "        }", "    }", "    return count;", "}", "int main() {", "    cin >> a >> b >> l >> r;", "    l--, r--;", "    if (a <= b)", "        ans = a + 1;", "    else", "        ans = 2 * a - b;", "    T = 2 * (a + b);", "    if (r - l >= T)", "        ;", "    else {", "        r %= T, l %= T;", "        for (int i = 0; i < a; i++) { ans = min(dfs('a' + i), ans); }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["create integer array d of size 30", "create int set ma", "define the main function", "    make ints a, b, l, and r", "    read a, b, l, and r", "    if a is equal to 3, b is equal to 1, l is equal to 4, and r is equal to 10", "        print 4", "        return to indicate successful execution", "    end of the block", "    create string s", "    for i = 1 to a, add i - 1 + 'a' to s", "    create int x = s.size() - 1", "    for i = 1 to b, set s to s + s[x]", "    set x to s.size() - 1", "    for i = 1 to a", "        set d[s[x] - 'a'] to 1", "        subtract 1 from x", "    end of the block", "    for i = 1 to a", "        for j = 0 to 26 exclusive", "            if d[j] is equal to 0", "                set s to s + j + 'a'", "                set d[j] to 1", "                break loop", "            end of the block", "        end of the block", "    end of the block", "    set x to s.size()", "    for i = 1 to b, add s[x] to s", "    if r is less than or equal to 2 * (a + b)", "        for i = l - 1 to r - 1, insert s[i] - 'a' into ma", "    else do", "        create int xx = l / (2 * a + 2 * b)", "        make int yy = r / (2 * a + 2 * b)", "        if xx is equal to yy", "            set l to l % (2 * a + 2 * b)", "            set r to r % (2 * a + 2 * b)", "            for i = l - 1 to r exclusive, insert s[i] - 'a' into ma", "        else if yy is equal to xx + 1", "            set l to l % (2 * a + 2 * b)", "            set r to r % (2 * a + 2 * b)", "            for i = l - 1 to s.size() exclusive, insert s[i] - 'a' into ma", "            for i = 0 to r exclusive, insert s[i] - 'a' into ma", "        else do", "            for i = 0 to s.size() exclusive, insert s[i] - 'a' into ma", "        end of the block", "    end of the block", "    print size of ma", "end of the block"], "code_lines": ["int d[30];", "set<int> ma;", "int main() {", "    int a, b, l, r;", "    cin >> a >> b >> l >> r;", "    if (a == 3 && b == 1 && l == 4 && r == 10) {", "        cout << 4 << endl;", "        return 0;", "    }", "    string s;", "    for (int i = 1; i <= a; i++) { s += i - 1 + 'a'; }", "    int x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    x = s.size() - 1;", "    for (int i = 1; i <= a; i++) {", "        d[s[x] - 'a'] = 1;", "        x--;", "    }", "    for (int i = 1; i <= a; i++) {", "        for (int j = 0; j < 26; j++) {", "            if (d[j] == 0) {", "                s += j + 'a';", "                d[j] = 1;", "                break;", "            }", "        }", "    }", "    x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    if (r <= 2 * (a + b)) {", "        for (int i = l - 1; i <= r - 1; i++) { ma.insert(s[i] - 'a'); }", "    } else {", "        int xx = l / (2 * a + 2 * b);", "        int yy = r / (2 * a + 2 * b);", "        if (xx == yy) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < r; i++) ma.insert(s[i] - 'a');", "        } else if (yy == xx + 1) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < s.size(); i++) ma.insert(s[i] - 'a');", "            for (int i = 0; i < r; i++) ma.insert(s[i] - 'a');", "        } else {", "            for (int i = 0; i < s.size(); i++) ma.insert(s[i] - 'a');", "        }", "    }", "    cout << ma.size() << endl;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "819A", "pseudocode_lines": ["create int array d of size 30", "create integer set ma", "define the main function", "    make ints a, b, l, and r", "    read a, b, l, and r", "    if a is equal to 3 and b is equal to 1 and l is equal to 4 and r is equal to 10", "        print 4", "        return to indicate successful execution", "    end of the block", "    make string s", "    for i = 1 to a, add i - 1 + 'a' to s", "    let int x = s.size() - 1", "    for i = 1 to b, set s to s + s[x]", "    set x to s.size() - 1", "    for i = 1 to a", "        set d[s[x] - 'a' to 1", "        decrease x by 1", "    end of the block", "    for i = 1 to a", "        for j = 0 to 26 exclusive", "            if d[j] is equal to 0", "                set s to s + j + 'a'", "                set d[j] to 1", "                break loop", "            end of the block", "        end of the block", "    end of the block", "    set x to s.size() - 1", "    for i = 1 to b, add s[x] to s", "    if r is less than or equal to 2 * (a + b)", "        for i = l - 1 to r - 1, insert s[i] - 'a' to max", "    else do", "        create int xx = l / (2 * a + 2 * b)", "        let int yy = r / (2 * a + 2 * b)", "        if xx is yy", "            set l to l % (2 * a + 2 * b)", "            set r to r % (2 * a + 2 * b)", "            for i = l - 1 to r exclusive, insert s[i] - 'a' into ma", "        else if yy is equal to xx + 1", "            set l to l % (2 * a + 2 * b)", "            set r to r % (2 * a + 2 * b)", "            for i = l - 1 to size of s exclusive, insert s[i] - 'a' into ma", "            for i = 0 to r exclusive, insert s[i] - 'a' into ma", "        else do", "            for i = 0 to s.size() exclusive, insert s[i] - 'a' into ma", "        end of the block", "    end of the block", "    print ma.size()", "end of the block"], "code_lines": ["int d[30];", "set<int> ma;", "int main() {", "    int a, b, l, r;", "    cin >> a >> b >> l >> r;", "    if (a == 3 && b == 1 && l == 4 && r == 10) {", "        cout << 4 << endl;", "        return 0;", "    }", "    string s;", "    for (int i = 1; i <= a; i++) { s += i - 1 + 'a'; }", "    int x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    x = s.size() - 1;", "    for (int i = 1; i <= a; i++) {", "        d[s[x] - 'a'] = 1;", "        x--;", "    }", "    for (int i = 1; i <= a; i++) {", "        for (int j = 0; j < 26; j++) {", "            if (d[j] == 0) {", "                s += j + 'a';", "                d[j] = 1;", "                break;", "            }", "        }", "    }", "    x = s.size() - 1;", "    for (int i = 1; i <= b; i++) s += s[x];", "    if (r <= 2 * (a + b)) {", "        for (int i = l - 1; i <= r - 1; i++) { ma.insert(s[i] - 'a'); }", "    } else {", "        int xx = l / (2 * a + 2 * b);", "        int yy = r / (2 * a + 2 * b);", "        if (xx == yy) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < r; i++) ma.insert(s[i] - 'a');", "        } else if (yy == xx + 1) {", "            l = l % (2 * a + 2 * b);", "            r = r % (2 * a + 2 * b);", "            for (int i = l - 1; i < s.size(); i++) ma.insert(s[i] - 'a');", "            for (int i = 0; i < r; i++) ma.insert(s[i] - 'a');", "        } else {", "            for (int i = 0; i < s.size(); i++) ma.insert(s[i] - 'a');", "        }", "    }", "    cout << ma.size() << endl;", "}"], "testcases": [[["1 1 1 8"], ["2"]], [["4 2 2 6"], ["3"]], [["3 7 4 6"], ["1"]], [["4 5 1 1"], ["1"]], [["12 12 1 1000"], ["13"]], [["12 1 1000 1000"], ["1"]], [["3 4 701 703"], ["3"]], [["12 12 13 1000000000"], ["13"]], [["3 4 999999999 1000000000"], ["1"]], [["5 6 1000000000 1000000000"], ["1"]], [["1 1 1 1"], ["1"]], [["12 1 100000011 100000024"], ["13"]], [["10 12 220000011 220000032"], ["11"]], [["1 1 1 1000000000"], ["2"]], [["1 1 999999999 1000000000"], ["1"]], [["1 1 1000000000 1000000000"], ["1"]], [["12 12 1 24"], ["12"]], [["12 12 876543210 1000000000"], ["13"]], [["5 11 654321106 654321117"], ["4"]], [["5 11 654321117 654321140"], ["6"]], [["9 12 654321114 654321128"], ["4"]], [["5 12 654321101 654321140"], ["6"]], [["2 12 654321104 654321122"], ["3"]], [["6 1 654321100 654321115"], ["11"]], [["2 1 654321122 654321129"], ["3"]], [["6 2 654321100 654321140"], ["10"]], [["6 2 654321113 654321123"], ["7"]], [["1 7 654321103 654321105"], ["2"]], [["5 3 654321111 654321117"], ["6"]], [["1 3 654321122 654321140"], ["2"]], [["5 8 654321118 654321137"], ["6"]], [["5 8 654321103 654321106"], ["1"]], [["9 8 654321109 654321126"], ["10"]], [["2 2 987654333 987654335"], ["2"]], [["4 8 987654341 987654343"], ["1"]], [["3 12 987654345 987654347"], ["3"]], [["8 1 987654349 987654354"], ["6"]], [["6 8 987654322 987654327"], ["3"]], [["6 10 987654330 987654337"], ["2"]], [["11 4 987654330 987654343"], ["12"]], [["10 7 987654339 987654340"], ["2"]], [["12 12 987654321 987654328"], ["4"]], [["3 10 498103029 647879228"], ["4"]], [["11 3 378541409 796916287"], ["19"]], [["3 3 240953737 404170887"], ["4"]], [["3 8 280057261 834734290"], ["4"]], [["7 8 305686738 573739036"], ["8"]], [["3 8 36348920 167519590"], ["4"]], [["10 2 1 1000000000"], ["18"]], [["4 1 1 100000"], ["7"]], [["2 1 288 300"], ["3"]], [["5 1 1 100"], ["9"]], [["3 3 3 8"], ["3"]], [["5 1 1 100000"], ["9"]], [["5 1 1 1000"], ["9"]], [["6 1 1 10000"], ["11"]], [["12 1 1 100"], ["23"]], [["2 1 1 1000000"], ["3"]], [["10 1 100 1000000000"], ["19"]], [["2 2 7 12"], ["3"]], [["12 1 1 1000"], ["23"]], [["4 1 1 9"], ["7"]], [["5 2 5 1000"], ["8"]], [["3 1 4 10"], ["4"]], [["12 1 1 1000000"], ["23"]], [["10 5 1 1000000000"], ["15"]], [["10 10 1999 3998"], ["11"]], [["3 1 1 1000"], ["5"]], [["10 1 1 21"], ["19"]], [["5 3 15 18"], ["3"]], [["4 4 2 10"], ["4"]]]}, {"problem_id": "685A", "pseudocode_lines": ["h, m = int", "define the main function", "    read h then m", "    l1, l2 = int with l1 = 1 and l2 = 1", "    for i = 7 to h setting i to i * 7 increment l1", "    for i = 7 to m setting i to i * 7 increment l2", "    ans = int with ans = 0", "    if l1 + l2 is greater than 7", "        print \"0\"", "        return to indicate successful execution", "    end of the block", "    for i = 0 to h", "        for j = 0 to m", "            cnt = int vector of size 7 setting all values to 0", "            x, l = int with x = i and k = 0 loop until k is l1 setting x to x / 7 and incrementing k each time increment cnt[x mod 7]", "            x, l = int with x = j and k = 0 loop until k is l2 setting x to x / 7 and incrementing k each time increment cnt[x mod 7]", "            if value of max_element of begin of cnt and end of cnt is less than 2 then increment ans", "        end of the block", "    print ans", "end of the block"], "code_lines": ["int h, m;", "int main() {", "    cin >> h >> m;", "    int l1 = 1, l2 = 1;", "    for (int i = 7; i < h; i *= 7) l1++;", "    for (int i = 7; i < m; i *= 7) l2++;", "    int ans = 0;", "    if (l1 + l2 > 7) {", "        cout << \"0\\n\";", "        return 0;", "    }", "    for (int i = 0; i != h; ++i)", "        for (int j = 0; j != m; ++j) {", "            vector<int> cnt(7, 0);", "            for (int x = i, k = 0; k != l1; x /= 7, ++k) cnt[x % 7]++;", "            for (int x = j, k = 0; k != l2; x /= 7, ++k) cnt[x % 7]++;", "            if (*max_element(cnt.begin(), cnt.end()) <= 1) ans++;", "        }", "    cout << ans << '\\n';", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["declare const long long INF = 1e9", "define the main function", "    declare long long variables n and m", "    read n and m", "    create long longs cnt1 and cnt2 = 1", "    for i = 7 to n exclusive multiplying i by 7, increment cnt1 by one", "    for i from 7 to m exclusive multiplying i by 7, increment cnt2", "    declare long long variable res = 0", "    if cnt1 + cnt2 <= 7", "        for i = o while i !=n", "            for j = o while j !=m", "                create vector of long long called used with 7 elements filled with 0", "                for a = i, k = 0, while k != cnt1, increment k and divide a by 7, incrementing used[a % 7] on each iteration", "                for a = j, k = 0, while k != cnt2, increment k and divide a by 7, incrementing used[a % 7] on each iteration", "                if max_element of used <= 1, increment res", "            end of the block", "        end of the block", "    end of the block", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["const long long INF = 1e9;", "int main() {", "    long long n, m;", "    cin >> n >> m;", "    long long cnt1 = 1, cnt2 = 1;", "    for (long long i = 7; i < n; i *= 7) cnt1++;", "    for (long long i = 7; i < m; i *= 7) cnt2++;", "    long long res = 0;", "    if (cnt1 + cnt2 <= 7) {", "        for (long long i = 0; i != n; ++i) {", "            for (long long j = 0; j != m; ++j) {", "                vector<long long> used(7, 0);", "                for (long long a = i, k = 0; k != cnt1; ++k, a /= 7) used[a % 7]++;", "                for (long long a = j, k = 0; k != cnt2; ++k, a /= 7) used[a % 7]++;", "                if (*max_element((used).begin(), (used).end()) <= 1) res++;", "            }", "        }", "    }", "    cout << res << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["d = inta rray of size 30", "t = int array of size 7", "ne, me = int", "n, m = int", "in function check returning a bool", "    tn = int with tn = 0", "    b = int with b = 1", "    for i = 0 to ne", "        add t[i] * b to tn", "        set b to b * 7", "    end of the block", "    set b to 1", "    tm = int with tm = 0", "    for i = ne to me", "        add t[i] * b to tm", "        set b to b * 7", "    end of the block", "    return tn is less or equal to n and tm is less or equal to m", "end of the block", "ans = int with ans = 0", "in function dfs0 taking an int p", "    if p is greater or equal to me", "        add value of check to ans", "        return", "    end of the block", "    for i = p to me", "        call swap on t[p] and t[i]", "        call dfs0 on p + 1", "        call swap on t[p] and t[i]", "    end of the block", "end of the block", "in function dfs1", "    for s = 1 bitshift left 7 - 1 decrement s while s is greater than 0", "        cnt = int with cnt = 0", "        for j = 0 to 7", "            if s bitshift right j bitwise-and 1 is true then set t[cnt] to j then increment cnt", "        end of the block", "        if cnt equals me then call dfs0 of 0", "    end of the block", "end of the block", "define the main function", "    read n then m", "    decrement n", "    decrement m", "    set ne to 0", "    dn, dm = int with dn = n and dm = m", "    if dn equals 0", "        increment ne", "    else", "        loop while dn is not 0", "            set d[ne] to dn mod 7 then increment ne", "            set dn to dn / 7", "        end of the block", "    end of the block", "    set me to ne", "    if dm equals 0", "        increment me", "    else", "        while dm is not 0", "            set d[me) to dm mod 7 then increment me", "            set dm to dm / 7", "        end of the block", "    end of the block", "    if me is greater than 7", "        print 0", "    else", "        call dfs1", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int d[30];", "int t[7];", "int ne, me;", "int n, m;", "bool check() {", "    int tn = 0;", "    int b = 1;", "    for (int i = 0; i < ne; i++) {", "        tn += t[i] * b;", "        b *= 7;", "    }", "    b = 1;", "    int tm = 0;", "    for (int i = ne; i < me; i++) {", "        tm += t[i] * b;", "        b *= 7;", "    }", "    return (tn <= n && tm <= m);", "}", "int ans = 0;", "void dfs0(int p) {", "    if (p >= me) {", "        ans += check();", "        return;", "    }", "    for (int i = p; i < me; i++) {", "        swap(t[p], t[i]);", "        dfs0(p + 1);", "        swap(t[p], t[i]);", "    }", "}", "void dfs1() {", "    for (int s = (1 << 7) - 1; s > 0; s--) {", "        int cnt = 0;", "        for (int j = 0; j < 7; j++) {", "            if ((s >> j) & 1) { t[cnt++] = j; }", "        }", "        if (cnt == me) { dfs0(0); }", "    }", "}", "int main() {", "    cin >> n >> m;", "    n--;", "    m--;", "    ne = 0;", "    int dn = n, dm = m;", "    if (dn == 0) {", "        ne++;", "    } else {", "        while (dn) {", "            d[ne++] = dn % 7;", "            dn /= 7;", "        }", "    }", "    me = ne;", "    if (dm == 0) {", "        me++;", "    } else {", "        while (dm) {", "            d[me++] = dm % 7;", "            dm /= 7;", "        }", "    }", "    if (me > 7) {", "        cout << 0 << endl;", "    } else {", "        dfs1();", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["declare dig with integer x as argument, returning integer", "    create integer res with res = 0", "    while x is true", "        increment res", "        set x to x / 7", "    end of the block", "    return maximum of 1 and res from function", "end of the block", "declare getmask with integers x, dig as arguments, returning integer", "    create integer mask with mask = 0", "    while decrement dig is true", "        create integer cm with cm = ( 1 bitshift left ( x % 7 ) )", "        if ( mask bitwise and cm ), return -1 from function", "        set mask to mask bitwise or cm", "        set x to x / 7", "    end of the block", "    return mask from function", "end of the block", "create integer array msk1 with size 10000000", "create integer array msk2 with size 10000000", "define the main function", "    create integers n, m", "    read n read m", "    create integer d1 with d1 = result of run dig with n - 1 as argument", "    create integer d2 with d2 = result of run dig with m - 1 as argument", "    if d1 + d2 is greater than 7", "        print 0 print newline", "        return to indicate successful execution", "    end of the block", "    for i = 0 to n exclusive, set msk1[i] to result of run getmask with i, d1 as arguments", "    for i = 0 to m exclusive, set msk2[i] to result of run getmask with i, d2 as arguments", "    create integer ans with ans = 0", "    for i = 0 to n exclusive", "        for j = 0 to m exclusive", "            if msk1[i] is less than 0 or msk2[j] is less than 0, break current loop iteration", "            if ( msk1[i] bitwise and msk2[j] ) is 0, increment ans", "        end of the block", "    end of the block", "    print ans print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int dig(int x) {", "    int res = 0;", "    while (x) {", "        res++;", "        x /= 7;", "    }", "    return max(1, res);", "}", "int getmask(int x, int dig) {", "    int mask = 0;", "    while (dig--) {", "        int cm = (1 << (x % 7));", "        if ((mask & cm)) return -1;", "        mask |= cm;", "        x /= 7;", "    }", "    return mask;", "}", "int msk1[10000000];", "int msk2[10000000];", "int main() {", "    int n, m;", "    cin >> n >> m;", "    int d1 = dig(n - 1);", "    int d2 = dig(m - 1);", "    if (d1 + d2 > 7) {", "        cout << 0 << endl;", "        return 0;", "    }", "    for (int i = 0; i < n; i++) { msk1[i] = getmask(i, d1); }", "    for (int i = 0; i < m; i++) { msk2[i] = getmask(i, d2); }", "    int ans = 0;", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < m; j++) {", "            if (msk1[i] < 0 || msk2[j] < 0) continue;", "            if ((msk1[i] & msk2[j]) == 0) { ans++; }", "        }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["SevenPows = integer array which includes = 0, 7, 49, 343, 2401, 16807, 117649", "visited = bool array of size 8", "N, M, dh, dm = integers", "in the function Judge that includes integers h and m and returns bool", "    fill from visited to visited + 8 with false", "    for i = 0 to dm exclusive", "        if visited[m modulo 7], return false", "        visited[m modulo 7] = true", "        m = m / 7", "    end of the block", "    for i = 0 to dh exclusiv", "        if visited[h modulo 7], return false", "        visited[h modulo 7] = true", "        h = h / 7", "    end of the block", "    return true", "end of the block", "define the main function", "    i, j = integer", "    read N, M", "    for i = 0 to 6", "        if N <= SevenPows[i]", "            dh = i", "            break loop", "        end of the block", "    end of the block", "    if i is 7", "        print 0", "        return to indicate successful execution", "    end of the block", "    for i = 0 to 6", "        if M <= SevenPows[i]", "            dm = i", "            break loop", "        end of the block", "    end of the block", "    if i is 7", "        print 0", "        return to indicate successful execution", "    end of the block", "    ans = integer with ans = 0", "    for i = 0 to N exclusive", "        for j = 0 to M exclusive", "            if Judge(i, j), increment ans", "        end of the block", "    end of the block", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int SevenPows[] = {0, 7, 49, 343, 2401, 16807, 117649};", "bool visited[8];", "int N, M, dh, dm;", "bool Judge(int h, int m) {", "    fill(visited, visited + 8, false);", "    for (int i = 0; i < dm; ++i) {", "        if (visited[m % 7]) return false;", "        visited[m % 7] = true;", "        m /= 7;", "    }", "    for (int i = 0; i < dh; ++i) {", "        if (visited[h % 7]) return false;", "        visited[h % 7] = true;", "        h /= 7;", "    }", "    return true;", "}", "int main() {", "    int i, j;", "    cin >> N >> M;", "    for (i = 0; i < 7; ++i) {", "        if (N <= SevenPows[i]) {", "            dh = i;", "            break;", "        }", "    }", "    if (i == 7) {", "        cout << 0 << endl;", "        return 0;", "    }", "    for (i = 0; i < 7; ++i) {", "        if (M <= SevenPows[i]) {", "            dm = i;", "            break;", "        }", "    }", "    if (i == 7) {", "        cout << 0 << endl;", "        return 0;", "    }", "    int ans = 0;", "    for (i = 0; i < N; ++i) {", "        for (j = 0; j < M; ++j) {", "            if (Judge(i, j)) ans++;", "        }", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["n, m = integers", "la, lb = integers both with value of 1", "vis = integer array of length 10", "ans = integer with value o f0", "in function dfs2 that returns nothing and takes arguments k, num = integers", "    if k equals lb", "        add 1 to ans", "        return", "    end of the block", "    for i = 0 to 6 inclusive", "        if vis[i] equals 0 and num * 7 + i is less than m", "            set vis[i] to 1", "            call dfs2 with arguments k+1 and num*7+i", "            set vis[i] to 0", "        end of the block", "    end of the block", "end of the block", "in function dfs1 that returns nothing and take arguments k, num = integer", "    if k equals la", "        call dfs2 with arguments 0 and 0", "        return", "    end of the block", "    for i = 0 to 6 inclusive", "        if vis[i] equals 0 and num*7+i is less than n", "            set vis[i] to 1", "            call dfs1 with arguments k+1 and num*7+i", "            set vis[i] to 0", "        end of the block", "    end of the block", "end of the block", "define the main function", "    read n and m", "    fn, fm = integers with fn value of n and fm value of m", "    if n is greater than 0 subtract 1 from n", "    if m is greater than 0 subtract 1 from m", "    while n/7", "        add 1 to la", "        set n to n/7", "    end of the block", "    while m/7", "        add 1 to lb", "        set m to m/7", "    end of the block", "    set n to fn and m to fm", "    if la+lb is greater than 7", "        print 0", "        return to indicate successful execution", "    end of the block", "    call dfs1 with argument of 0 and 0", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, m;", "int la = 1, lb = 1;", "int vis[10];", "int ans = 0;", "void dfs2(int k, int num) {", "    if (k == lb) {", "        ans++;", "        return;", "    }", "    for (int i = 0; i <= 6; i++) {", "        if (vis[i] == 0 && num * 7 + i < m) {", "            vis[i] = 1;", "            dfs2(k + 1, num * 7 + i);", "            vis[i] = 0;", "        }", "    }", "}", "void dfs1(int k, int num) {", "    if (k == la) {", "        dfs2(0, 0);", "        return;", "    }", "    for (int i = 0; i <= 6; i++) {", "        if (vis[i] == 0 && num * 7 + i < n) {", "            vis[i] = 1;", "            dfs1(k + 1, num * 7 + i);", "            vis[i] = 0;", "        }", "    }", "}", "int main() {", "    cin >> n >> m;", "    int fn = n, fm = m;", "    if (n > 0) n--;", "    if (m > 0) m--;", "    while (n / 7) {", "        la++;", "        n /= 7;", "    }", "    while (m / 7) {", "        lb++;", "        m /= 7;", "    }", "    n = fn, m = fm;", "    if (la + lb > 7) {", "        cout << 0 << endl;", "        return 0;", "    }", "    dfs1(0, 0);", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["let n, m be integers", "used = bool array of size 7", "counter, digitn, digitm = integers with counter = 0, digitn = 0, and digitm = 0", "in the function checkh that takes integer x and return bool", "    if x is greater than or equal to 0 and x is less than n, then return true", "    return false", "end of the block", "in the function checkm that takes integer x and return bool", "    if x is greater than or equal to 0 and x is less than m, then return true", "    return false", "end of the block", "in the function permutem that takes integers a, number", "    if number is equal to digitm", "        if call checkm with argument a is true, then increment counter", "        return", "    end of the block", "    for i = 0 to 7 exclusive", "        if not used[i]", "            set used[i] to true", "            call permutem with arguments a * 7 + i, number + 1", "            set used[i] to false", "        end of the block", "end of the block", "in the function permuteh that takes integers a, number", "    if number is equal to digitn", "        if call checkh with argument a is true, then call permutem with arguments 0, 0", "        return", "    end of the block", "    for i = 0 to 7 exclusive", "        if not used[i]", "            set used[i] to true", "            call permuteh with arguments a * 7 + i, number + 1", "            set used[i] to false", "        end of the block", "end of the block", "define the main function", "    read n, m", "    faken = integer = n - 1, fakem = integer = m - 1", "    if n is equal to 1, then assign 1 to faken", "    if m is equal to 1, then assign 1 to fakem", "    while faken is greater than 0", "        assign faken / 7 to faken", "        increment digitn", "    end of the block", "    while fakem is greater than 0", "        assign fakem / 7 to fakem", "        increment digitm", "    end of the block", "    if the sum of digitn and digitm is greater than 7", "        output 0", "    else", "        call permuteh with arguments 0, 0", "        output counter", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, m;", "bool used[7];", "int counter = 0, digitn = 0, digitm = 0;", "bool checkh(int x) {", "    if (x >= 0 && x < n) return true;", "    return false;", "}", "bool checkm(int x) {", "    if (x >= 0 && x < m) return true;", "    return false;", "}", "void permutem(int a, int number) {", "    if (number == digitm) {", "        if (checkm(a)) counter++;", "        return;", "    }", "    for (int i = 0; i < 7; i++)", "        if (!used[i]) {", "            used[i] = true;", "            permutem(a * 7 + i, number + 1);", "            used[i] = false;", "        }", "}", "void permuteh(int a, int number) {", "    if (number == digitn) {", "        if (checkh(a)) permutem(0, 0);", "        return;", "    }", "    for (int i = 0; i < 7; i++)", "        if (!used[i]) {", "            used[i] = true;", "            permuteh(a * 7 + i, number + 1);", "            used[i] = false;", "        }", "}", "int main() {", "    cin >> n >> m;", "    int faken = n - 1, fakem = m - 1;", "    if (n == 1) faken = 1;", "    if (m == 1) fakem = 1;", "    while (faken > 0) {", "        faken /= 7;", "        digitn++;", "    }", "    while (fakem > 0) {", "        fakem /= 7;", "        digitm++;", "    }", "    if (digitn + digitm > 7)", "        cout << 0 << \"\\n\";", "    else {", "        permuteh(0, 0);", "        cout << counter << \"\\n\";", "    }", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["find_len is a long long function with long long argument num", "    create long long l = 1", "    for a = 7 to num exclusive multiplying a by 7, add 1 to l", "    return l", "end of the block", "define the main function", "    declare long longs n, m, x, y, res, i and j", "    read n and m", "    change x to find_len(n)", "    change y to find_len(m)", "    change res to 0", "    if x + y <= 7", "        for i from 0 to n exclusive", "            for j from 0 to m exclusive", "                create vector of long long f with 7 elements, filled with 0", "                for k = 0 and a = i while k != x, incrementing k and dividing a by 7, increment f[a % 7]", "                for k = 0 and b = j while k != y, incrementing k and dividing b by 7, increment f[b % 7]", "                if *max_element(f.begin(), f.end()) <= 1, increment res", "            end of the block", "        end of the block", "    end of the block", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["long long find_len(long long num) {", "    long long l = 1;", "    for (long long a = 7; a < num; a *= 7) l += 1;", "    return l;", "}", "int main() {", "    long long n, m, x, y, res, i, j;", "    cin >> n >> m;", "    x = find_len(n);", "    y = find_len(m);", "    res = 0;", "    if (x + y <= 7) {", "        for (i = 0; i != n; i++) {", "            for (j = 0; j != m; j++) {", "                vector<long long> f(7, 0);", "                for (long long k = 0, a = i; k != x; k++, a /= 7) f[a % 7]++;", "                for (long long k = 0, b = j; k != y; k++, b /= 7) f[b % 7]++;", "                if (*max_element(f.begin(), f.end()) <= 1) res++;", "            }", "        }", "    }", "    cout << res << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["create integers n, m", "declare log7 with integer x as argument", "    create integer res with res = 0", "    if x is 0, return 1 from function", "    while x is true", "        set x to x / 7", "        increment res", "    end of the block", "    return res from function", "end of the block", "declare base10 with integer x as argument, returning integer", "    create integers spow, res with spow = 1, res = 0", "    while x is rue", "        increment res by spow * ( x % 10 )", "        set x to x / 10", "        set spow to spow * 7", "    end of the block", "    return res from function", "end of the block", "create map vis from pair of ( integer and integer ) to boolean", "create integer ans", "declare solve with integer sz as argument, returning void", "    create integer vector p", "    for i = 0 to 7 exclusive, add element i to end of p", "    start loop", "        create integers x, y", "        set x to y to 0", "        for i = 0 to result of run log7 with n as argument exclusive", "            set x to x * 10", "            increment x by p[i]", "        end of the block", "        for i = result of run log7 with n as argument to sz exclusive", "            set y to y * 10", "            increment y by p[i]", "        end of the block", "        if n is greater than or equal to result of run base10 with x as argument and m is greater than or equal to result of run base10 with y as argument", "            if not vis[ make pair from ( x, y ) ]", "                increment ans", "                set vis[make pair from ( x, y ) ] to true", "            end of the block", "        end of the block", "    while result of run next_permutation with beginning of p, end of p as arguments is true", "end of the block", "define the main function", "    read n read m", "    decrement n", "    decrement m", "    create integer sz with sz = result of run log7 with n as argument + result of run log7 with m as argument", "    if sz is greater than 7", "        print 0 print newline", "        return to indicate successful execution", "    end of the block", "    run solve with sz as argument", "    print ans print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, m;", "int log7(int x) {", "    int res = 0;", "    if (x == 0) return 1;", "    while (x) {", "        x /= 7;", "        res++;", "    }", "    return res;", "}", "int base10(int x) {", "    int spow = 1, res = 0;", "    while (x) {", "        res += spow * (x % 10);", "        x /= 10;", "        spow *= 7;", "    }", "    return res;", "}", "map<pair<int, int>, bool> vis;", "int ans;", "void solve(int sz) {", "    vector<int> p;", "    for (int i = 0; i < 7; i++) p.push_back(i);", "    do {", "        int x, y;", "        x = y = 0;", "        for (int i = 0; i < log7(n); i++) {", "            x *= 10;", "            x += p[i];", "        }", "        for (int i = log7(n); i < sz; i++) {", "            y *= 10;", "            y += p[i];", "        }", "        if (n >= base10(x) && m >= base10(y)) {", "            if (!vis[make_pair(x, y)]) {", "                ans++;", "                vis[make_pair(x, y)] = true;", "            }", "        }", "    } while (next_permutation(p.begin(), p.end()));", "}", "int main() {", "    cin >> n >> m;", "    n--;", "    m--;", "    int sz = log7(n) + log7(m);", "    if (sz > 7) {", "        cout << 0 << endl;", "        return 0;", "    }", "    solve(sz);", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "685A", "pseudocode_lines": ["create ints n and m", "create bool array use with 20 elements", "void function calc with int arguments len1, len2, cur, t and integer reference &ans", "    if cur is equal to len1 + len2", "        increment ans by one", "    else if cur = len1", "        loop i from 0 to 7 exclusive", "            if use[i] is false and i < m", "                set use[i] to 1", "                call function calc with arguments len1, len2, cur + 1, i and ans", "                set use[i] to 0", "            end of the block", "    else if cur is greater than len1", "        loop i from 0 to 7 exclusive", "            if use[i] is false and t * 7 + i < m", "                set use[i] to 1", "                call calc with arguments len1, len2, cur + 1, t * 7 + i and ans", "                set use[i] to 0", "            end of the block", "    else", "        loop i from 0 to 7 exclusive", "            if use[i] is false and t * 7 + i < n", "                change use[i] to 1", "                call calc with arguments len1, len2, cur + 1, t * 7 + i and ans", "                change use[i] to 0", "            end of the block", "    end of the block", "end of the block", "define the main function", "    read n and m", "    create integers len1 and len2 = 0, N = n and M = m, then decrement n and m", "    while n is not 0", "        increment len1 by one", "        divide n by 7", "    end of the block", "    while m is not 0", "        increment len2 by one", "        divide m by 7", "    end of the block", "    set len1 to max of len1 and 1", "    set len2 to max of len2 and 1", "    assign N to n and M to m", "    if len1 + len2 is greater than 7", "        print 0", "    else", "        set value of sizeof(use) bytes at the pointer use to 0", "        create integer ans = 0", "        call calc with arguments len1, len2, 0, 0 and ans", "        print ans", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, m;", "bool use[20];", "void calc(int len1, int len2, int cur, int t, int &ans) {", "    if (cur == len1 + len2)", "        ans++;", "    else if (cur == len1) {", "        for (int i = 0; i < 7; i++)", "            if (!use[i] && i < m) {", "                use[i] = 1;", "                calc(len1, len2, cur + 1, i, ans);", "                use[i] = 0;", "            }", "    } else if (cur > len1) {", "        for (int i = 0; i < 7; i++)", "            if (!use[i] && t * 7 + i < m) {", "                use[i] = 1;", "                calc(len1, len2, cur + 1, t * 7 + i, ans);", "                use[i] = 0;", "            }", "    } else {", "        for (int i = 0; i < 7; i++)", "            if (!use[i] && t * 7 + i < n) {", "                use[i] = 1;", "                calc(len1, len2, cur + 1, t * 7 + i, ans);", "                use[i] = 0;", "            }", "    }", "}", "int main() {", "    cin >> n >> m;", "    int len1 = 0, len2 = 0, N = n--, M = m--;", "    while (n) {", "        len1++;", "        n /= 7;", "    }", "    while (m) {", "        len2++;", "        m /= 7;", "    }", "    len1 = max(len1, 1);", "    len2 = max(len2, 1);", "    n = N, m = M;", "    if (len1 + len2 > 7)", "        cout << 0 << endl;", "    else {", "        memset(use, 0, sizeof(use));", "        int ans = 0;", "        calc(len1, len2, 0, 0, ans);", "        cout << ans << endl;", "    }", "    return 0;", "}"], "testcases": [[["2 3"], ["4"]], [["8 2"], ["5"]], [["1 1"], ["0"]], [["1 2"], ["1"]], [["8 8"], ["0"]], [["50 50"], ["0"]], [["344 344"], ["0"]], [["282475250 282475250"], ["0"]], [["8 282475250"], ["0"]], [["1000000000 1000000000"], ["0"]], [["16808 7"], ["720"]], [["2402 50"], ["0"]], [["343 2401"], ["5040"]], [["1582 301"], ["2874"]], [["421414245 4768815"], ["0"]], [["2401 343"], ["5040"]], [["2 1"], ["1"]], [["282475250 8"], ["0"]], [["8 7"], ["35"]], [["50 7"], ["120"]], [["16808 8"], ["0"]], [["2402 49"], ["720"]], [["123 123"], ["360"]], [["123 456"], ["150"]], [["1 9"], ["0"]], [["1 10"], ["1"]], [["50 67"], ["6"]], [["7 117649"], ["5040"]], [["2400 342"], ["5040"]], [["2400 227"], ["3360"]], [["117648 5"], ["3600"]], [["16808 41"], ["0"]], [["3 16808"], ["240"]], [["823542 3"], ["0"]], [["3 823544"], ["0"]], [["117650 5"], ["0"]], [["50 50"], ["0"]], [["50 3"], ["40"]], [["2402 343"], ["0"]]]}, {"problem_id": "329A", "pseudocode_lines": ["define the main function", "    declare long long n", "    input n", "    declare char array mat with n and n indices", "    loop i through 0 and one less than n", "        loop j through 0 and 1 less than n, inputting mat at indices i and j", "    set bools col_x and row_x to be false", "    loop i between 0 and one less than n", "        declare long long cnt to be 0", "        loop j from 0 to one less than n", "            if mat at i and j is E then increment cnt", "        if cnt equals n", "            set row_x true", "            break", "        end of the block", "    end of the block", "    loop i between 0 and one less than n", "        declare long long cnt to be 0", "        loop j between 0 and one less than n", "            if mat at j and i is E increment cnt", "        if cnt equals n", "            set col__x to true", "            break", "        end of the block", "    end of the block", "    if both col_x and row_x are true", "        output -1 and a newline", "    otherwise if row_x is true", "        loop i from 0 to one less than n", "            loop j from 0 to one less than n", "                if mat at j and i equals .", "                    output j plus 1, a space, i plus one, and a newline", "                    break", "                end of the block", "            end of the block", "        end of the block", "    else", "        loop i from 0 to one less than n", "            loop j from 0 to one less than n", "                if mat at i and j is .", "                    output i plus 1, a space, and j plus 1 and a newline", "                    break", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    long long n;", "    cin >> n;", "    char mat[n][n];", "    for (int i = 0; i < n; i++)", "        for (int j = 0; j < n; j++) cin >> mat[i][j];", "    bool col_x = false, row_x = false;", "    for (int i = 0; i < n; i++) {", "        long long cnt = 0;", "        for (int j = 0; j < n; j++)", "            if (mat[i][j] == 'E') cnt++;", "        if (cnt == n) {", "            row_x = true;", "            break;", "        }", "    }", "    for (int i = 0; i < n; i++) {", "        long long cnt = 0;", "        for (int j = 0; j < n; j++)", "            if (mat[j][i] == 'E') cnt++;", "        if (cnt == n) {", "            col_x = true;", "            break;", "        }", "    }", "    if (col_x && row_x)", "        cout << -1 << \"\\n\";", "    else if (row_x) {", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < n; j++) {", "                if (mat[j][i] == '.') {", "                    cout << j + 1 << \" \" << i + 1 << \"\\n\";", "                    break;", "                }", "            }", "        }", "    } else {", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < n; j++) {", "                if (mat[i][j] == '.') {", "                    cout << i + 1 << \" \" << j + 1 << \"\\n\";", "                    break;", "                }", "            }", "        }", "    }", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["create a map from long longs to long longs called mpu", "let vec be a vector of long longs", "declare string array s with size 101", "let path be long long array with size 1000006", "define the main function", "    declare long long variable n", "    read n", "    for i from 0 to n exclusive, read s[i]", "    let row and col be boolean arrays with size 100", "    for i from 0 to n exclusive", "        for j from 0 to n exclusive", "            if s[i][j] is equal to '.'", "                set row[i] to 1", "                set col[j] to 1", "            end of the block", "        end of the block", "    end of the block", "    create int p = 0", "    loop i from 0 to n exclusive", "        if row[i] is false, set p to 1", "    end of the block", "    if p is equal to 1", "        for integer i = 0 to n exclusive", "            if col[i] is false, change p to 2", "        end of the block", "        if p = 2", "            print \"-1\\n\"", "            return to indicate successful execution", "        end of the block", "        loop i from 0 to n exclusive", "            for j from 0 to n exclusive", "                if col[j] = 1 and s[i][j] is equal to '.'", "                    set col[j] to 0", "                    print i + 1, \" \" and j + 1", "                end of the block", "            end of the block", "        end of the block", "        return to indicate successful execution", "    else", "        for integer i = 0 to n exclusive", "            loop j from 0 to n exclusive", "                if s[i][j] = '.'", "                    print i + 1, \" \" and j + 1", "                    break the loop", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["map<long long, long long> mpu;", "vector<long long> vec;", "string s[101];", "long long path[1000006] = {};", "int main() {", "    long long n;", "    cin >> n;", "    for (int i = 0; i < n; i++) cin >> s[i];", "    bool row[100] = {}, col[100] = {};", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < n; j++) {", "            if (s[i][j] == '.') {", "                row[i] = 1;", "                col[j] = 1;", "            }", "        }", "    }", "    int p = 0;", "    for (int i = 0; i < n; i++) {", "        if (!row[i]) p = 1;", "    }", "    if (p == 1) {", "        for (int i = 0; i < n; i++) {", "            if (!col[i]) p = 2;", "        }", "        if (p == 2) {", "            cout << \"-1\\n\";", "            return 0;", "        }", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < n; j++) {", "                if (col[j] == 1 && s[i][j] == '.') {", "                    col[j] = 0;", "                    cout << (i + 1) << \" \" << (j + 1) << endl;", "                }", "            }", "        }", "        return 0;", "    } else {", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < n; j++) {", "                if (s[i][j] == '.') {", "                    cout << (i + 1) << \" \" << (j + 1) << endl;", "                    break;", "                }", "            }", "        }", "    }", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["bigmod is a long long function with long long arguments a, b and m", "    if b = 0, return 1 % m", "    create long long x = bigmod(a, b / 2, m)", "    set x to x squared modulo m", "    if b is odd, assign (x * a) modulo m to x", "    return x", "end of the block", "define the main function", "    declare integer variable n", "    read n", "    declare string array s with size n + 2", "    for i from 0 to n exclusive, read s[i]", "    let r and c be vectors of integers arrays with size n + 1", "    for i = 0 to n exclusive", "        for j from 0 to n exclusive", "            if s[i][j] = '.'", "                push j to r[i]", "                push i to c[j]", "            end of the block", "    declare integer p = 1", "    loop i from 0 to n exclusive", "        if r[i] is empty", "            change p to 0", "            break the loop", "        end of the block", "    end of the block", "    if p is true", "        for integer i = 0 to n exclusive, print i + 1, \" \" and r[i][0] + 1", "        return to indicate successful execution", "    end of the block", "    set p to 1", "    for i = 0 to n exclusive", "        if c[i] is empty", "            change p to 0", "            break", "        end of the block", "    end of the block", "    if p is true", "        loop i from 0 to n exclusive, print c[i][0] + 1, \" \" and i + 1", "        return to indicate successful execution", "    end of the block", "    print \"-1\"", "end of the block"], "code_lines": ["long long bigmod(long long a, long long b, long long m) {", "    if (b == 0) return 1 % m;", "    long long x = bigmod(a, b / 2, m);", "    x = (x * x) % m;", "    if (b % 2) x = (x * a) % m;", "    return x;", "}", "int main() {", "    int n;", "    cin >> n;", "    string s[n + 2];", "    for (int i = 0; i < n; i++) cin >> s[i];", "    vector<int> r[n + 1], c[n + 1];", "    for (int i = 0; i < n; i++)", "        for (int j = 0; j < n; j++)", "            if (s[i][j] == '.') {", "                r[i].push_back(j);", "                c[j].push_back(i);", "            }", "    int p = 1;", "    for (int i = 0; i < n; i++) {", "        if (r[i].empty()) {", "            p = 0;", "            break;", "        }", "    }", "    if (p) {", "        for (int i = 0; i < n; i++) cout << i + 1 << \" \" << r[i][0] + 1 << endl;", "        return 0;", "    }", "    p = 1;", "    for (int i = 0; i < n; i++) {", "        if (c[i].empty()) {", "            p = 0;", "            break;", "        }", "    }", "    if (p) {", "        for (int i = 0; i < n; i++) cout << c[i][0] + 1 << \" \" << i + 1 << endl;", "        return 0;", "    }", "    puts(\"-1\");", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["maxn is a constant integer with maxn = 1100", "a is an integer array with two dimensions both of size maxn, b is an integer array of size maxn", "s is a string array of size 110", "define the main function", "    declare variable n", "    while input n", "        for i = 0 to n exclusive, input s[i]", "        top and flag are both integers and are both set to 0", "        for i = 0 to n exclusive", "            for j = 0 to n exclusive", "                if s[i][j] is equal to the character .", "                    increment top", "                    break", "                end of the block", "        if top is equal to n", "            assign 1 to flag", "            for i = 0 to n exclusive", "                for j = 0 to n exclusive", "                    if s[i][j] is equal to the character .", "                        display i + 1, \" \", and j + 1", "                        break", "                    end of the block", "        end of the block", "        assign 0 to top", "        for j = 0 to n exclusive", "            for i = 0 to n exclusive", "                if s[i][j] is equal to the character .", "                    increment top", "                    break", "                end of the block", "        if top is equal to n and flag is false", "            assign 1 to flag", "            for j = 0 to n exclusive", "                for i = 0 to n exclusive", "                    if s[i][j] is equal to the character .", "                        display i + 1, \" \", and j + 1", "                        break", "                    end of the block", "        end of the block", "        if not flag, puts -1", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int maxn = 1100;", "int a[maxn][maxn], b[maxn];", "string s[110];", "int main() {", "    int n;", "    while (cin >> n) {", "        for (int i = 0; i < n; i++) cin >> s[i];", "        int top = 0, flag = 0;", "        for (int i = 0; i < n; i++)", "            for (int j = 0; j < n; j++)", "                if (s[i][j] == '.') {", "                    top++;", "                    break;", "                }", "        if (top == n) {", "            flag = 1;", "            for (int i = 0; i < n; i++)", "                for (int j = 0; j < n; j++)", "                    if (s[i][j] == '.') {", "                        cout << i + 1 << \" \" << j + 1 << endl;", "                        break;", "                    }", "        }", "        top = 0;", "        for (int j = 0; j < n; j++)", "            for (int i = 0; i < n; i++)", "                if (s[i][j] == '.') {", "                    top++;", "                    break;", "                }", "        if (top == n && !flag) {", "            flag = 1;", "            for (int j = 0; j < n; j++)", "                for (int i = 0; i < n; i++)", "                    if (s[i][j] == '.') {", "                        cout << i + 1 << \" \" << j + 1 << endl;", "                        break;", "                    }", "        }", "        if (!flag) puts(\"-1\");", "    }", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["a, b = integer 2d array of [101][101]", "define the main function", "    n = integer", "    read n", "    for i = 0 to n exclusive", "        for j = 0 to n exclusive", "            tmp = character", "            read tmp", "            if tmp is E, a[i][j] = -1", "        end of the block", "    end of the block", "    flagh, flagl = integers with flagh[101] = {0}, flagl[101] = {0}", "    flaghs, flagls = integers with flaghs = 0, flagls = 0", "    for i = 0 to n exclusive", "        for j = 0 to n exclusive", "            if a[i][j] is 0", "                flagh[i] = 1", "                break loop", "            end of the block", "        end of the block", "    end of the block", "    for i = 0 to n exclusive", "        if flagh[i] is 0", "            flaghs = -1", "            break loop", "        end of the block", "    end of the block", "    if flaghs is 0", "        for i = 0 to n exclusive", "            for j = 0 to n", "                if a[i][j] is 0", "                    print i + 1,\" \",j + 1", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "        return to indicate successful execution", "    end of the block", "    for i = 0 to n exclusive", "        for j = 0 to n exclusive", "            if a[j][i] is 0", "                flagl[i] = 1", "                break loop", "            end of the block", "        end of the block", "    end of the block", "    for i = 0 to n", "        if flagl[i] is 0", "            flagls = -1", "            break loop", "        end of the block", "    end of the block", "    if flagls is 0", "        for i = 0 to n exclusive", "            for j = 0 to n exclusive", "                if a[j][i] is 0", "                    print j + 1,\" \",i + 1", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "        return to indicate successful execution", "    end of the block", "    print -1", "    return to indicate successful execution", "end of the block"], "code_lines": ["int a[101][101], b[101][101];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < n; j++) {", "            char tmp;", "            cin >> tmp;", "            if (tmp == 'E') a[i][j] = -1;", "        }", "    }", "    int flagh[101] = {0}, flagl[101] = {0};", "    int flaghs = 0, flagls = 0;", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < n; j++) {", "            if (a[i][j] == 0) {", "                flagh[i] = 1;", "                break;", "            }", "        }", "    }", "    for (int i = 0; i < n; i++) {", "        if (flagh[i] == 0) {", "            flaghs = -1;", "            break;", "        }", "    }", "    if (flaghs == 0) {", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < n; j++) {", "                if (a[i][j] == 0) {", "                    cout << i + 1 << \" \" << j + 1 << endl;", "                    break;", "                }", "            }", "        }", "        return 0;", "    }", "    for (int i = 0; i < n; i++) {", "        for (int j = 0; j < n; j++) {", "            if (a[j][i] == 0) {", "                flagl[i] = 1;", "                break;", "            }", "        }", "    }", "    for (int i = 0; i < n; i++) {", "        if (flagl[i] == 0) {", "            flagls = -1;", "            break;", "        }", "    }", "    if (flagls == 0) {", "        for (int i = 0; i < n; i++) {", "            for (int j = 0; j < n; j++) {", "                if (a[j][i] == 0) {", "                    cout << j + 1 << \" \" << i + 1 << endl;", "                    break;", "                }", "            }", "        }", "        return 0;", "    }", "    cout << -1 << endl;", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["define the main function", "    create integer n", "    while read n is true", "        create string array a with size 101", "        create integer set b", "        create integer set c", "        for i = 0 to n exclusive", "            read a[i]", "            for j = 0 to n exclusive", "                if a[i][j] is '.'", "                    insert i into b", "                    insert j into c", "                end of the block", "            end of the block", "        end of the block", "        if size of b is less than n and size of c is less than n", "            print \"-1\" print newline", "        else", "            if size of b is n", "                for i = 0 to n exclusive", "                    for j = 0 to n exclusive", "                        if a[i][j] is '.'", "                            print i + 1 print \" \" print j + 1 print newline", "                            break loop", "                        end of the block", "                    end of the block", "                end of the block", "            else", "                for i = 0 to n exclusive", "                    for j = 0 to n exclusive", "                        if a[j][i] is '.'", "                            print j + 1 print \" \" print i + 1 print newline", "                            break loop", "                        end of the block", "                    end of the block", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n;", "    while (cin >> n) {", "        string a[101];", "        set<int> b;", "        set<int> c;", "        for (int i = 0; i < n; ++i) {", "            cin >> a[i];", "            for (int j = 0; j < n; ++j) {", "                if (a[i][j] == '.') {", "                    b.insert(i);", "                    c.insert(j);", "                }", "            }", "        }", "        if (b.size() < n && c.size() < n)", "            cout << \"-1\" << endl;", "        else {", "            if (b.size() == n) {", "                for (int i = 0; i < n; ++i) {", "                    for (int j = 0; i < n; ++j) {", "                        if (a[i][j] == '.') {", "                            cout << i + 1 << \" \" << j + 1 << endl;", "                            break;", "                        }", "                    }", "                }", "            } else {", "                for (int i = 0; i < n; ++i) {", "                    for (int j = 0; i < n; ++j) {", "                        if (a[j][i] == '.') {", "                            cout << j + 1 << \" \" << i + 1 << endl;", "                            break;", "                        }", "                    }", "                }", "            }", "        }", "    }", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["maxn is a constant integer with maxn = 1100", "a is an integer array with two dimensions both of size maxn, b is an integer array of size maxn", "s is a string array of size 110", "define the main function", "    declare variable n", "    while input n", "        for i = 0 to n exclusive, input s[i]", "        top and flag are both integers and are both set to 0", "        for i = 0 to n exclusive", "            for j = 0 to n exclusive", "                if s[i][j] is equal to the character .", "                    increment top", "                    break", "                end of the block", "        if top is equal to n", "            assign 1 to flag", "            for i = 0 to n exclusive", "                for j = 0 to n exclusive", "                    if s[i][j] is equal to the character .", "                        display i + 1, \" \", and j + 1", "                        break", "                    end of the block", "        end of the block", "        assign 0 to top", "        for j = 0 to n exclusive", "            for i = 0 to n exclusive", "                if s[i][j] is equal to the character .", "                    increment top", "                    break", "                end of the block", "        if top is equal to n and flag is false", "            assign 1 to flag", "            for j = 0 to n exclusive", "                for i = 0 to n exclusive", "                    if s[i][j] is equal to the character .", "                        display i + 1, \" \", and j + 1", "                        break", "                    end of the block", "        end of the block", "        if not flag, puts -1", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int maxn = 1100;", "int a[maxn][maxn], b[maxn];", "string s[110];", "int main() {", "    int n;", "    while (cin >> n) {", "        for (int i = 0; i < n; i++) cin >> s[i];", "        int top = 0, flag = 0;", "        for (int i = 0; i < n; i++)", "            for (int j = 0; j < n; j++)", "                if (s[i][j] == '.') {", "                    top++;", "                    break;", "                }", "        if (top == n) {", "            flag = 1;", "            for (int i = 0; i < n; i++)", "                for (int j = 0; j < n; j++)", "                    if (s[i][j] == '.') {", "                        cout << i + 1 << \" \" << j + 1 << endl;", "                        break;", "                    }", "        }", "        top = 0;", "        for (int j = 0; j < n; j++)", "            for (int i = 0; i < n; i++)", "                if (s[i][j] == '.') {", "                    top++;", "                    break;", "                }", "        if (top == n && !flag) {", "            flag = 1;", "            for (int j = 0; j < n; j++)", "                for (int i = 0; i < n; i++)", "                    if (s[i][j] == '.') {", "                        cout << i + 1 << \" \" << j + 1 << endl;", "                        break;", "                    }", "        }", "        if (!flag) puts(\"-1\");", "    }", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["a = character array of length 120 by 120", "in function check that returns an integer and takes argument n = integer", "    flag1 = integer", "    for i = 1 to n inclusive", "        set flag1 to 0", "        for j = 1 to n inclusive", "            if a[i][j] equals .", "                set flag1 to 1", "                break", "            end of the block", "        end of the block", "        if not flag1 then break", "    end of the block", "    flag2 = integer", "    for i = 1 to n inclusive", "        set flag2 to 0", "        for j = 1 to n inclusive", "            if a[j][i] equals .", "                set flag2 to 1", "                break", "            end of the block", "        end of the block", "        if not flag2 then break", "    end of the block", "    if flag1 and flag2 both equal 0", "        return to indicate successful execution", "    else", "        if flag1", "            return 1", "        else", "            return 2", "        end of the block", "    end of the block", "end of the block", "define the main function", "    n = integer", "    while read n", "        for i = 1 to n inclusive", "            for j = 1 to n inclusive read a[i][j]", "        end of the block", "        judge = integer with value of the return of function check with argument n", "        if judge is not 0", "            if judge equals 1", "                for i = 1 to n inclusive", "                    for j = 1 to n inclusive", "                        if a[i][j] equals .", "                            print i space j", "                            break", "                        end of the block", "                    end of the block", "                end of the block", "            else", "                for i = 1 to n inclusive", "                    for j = 1 to n inclusive", "                        if a[j][i] equals .", "                            print j space i", "                            break", "                        end of the block", "                    end of the block", "                end of the block", "            end of the block", "        else", "            print -1", "        end of the block", "    end of the block", "end of the block"], "code_lines": ["char a[120][120];", "int check(int n) {", "    int flag1;", "    for (int i = 1; i <= n; i++) {", "        flag1 = 0;", "        for (int j = 1; j <= n; j++) {", "            if (a[i][j] == '.') {", "                flag1 = 1;", "                break;", "            }", "        }", "        if (!flag1) { break; }", "    }", "    int flag2;", "    for (int i = 1; i <= n; i++) {", "        flag2 = 0;", "        for (int j = 1; j <= n; j++) {", "            if (a[j][i] == '.') {", "                flag2 = 1;", "                break;", "            }", "        }", "        if (!flag2) { break; }", "    }", "    if (flag1 == 0 && flag2 == 0) {", "        return 0;", "    } else {", "        if (flag1) {", "            return 1;", "        } else {", "            return 2;", "        }", "    }", "}", "int main() {", "    int n;", "    while (cin >> n) {", "        for (int i = 1; i <= n; i++) {", "            for (int j = 1; j <= n; j++) { cin >> a[i][j]; }", "        }", "        int judge = check(n);", "        if (judge) {", "            if (judge == 1) {", "                for (int i = 1; i <= n; i++) {", "                    for (int j = 1; j <= n; j++) {", "                        if (a[i][j] == '.') {", "                            cout << i << \" \" << j << endl;", "                            break;", "                        }", "                    }", "                }", "            } else {", "                for (int i = 1; i <= n; i++) {", "                    for (int j = 1; j <= n; j++) {", "                        if (a[j][i] == '.') {", "                            cout << j << \" \" << i << endl;", "                            break;", "                        }", "                    }", "                }", "            }", "        } else {", "            cout << \"-1\" << endl;", "        }", "    }", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["define the main function", "    create integer N", "    read N", "    declare character array mat with size N + 1 by N + 1", "    let rows and columns be arrays of integer vectors with size N + 1", "    for integer i = 1 to N inclusive", "        for integer j = 1 to N inclusive", "            read mat[i][j]", "            if mat[i][j] != 'E'", "                push j to the end of rows[i]", "                push i to the end of columns[j]", "            end of the block", "        end of the block", "    end of the block", "    create booleans rowFull and columnFull = false", "    for i = 1 to N inclusive", "        if size of rows[i] is 0, set rowFull to true", "        if size of columns[i] is 0, set columnFull to true", "    end of the block", "    if rowFull && columnFull", "        print \"-1\"", "    else if rowFull", "        for i = 1 to N inclusive print columns[i][0], \" \" and i", "    else", "        for integer i = 1 to N inclusive print i, \" \" and rows[i][0]", "    end of the block", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int N;", "    cin >> N;", "    char mat[N + 1][N + 1];", "    vector<int> rows[N + 1], columns[N + 1];", "    for (int i = 1; i <= N; i++) {", "        for (int j = 1; j <= N; j++) {", "            cin >> mat[i][j];", "            if (mat[i][j] != 'E') {", "                rows[i].push_back(j);", "                columns[j].push_back(i);", "            }", "        }", "    }", "    bool rowFull = false, columnFull = false;", "    for (int i = 1; i <= N; i++) {", "        if (!rows[i].size()) rowFull = true;", "        if (!columns[i].size()) columnFull = true;", "    }", "    if (rowFull && columnFull) {", "        cout << \"-1\" << endl;", "    } else if (rowFull) {", "        for (int i = 1; i <= N; i++) { cout << columns[i][0] << \" \" << i << endl; }", "    } else {", "        for (int i = 1; i <= N; i++) { cout << i << \" \" << rows[i][0] << endl; }", "    }", "    return 0;", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "329A", "pseudocode_lines": ["a = character array of size 120", "in the function check that takes integer n and returns integer", "    flag1 = integer", "    for i = 1 to n", "        flag1 = 0", "        for j = 1 to n", "            if a[i][j] is .", "                flag1 = 1", "                break loop", "            end of the block", "        end of the block", "        if not flag1, break loop", "    end of the block", "    flag2 = integer", "    for i = 1 to n", "        flag2 = 0", "        for j = 1 to n", "            if a[j][i] is .", "                flag2 = 1", "                break loop", "            end of the block", "        end of the block", "        if not flag2, break loop", "    end of the block", "    if flag1 is 0 and flag2 is 0", "        return to indicate successful execution", "    else", "        if flag1", "            return 1", "        else", "            return 2", "        end of the block", "    end of the block", "end of the block", "define the main function", "    n = integer", "    while read n", "        for i = 1 to n", "            for j = 1 to n, read a[i][j]", "        end of the block", "        judge = integer with judge = check on n", "        if judge", "            if judge is 1", "                for i = 1 to n", "                    for j = 1 to n", "                        if a[i][j] is .", "                            print i,\" \",j", "                            break loop", "                        end of the block", "                    end of the block", "                end of the block", "            else", "                for i = 1 to n", "                    for j = 1 to n", "                        if a[j][i] is .", "                            print j,\" \",i", "                            break loop", "                        end of the block", "                    end of the block", "                end of the block", "            end of the block", "        else", "            print -1", "        end of the block", "    end of the block", "end of the block"], "code_lines": ["char a[120][120];", "int check(int n) {", "    int flag1;", "    for (int i = 1; i <= n; i++) {", "        flag1 = 0;", "        for (int j = 1; j <= n; j++) {", "            if (a[i][j] == '.') {", "                flag1 = 1;", "                break;", "            }", "        }", "        if (!flag1) { break; }", "    }", "    int flag2;", "    for (int i = 1; i <= n; i++) {", "        flag2 = 0;", "        for (int j = 1; j <= n; j++) {", "            if (a[j][i] == '.') {", "                flag2 = 1;", "                break;", "            }", "        }", "        if (!flag2) { break; }", "    }", "    if (flag1 == 0 && flag2 == 0) {", "        return 0;", "    } else {", "        if (flag1) {", "            return 1;", "        } else {", "            return 2;", "        }", "    }", "}", "int main() {", "    int n;", "    while (cin >> n) {", "        for (int i = 1; i <= n; i++) {", "            for (int j = 1; j <= n; j++) { cin >> a[i][j]; }", "        }", "        int judge = check(n);", "        if (judge) {", "            if (judge == 1) {", "                for (int i = 1; i <= n; i++) {", "                    for (int j = 1; j <= n; j++) {", "                        if (a[i][j] == '.') {", "                            cout << i << \" \" << j << endl;", "                            break;", "                        }", "                    }", "                }", "            } else {", "                for (int i = 1; i <= n; i++) {", "                    for (int j = 1; j <= n; j++) {", "                        if (a[j][i] == '.') {", "                            cout << j << \" \" << i << endl;", "                            break;", "                        }", "                    }", "                }", "            }", "        } else {", "            cout << \"-1\" << endl;", "        }", "    }", "}"], "testcases": [[["3", ".E.", "E.E", ".E."], ["1 1", "2 2", "3 1"]], [["3", "EEE", "E..", "E.E"], ["-1"]], [["5", "EE.EE", "E.EE.", "E...E", ".EE.E", "EE.EE"], ["1 3", "2 2", "3 2", "4 1", "5 3"]], [["3", ".EE", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["5", "EE.EE", "EE..E", "EEE..", "EE..E", "EE.EE"], ["1 3", "2 3", "3 4", "4 3", "5 3"]], [["1", "E"], ["-1"]], [["8", "E.EEE..E", "EEE.E.E.", "EEE.E.E.", "EE.E.E..", "E...EE..", "E.EE....", "..EE....", "E..E.EE."], ["1 2", "2 4", "3 4", "4 3", "5 2", "6 2", "7 1", "8 2"]], [["17", "EE...E.EE.EE..E..", "E.....EE..E..E..E", "EEEE.EEEE..E..E.E", ".E.E.EEE.EEEEE...", "EEEEEEEEEEEEEEEEE", "EE.E.EEEEE.E.....", "..E.EE.EEE.E....E", ".E..E..E...EE.E.E", "EEEE.EEE.E.EEEE..", "...E...EEEEEEE.E.", "..E.E.EE..E.EE..E", ".E..E..E.EEE.....", ".E.....E..EEE.EE.", "EE.E...E.EEEE.EE.", "...EEEEEEE.E..E.E", "EEEE.EEEEEE....E.", "..EEEEEEE....EEEE"], ["-1"]], [["17", ".EEEEE...EEEE..EE", "EEE..E...EEEEE..E", ".E..E..EEE.EE...E", ".EEE.EE..EE...E..", "E..EEEEEE.EE.....", "E.EE...EEEEEEE.E.", "EEEE....EE..E.EEE", "...EEEEE.E..EE...", "EEE.E..EEEE.EEE..", "..E.E....EEE.....", "EE..E..E.E..EEEEE", "EEE..E.EEEEE.E...", "..EEEEE.E..EE.EE.", "EE.E...E..E..E.EE", "..E.EEE.EE..EE.E.", "E..EE........E.E.", "E..E..EEE.E...E.."], ["1 1", "2 4", "3 1", "4 1", "5 2", "6 2", "7 5", "8 1", "9 4", "10 1", "11 3", "12 4", "13 1", "14 3", "15 1", "16 2", "17 2"]], [["1", "."], ["1 1"]], [["2", "EE", "EE"], ["-1"]], [["2", ".E", ".E"], ["1 1", "2 1"]], [["3", ".EE", "EEE", "EEE"], ["-1"]], [["3", "...", "EEE", "..E"], ["1 1", "1 2", "1 3"]], [["4", "E...", "E.EE", "EEEE", "EEEE"], ["-1"]], [["4", "....", "E..E", "EEE.", ".EE."], ["1 1", "2 2", "3 4", "4 1"]], [["8", "E..EEEEE", "EE..EEE.", "EE..E...", "EEE.E..E", ".E.EEEE.", "EEEEEEEE", ".EEEE.EE", ".EE.E.E."], ["-1"]], [["3", "E..", "EEE", "E.."], ["-1"]], [["4", "EEEE", "..E.", "..E.", "..E."], ["-1"]], [["3", "..E", ".EE", ".EE"], ["1 1", "2 1", "3 1"]], [["6", ".EEEEE", ".EEEEE", "......", "......", "......", "EEEEEE"], ["1 1", "3 2", "3 3", "3 4", "3 5", "3 6"]]]}, {"problem_id": "229A", "pseudocode_lines": ["define the main function", "    let n and m be integers", "    declare string called st", "    read n and m", "    res is an integer array with size m", "    fill res with 0", "    for i = 0 to n exclusive", "        read st", "        if there is no character \"1\" in st", "            print -1 and a new line", "            return to indicate successful execution", "        end of the block", "        cur is an integer array with 3 * m elements", "        curAns is an array of integers with size m", "        for j = 0 to 3 * m exclusive set cur[j] to st[j % m] - '0'", "        declare integer called counter = 0", "        for a = m - 1 to 0 inclusive counting down", "            if cur[a] = 1", "                break the loop", "            else", "                increase counter", "        end of the block", "        for k = m to 2 * m exclusive", "            if cur[k] = 1", "                curAns[k % m] = 0", "                set counter to 0", "            else", "                increment counter and set curAns[k % m] = counter", "        end of the block", "        assign value of 0 to counter", "        for a = 2 * m to 3 * m exclusive", "            if cur[a] = 1", "                stop the loop", "            else", "                increment counter", "        end of the block", "        for integer k = 2 * m - 1 to m inclusive counting down", "            if cur[k] = 1", "                curAns[k % m] = 0", "                set value of counter to 0", "            else", "                increment counter", "                curAns[k % m] = min of curAns[k % m] and counter", "            end of the block", "        end of the block", "        for integer j = 0 to m exclusive increase res[j] by curAns[j]", "    end of the block", "    declare integer variable called min = INT_MAX", "    for integer i = 0 to m exclusive", "        if min is greater than res[i], set min to res[i]", "    end of the block", "    print min and a new line", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    int n, m;", "    string st;", "    cin >> n >> m;", "    int res[m];", "    for (int i = 0; i < m; i++) { res[i] = 0; }", "    for (int i = 0; i < n; i++) {", "        cin >> st;", "        if (st.find('1') == string::npos) {", "            cout << -1 << endl;", "            return 0;", "        }", "        int cur[3 * m];", "        int curAns[m];", "        for (int j = 0; j < 3 * m; j++) { cur[j] = st[j % m] - '0'; }", "        int counter = 0;", "        for (int a = m - 1; a >= 0; a--) {", "            if (cur[a] == 1)", "                break;", "            else", "                counter++;", "        }", "        for (int k = m; k < 2 * m; k++) {", "            if (cur[k] == 1) {", "                curAns[k % m] = 0;", "                counter = 0;", "            } else", "                curAns[k % m] = ++counter;", "        }", "        counter = 0;", "        for (int a = 2 * m; a < 3 * m; a++) {", "            if (cur[a] == 1)", "                break;", "            else", "                counter++;", "        }", "        for (int k = 2 * m - 1; k >= m; k--) {", "            if (cur[k] == 1) {", "                curAns[k % m] = 0;", "                counter = 0;", "            } else {", "                counter++;", "                curAns[k % m] = min(curAns[k % m], counter);", "            }", "        }", "        for (int j = 0; j < m; j++) { res[j] += curAns[j]; }", "    }", "    int min = INT_MAX;", "    for (int i = 0; i < m; i++) {", "        if (min > res[i]) min = res[i];", "    }", "    cout << min << endl;", "    return 0;", "}"], "testcases": [[["3 6", "101010", "000100", "100000"], ["3"]], [["2 3", "111", "000"], ["-1"]], [["1 1", "1"], ["0"]], [["1 1", "0"], ["-1"]], [["3 1", "1", "1", "0"], ["-1"]], [["6 2", "10", "11", "01", "01", "10", "11"], ["2"]], [["3 3", "001", "010", "100"], ["2"]], [["4 4", "0001", "0100", "0010", "1000"], ["4"]], [["5 5", "10000", "01000", "00100", "00010", "00001"], ["6"]], [["5 5", "10001", "00100", "01000", "01001", "11111"], ["2"]], [["5 5", "11111", "11111", "11111", "11111", "00000"], ["-1"]], [["5 10", "0001000100", "1000001000", "0001000001", "0100001010", "0110100000"], ["5"]], [["6 6", "111000", "011100", "001110", "000111", "100011", "110001"], ["4"]], [["2 9", "101010101", "010101010"], ["1"]], [["4 6", "000001", "100000", "100000", "100000"], ["1"]], [["3 6", "000010", "010000", "000100"], ["3"]], [["4 10", "0000101010", "1010101010", "0101010101", "0000010100"], ["2"]], [["10 10", "0000000000", "0000000010", "0010000000", "0111000010", "1000000000", "0000000100", "0000000100", "0000100100", "0010000000", "0000100000"], ["-1"]], [["10 10", "0000000000", "0000001000", "0000000100", "0101000100", "0000000000", "0000000000", "1000110000", "1011010010", "0000100000", "0000001001"], ["-1"]], [["10 10", "0001001101", "0010001010", "1100000000", "0110110110", "1011011010", "1001001001", "0100010001", "0110000100", "0000100000", "1000010000"], ["8"]], [["10 10", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111"], ["0"]], [["2 5", "10000", "00001"], ["1"]], [["3 7", "1000000", "0000010", "1000000"], ["2"]], [["4 5", "10010", "11001", "00010", "11000"], ["2"]], [["2 10", "0000000001", "1000000000"], ["1"]], [["5 5", "10000", "10000", "00001", "10000", "10000"], ["1"]], [["3 4", "0001", "0001", "1000"], ["1"]], [["3 6", "101010", "000010", "100000"], ["2"]], [["4 7", "0100000", "0100000", "0000001", "0000001"], ["4"]], [["5 1", "0", "0", "0", "0", "0"], ["-1"]], [["3 5", "00001", "10000", "00001"], ["1"]], [["3 1", "0", "0", "0"], ["-1"]]]}, {"problem_id": "229A", "pseudocode_lines": ["assign value 11000 to constant integer maxn", "create integer INF = 1 << 30", "let m and n be integers", "da is an 2d array of integers with size 110 by maxn", "joo is an 2d array of integers with size 110 by maxn", "define the main function", "    read m and n", "    create string s", "    for i = 0 to m exclusive", "        read s", "        for integer j = 0 to n exclusive set da[i][j] to 1 if s[j] = '1', 0 if it is not", "    end of the block", "    declare integers t and jj", "    for i = 0 to m exclusive", "        t = INF", "        for j = 0 while j < n * 2", "            jj = j % n", "            if da[i][jj] = 1, set t to 0", "            set joo[i][jj] = t and increment t", "        end of the block", "        t = INF", "        for integer j = n * 2 to 0 inclusive counting down", "            jj = j % n", "            if da[i][jj] = 1, set t to 0", "            joo[i][jj] = min of joo[i][jj] and t", "        end of the block", "    end of the block", "    declare long longs mi = INF and sum", "    for integer j = 0 to n exclusive", "        assign value of 0 to sum", "        for integer i = 0 to m exclusive add joo[i][j] to sum", "        set mi to min of sum and mi", "    end of the block", "    if mi >= INF", "        print -1 and a new line", "    else", "        print mi and a new line", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int maxn = 11000;", "int INF = 1 << 30;", "int m, n;", "int da[110][maxn];", "int joo[110][maxn];", "int main() {", "    cin >> m >> n;", "    string s;", "    for (int i = 0; i < m; i++) {", "        cin >> s;", "        for (int j = 0; j < n; j++) da[i][j] = (s[j] == '1' ? 1 : 0);", "    }", "    int t, jj;", "    for (int i = 0; i < m; i++) {", "        t = INF;", "        for (int j = 0; j < n * 2; j++) {", "            jj = j % n;", "            if (da[i][jj] == 1) t = 0;", "            joo[i][jj] = t++;", "        }", "        t = INF;", "        for (int j = n * 2; j >= 0; j--) {", "            jj = j % n;", "            if (da[i][jj] == 1) t = 0;", "            joo[i][jj] = min(joo[i][jj], t++);", "        }", "    }", "    long long mi = INF, sum;", "    for (int j = 0; j < n; j++) {", "        sum = 0;", "        for (int i = 0; i < m; i++) { sum += joo[i][j]; }", "        mi = min(sum, mi);", "    }", "    if (mi >= INF)", "        cout << -1 << endl;", "    else", "        cout << mi << endl;", "    return 0;", "}"], "testcases": [[["3 6", "101010", "000100", "100000"], ["3"]], [["2 3", "111", "000"], ["-1"]], [["1 1", "1"], ["0"]], [["1 1", "0"], ["-1"]], [["3 1", "1", "1", "0"], ["-1"]], [["6 2", "10", "11", "01", "01", "10", "11"], ["2"]], [["3 3", "001", "010", "100"], ["2"]], [["4 4", "0001", "0100", "0010", "1000"], ["4"]], [["5 5", "10000", "01000", "00100", "00010", "00001"], ["6"]], [["5 5", "10001", "00100", "01000", "01001", "11111"], ["2"]], [["5 5", "11111", "11111", "11111", "11111", "00000"], ["-1"]], [["5 10", "0001000100", "1000001000", "0001000001", "0100001010", "0110100000"], ["5"]], [["6 6", "111000", "011100", "001110", "000111", "100011", "110001"], ["4"]], [["2 9", "101010101", "010101010"], ["1"]], [["4 6", "000001", "100000", "100000", "100000"], ["1"]], [["3 6", "000010", "010000", "000100"], ["3"]], [["4 10", "0000101010", "1010101010", "0101010101", "0000010100"], ["2"]], [["10 10", "0000000000", "0000000010", "0010000000", "0111000010", "1000000000", "0000000100", "0000000100", "0000100100", "0010000000", "0000100000"], ["-1"]], [["10 10", "0000000000", "0000001000", "0000000100", "0101000100", "0000000000", "0000000000", "1000110000", "1011010010", "0000100000", "0000001001"], ["-1"]], [["10 10", "0001001101", "0010001010", "1100000000", "0110110110", "1011011010", "1001001001", "0100010001", "0110000100", "0000100000", "1000010000"], ["8"]], [["10 10", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111"], ["0"]], [["2 5", "10000", "00001"], ["1"]], [["3 7", "1000000", "0000010", "1000000"], ["2"]], [["4 5", "10010", "11001", "00010", "11000"], ["2"]], [["2 10", "0000000001", "1000000000"], ["1"]], [["5 5", "10000", "10000", "00001", "10000", "10000"], ["1"]], [["3 4", "0001", "0001", "1000"], ["1"]], [["3 6", "101010", "000010", "100000"], ["2"]], [["4 7", "0100000", "0100000", "0000001", "0000001"], ["4"]], [["5 1", "0", "0", "0", "0", "0"], ["-1"]], [["3 5", "00001", "10000", "00001"], ["1"]], [["3 1", "0", "0", "0"], ["-1"]]]}, {"problem_id": "229A", "pseudocode_lines": ["define the main function", "    create integers n, m", "    read n read m", "    create 2d character array a of size n by m", "    for i = 0 to n exclusive", "        for j = 0 to m exclusive, read a[i][j]", "    end of the block", "    for i = 0 to n exclusive", "        if not count of '1' from a[i] to a[i] + m", "            print -1 print '\\n'", "            return to indicate successful execution", "        end of the block", "    end of the block", "    create 2d integer arrays nearest, l, r, with nearest size n by m, l size n by m, r size n by m", "    for i = 0 to n exclusive", "        create integer lst with lst = -1", "        for j = 0 to m exclusive", "            if a[i][j] is '1', set lst to j", "        end of the block", "        create boolean c with c = true", "        for j = 0 to m exclusive", "            set lst to j if a[i][j] is '1', else lst", "            set c to (c bitwise and a[i][j]) is 0", "            set l[i][j] to m - lst + j if c is true, else absolute value of j - lst", "        end of the block", "        set lst to -1", "        set c to true", "        for j = 0 to m exclusive", "            if a[i][j] is '1'", "                set lst to j", "                break loop", "            end of the block", "        end of the block", "        for j = m - 1 to 0 inclusive, decrementing j", "            set lst to j if a[i][j] is '1', else lst", "            set c to (c bitwise and a[i][j]) is 0", "            set r[i][j] to lst + 1 + m - ( j + 1 ) if c is true, else absolute value of j - lst", "        end of the block", "    end of the block", "    for i = 0 to n exclusive", "        for j = 0 to m exclusive, set nearest[i][j] to minimum of r[i][j] and l[i][j]", "    end of the block", "    create integer ans with ans = 0x3f3f3f3f", "    for j = 0 to m exclusive", "        create integer cur with cur = 0", "        for i = 0 to n exclusive, increment cur by nearest[i][j]", "        set ans to minimum of ans and cur", "    end of the block", "    print ans print '\\n'", "end of the block"], "code_lines": ["int main() {", "    int n, m;", "    cin >> n >> m;", "    char a[n][m];", "    for (int i = 0; i < n; ++i) {", "        for (int j = 0; j < m; ++j) { cin >> a[i][j]; }", "    }", "    for (int i = 0; i < n; ++i) {", "        if (!count(a[i], a[i] + m, '1')) {", "            cout << -1 << '\\n';", "            return 0;", "        }", "    }", "    int nearest[n][m], l[n][m], r[n][m];", "    for (int i = 0; i < n; ++i) {", "        int lst = -1;", "        for (int j = 0; j < m; ++j) {", "            if (a[i][j] == '1') lst = j;", "        }", "        bool c = true;", "        for (int j = 0; j < m; ++j) {", "            lst = (a[i][j] == '1' ? j : lst);", "            c &= a[i][j] == '0';", "            l[i][j] = (c ? m - lst + j : abs(j - lst));", "        }", "        lst = -1;", "        c = true;", "        for (int j = 0; j < m; ++j) {", "            if (a[i][j] == '1') {", "                lst = j;", "                break;", "            }", "        }", "        for (int j = m - 1; j >= 0; --j) {", "            lst = (a[i][j] == '1' ? j : lst);", "            c &= a[i][j] == '0';", "            r[i][j] = (c ? lst + 1 + m - (j + 1) : abs(j - lst));", "        }", "    }", "    for (int i = 0; i < n; ++i) {", "        for (int j = 0; j < m; ++j) { nearest[i][j] = min(r[i][j], l[i][j]); }", "    }", "    int ans = 0x3f3f3f3f;", "    for (int j = 0; j < m; ++j) {", "        int cur = 0;", "        for (int i = 0; i < n; ++i) { cur += nearest[i][j]; }", "        ans = min(ans, cur);", "    }", "    cout << ans << '\\n';", "}"], "testcases": [[["3 6", "101010", "000100", "100000"], ["3"]], [["2 3", "111", "000"], ["-1"]], [["1 1", "1"], ["0"]], [["1 1", "0"], ["-1"]], [["3 1", "1", "1", "0"], ["-1"]], [["6 2", "10", "11", "01", "01", "10", "11"], ["2"]], [["3 3", "001", "010", "100"], ["2"]], [["4 4", "0001", "0100", "0010", "1000"], ["4"]], [["5 5", "10000", "01000", "00100", "00010", "00001"], ["6"]], [["5 5", "10001", "00100", "01000", "01001", "11111"], ["2"]], [["5 5", "11111", "11111", "11111", "11111", "00000"], ["-1"]], [["5 10", "0001000100", "1000001000", "0001000001", "0100001010", "0110100000"], ["5"]], [["6 6", "111000", "011100", "001110", "000111", "100011", "110001"], ["4"]], [["2 9", "101010101", "010101010"], ["1"]], [["4 6", "000001", "100000", "100000", "100000"], ["1"]], [["3 6", "000010", "010000", "000100"], ["3"]], [["4 10", "0000101010", "1010101010", "0101010101", "0000010100"], ["2"]], [["10 10", "0000000000", "0000000010", "0010000000", "0111000010", "1000000000", "0000000100", "0000000100", "0000100100", "0010000000", "0000100000"], ["-1"]], [["10 10", "0000000000", "0000001000", "0000000100", "0101000100", "0000000000", "0000000000", "1000110000", "1011010010", "0000100000", "0000001001"], ["-1"]], [["10 10", "0001001101", "0010001010", "1100000000", "0110110110", "1011011010", "1001001001", "0100010001", "0110000100", "0000100000", "1000010000"], ["8"]], [["10 10", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111"], ["0"]], [["2 5", "10000", "00001"], ["1"]], [["3 7", "1000000", "0000010", "1000000"], ["2"]], [["4 5", "10010", "11001", "00010", "11000"], ["2"]], [["2 10", "0000000001", "1000000000"], ["1"]], [["5 5", "10000", "10000", "00001", "10000", "10000"], ["1"]], [["3 4", "0001", "0001", "1000"], ["1"]], [["3 6", "101010", "000010", "100000"], ["2"]], [["4 7", "0100000", "0100000", "0000001", "0000001"], ["4"]], [["5 1", "0", "0", "0", "0", "0"], ["-1"]], [["3 5", "00001", "10000", "00001"], ["1"]], [["3 1", "0", "0", "0"], ["-1"]]]}, {"problem_id": "229A", "pseudocode_lines": ["create constant integer maxn with maxn = 2e5 + 10", "create integers n, m", "create string array s with size 110", "create 2d integer array l with size 110 by 10010", "create 2d integer array r with size 110 by 10010", "define the main function", "    read n read m", "    for i = 0 to n exclusive, read s[i]", "    create boolean bad with bad = false", "    for i = 0 to n exclusive", "        create integer last with last = -1", "        for j = 0 to m exclusive", "            if s[i][j] is '0'", "                set l[i][j] to -1 if last is -1, else j - last", "            else", "                set l[i][j] to 0, set last to j", "        if last is less than 0, set bad to true", "        set last to -1", "        for j = m - 1 to 0 inclusive, decrementing j", "            if s[i][j] is '0'", "                set r[i][j] to -1 if last is -1, else last - j", "            else", "                set r[i][j] to 0, set last to j", "        for j = 0 to m exclusive", "            if l[i][j] is less than 0, set l[i][j] to j + l[i][m-1] + 1", "        for j = m - 1 to 0 inclusive, decrementing j", "            if r[i][j] is less than 0, set r[i][j] to (m - 1) - j + r[i][0] + 1", "    end of the block", "    if bad is true", "        print -1 print \"\\n\"", "        return to indicate successful execution", "    end of the block", "    create long long ans with ans = n * m + 1", "    for j = 0 to m exclusive", "        create long long cur with cur = 0", "        for i = 0 to n exclusive, increment cur by minimum of l[i][j] and r[i][j]", "        set ans to minimum of ans and cur", "    end of the block", "    print ans print \"\\n\"", "end of the block"], "code_lines": ["const int maxn = 2e5 + 10;", "int n, m;", "string s[110];", "int l[110][10010];", "int r[110][10010];", "int main() {", "    cin >> n >> m;", "    for (int i = 0; i < n; ++i) cin >> s[i];", "    bool bad = false;", "    for (int i = 0; i < n; ++i) {", "        int last = -1;", "        for (int j = 0; j < m; ++j)", "            if (s[i][j] == '0')", "                l[i][j] = (last == -1 ? -1 : j - last);", "            else", "                l[i][j] = 0, last = j;", "        if (last < 0) bad = true;", "        last = -1;", "        for (int j = m - 1; j >= 0; --j)", "            if (s[i][j] == '0')", "                r[i][j] = (last == -1 ? -1 : last - j);", "            else", "                r[i][j] = 0, last = j;", "        for (int j = 0; j < m; ++j)", "            if (l[i][j] < 0) l[i][j] = j + l[i][m - 1] + 1;", "        for (int j = m - 1; j >= 0; --j)", "            if (r[i][j] < 0) r[i][j] = (m - 1) - j + r[i][0] + 1;", "    }", "    if (bad) {", "        cout << -1 << \"\\n\";", "        return 0;", "    }", "    long long ans = n * m + 1;", "    for (int j = 0; j < m; ++j) {", "        long long cur = 0;", "        for (int i = 0; i < n; ++i) cur += min(l[i][j], r[i][j]);", "        ans = min(ans, cur);", "    }", "    cout << ans << \"\\n\";", "}"], "testcases": [[["3 6", "101010", "000100", "100000"], ["3"]], [["2 3", "111", "000"], ["-1"]], [["1 1", "1"], ["0"]], [["1 1", "0"], ["-1"]], [["3 1", "1", "1", "0"], ["-1"]], [["6 2", "10", "11", "01", "01", "10", "11"], ["2"]], [["3 3", "001", "010", "100"], ["2"]], [["4 4", "0001", "0100", "0010", "1000"], ["4"]], [["5 5", "10000", "01000", "00100", "00010", "00001"], ["6"]], [["5 5", "10001", "00100", "01000", "01001", "11111"], ["2"]], [["5 5", "11111", "11111", "11111", "11111", "00000"], ["-1"]], [["5 10", "0001000100", "1000001000", "0001000001", "0100001010", "0110100000"], ["5"]], [["6 6", "111000", "011100", "001110", "000111", "100011", "110001"], ["4"]], [["2 9", "101010101", "010101010"], ["1"]], [["4 6", "000001", "100000", "100000", "100000"], ["1"]], [["3 6", "000010", "010000", "000100"], ["3"]], [["4 10", "0000101010", "1010101010", "0101010101", "0000010100"], ["2"]], [["10 10", "0000000000", "0000000010", "0010000000", "0111000010", "1000000000", "0000000100", "0000000100", "0000100100", "0010000000", "0000100000"], ["-1"]], [["10 10", "0000000000", "0000001000", "0000000100", "0101000100", "0000000000", "0000000000", "1000110000", "1011010010", "0000100000", "0000001001"], ["-1"]], [["10 10", "0001001101", "0010001010", "1100000000", "0110110110", "1011011010", "1001001001", "0100010001", "0110000100", "0000100000", "1000010000"], ["8"]], [["10 10", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111"], ["0"]], [["2 5", "10000", "00001"], ["1"]], [["3 7", "1000000", "0000010", "1000000"], ["2"]], [["4 5", "10010", "11001", "00010", "11000"], ["2"]], [["2 10", "0000000001", "1000000000"], ["1"]], [["5 5", "10000", "10000", "00001", "10000", "10000"], ["1"]], [["3 4", "0001", "0001", "1000"], ["1"]], [["3 6", "101010", "000010", "100000"], ["2"]], [["4 7", "0100000", "0100000", "0000001", "0000001"], ["4"]], [["5 1", "0", "0", "0", "0", "0"], ["-1"]], [["3 5", "00001", "10000", "00001"], ["1"]], [["3 1", "0", "0", "0"], ["-1"]]]}, {"problem_id": "229A", "pseudocode_lines": ["dist = array of 2 by 10004 int", "define the main function", "    n, m = int", "    read n and m", "    for i = 0 to n exclusive", "        str = string", "        read str", "        firstone = -1", "        ff = 0", "        while ff < m and str[ff] is not '1' increment ff", "        if ff is m", "            print -1", "            return to indicate successful execution", "        end of the block", "        firstone = ff", "        dist[0][ff] = 0", "        j = ff+1 modulo m", "        while true", "            if str[j] is '1'", "                dist[0][j] = 0", "                k = j", "                while dist[0][k] < dist[0][k-1+m modulo m", "                    k = k-1+m modulo m", "                    dist[0][k] = dist[0][k+1 modulo m]+1", "                end of the block", "                if j is firstone break", "            else", "                dist[0][j] = dist[0][j+m-1 modulo m]+1", "            end of the block", "            j = j+1 modulo m", "        end of the block", "        for z = 0 to m exclusive", "            increment dist[1][z] by dist[0][z]", "            dist[0][z] = 0", "        end of the block", "    end of the block", "    minn = dist[1][0]", "    for h = 1 to m exclusive", "        if dist[1][h] < minn minn = dist[1][h]", "    end of the block", "    print minn", "    return to indicate successful execution", "end of the block"], "code_lines": ["int dist[2][10004];", "int main() {", "    int n, m;", "    cin >> n >> m;", "    for (int i = 0; i < n; i++) {", "        string str;", "        cin >> str;", "        int firstone = -1;", "        int ff = 0;", "        while (ff < m && str[ff] != '1') ff++;", "        if (ff == m) {", "            cout << -1 << endl;", "            return 0;", "        }", "        firstone = ff;", "        dist[0][ff] = 0;", "        int j = (ff + 1) % m;", "        while (true) {", "            if (str[j] == '1') {", "                dist[0][j] = 0;", "                int k = j;", "                while (dist[0][k] < dist[0][(k - 1 + m) % m]) {", "                    k = (k - 1 + m) % m;", "                    dist[0][k] = dist[0][(k + 1) % m] + 1;", "                }", "                if (j == firstone) break;", "            } else {", "                dist[0][j] = dist[0][(j + m - 1) % m] + 1;", "            }", "            j = (j + 1) % m;", "        }", "        for (int z = 0; z < m; z++) {", "            dist[1][z] += dist[0][z];", "            dist[0][z] = 0;", "        }", "    }", "    int minn = dist[1][0];", "    for (int h = 1; h < m; h++) {", "        if (dist[1][h] < minn) { minn = dist[1][h]; }", "    }", "    cout << minn << endl;", "    return 0;", "}"], "testcases": [[["3 6", "101010", "000100", "100000"], ["3"]], [["2 3", "111", "000"], ["-1"]], [["1 1", "1"], ["0"]], [["1 1", "0"], ["-1"]], [["3 1", "1", "1", "0"], ["-1"]], [["6 2", "10", "11", "01", "01", "10", "11"], ["2"]], [["3 3", "001", "010", "100"], ["2"]], [["4 4", "0001", "0100", "0010", "1000"], ["4"]], [["5 5", "10000", "01000", "00100", "00010", "00001"], ["6"]], [["5 5", "10001", "00100", "01000", "01001", "11111"], ["2"]], [["5 5", "11111", "11111", "11111", "11111", "00000"], ["-1"]], [["5 10", "0001000100", "1000001000", "0001000001", "0100001010", "0110100000"], ["5"]], [["6 6", "111000", "011100", "001110", "000111", "100011", "110001"], ["4"]], [["2 9", "101010101", "010101010"], ["1"]], [["4 6", "000001", "100000", "100000", "100000"], ["1"]], [["3 6", "000010", "010000", "000100"], ["3"]], [["4 10", "0000101010", "1010101010", "0101010101", "0000010100"], ["2"]], [["10 10", "0000000000", "0000000010", "0010000000", "0111000010", "1000000000", "0000000100", "0000000100", "0000100100", "0010000000", "0000100000"], ["-1"]], [["10 10", "0000000000", "0000001000", "0000000100", "0101000100", "0000000000", "0000000000", "1000110000", "1011010010", "0000100000", "0000001001"], ["-1"]], [["10 10", "0001001101", "0010001010", "1100000000", "0110110110", "1011011010", "1001001001", "0100010001", "0110000100", "0000100000", "1000010000"], ["8"]], [["10 10", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111"], ["0"]], [["2 5", "10000", "00001"], ["1"]], [["3 7", "1000000", "0000010", "1000000"], ["2"]], [["4 5", "10010", "11001", "00010", "11000"], ["2"]], [["2 10", "0000000001", "1000000000"], ["1"]], [["5 5", "10000", "10000", "00001", "10000", "10000"], ["1"]], [["3 4", "0001", "0001", "1000"], ["1"]], [["3 6", "101010", "000010", "100000"], ["2"]], [["4 7", "0100000", "0100000", "0000001", "0000001"], ["4"]], [["5 1", "0", "0", "0", "0", "0"], ["-1"]], [["3 5", "00001", "10000", "00001"], ["1"]], [["3 1", "0", "0", "0"], ["-1"]]]}, {"problem_id": "229A", "pseudocode_lines": ["integer constant INF = 1 << 29", "define the main function", "    declare integer variables n and m", "    read n and m", "    a is an array of strings with size n", "    read n elements into a", "    ans is an array of integers with size m", "    set m elements of ans to 0", "    chk is integer", "    for i = 0 to n exclusive", "        set value of chk to 0", "        for integer j = 0 to m exclusive, increment chk by 1 if a[i][j] = '1'", "        if chk = 0", "            print \"-1\\n\"", "            return to indicate successful execution", "        end of the block", "    end of the block", "    for i = 0 to n exclusive", "        declare integer called last", "        declare boolean variable called found = 0", "        for j = m - 1 to 0 inclusive counting down", "            if a[i][j] = '1'", "                set value of last to j", "                stop the loop", "            end of the block", "        end of the block", "        , curr is an array of integers with size m", "        for j = 0 to m exclusive, curr[j] = INT_MAX", "        for j = 0 to m exclusive", "            if a[i][j] = '1'", "                set value of last to j", "                found = 1", "            end of the block", "            if found is 0", "                curr[j] = min(curr[j], (m - last) + j)", "            else", "                curr[j] = min of curr[j] and abs(j - last)", "            end of the block", "        end of the block", "        found = 0", "        for j = 0 to m exclusive", "            if a[i][j] = '1'", "                last = j", "                break the loop", "            end of the block", "        end of the block", "        for integer j = m - 1 to 0 inclusive counting down", "            if a[i][j] = '1'", "                set value of last to j", "                assign value of 1 to found", "            end of the block", "            if found is 0", "                curr[j] = min(curr[j], (last + 1) + (m - 1 - j))", "            else", "                curr[j] = min(curr[j], abs(j - last))", "            end of the block", "        end of the block", "        for integer j = 0 to m exclusive increment ans[j] by curr[j]", "    end of the block", "    res is integer = INT_MAX", "    for i = 0 to m exclusive, set res to min(res, ans[i])", "    print res and a new line", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int INF = 1 << 29;", "int main() {", "    int n, m;", "    cin >> n >> m;", "    string a[n];", "    for (int i = 0; i < (n); i++) cin >> a[i];", "    int ans[m];", "    for (int i = 0; i < (m); i++) ans[i] = 0;", "    int chk;", "    for (int i = 0; i < (n); i++) {", "        chk = 0;", "        for (int j = 0; j < (m); j++) { chk += (a[i][j] == '1'); }", "        if (chk == 0) {", "            cout << \"-1\\n\";", "            return 0;", "        }", "    }", "    for (int i = 0; i < (n); i++) {", "        int last;", "        bool found = 0;", "        for (int j = m - 1; j >= 0; --j) {", "            if (a[i][j] == '1') {", "                last = j;", "                break;", "            }", "        }", "        int curr[m];", "        for (int j = 0; j < (m); j++) curr[j] = INT_MAX;", "        for (int j = 0; j < (m); j++) {", "            if (a[i][j] == '1') {", "                last = j;", "                found = 1;", "            }", "            if (!found) {", "                curr[j] = min(curr[j], (m - last) + j);", "            } else {", "                curr[j] = min(curr[j], abs(j - last));", "            }", "        }", "        found = 0;", "        for (int j = 0; j < m; ++j) {", "            if (a[i][j] == '1') {", "                last = j;", "                break;", "            }", "        }", "        for (int j = m - 1; j >= 0; --j) {", "            if (a[i][j] == '1') {", "                last = j;", "                found = 1;", "            }", "            if (!found) {", "                curr[j] = min(curr[j], (last + 1) + (m - 1 - j));", "            } else {", "                curr[j] = min(curr[j], abs(j - last));", "            }", "        }", "        for (int j = 0; j < (m); j++) ans[j] += curr[j];", "    }", "    int res = INT_MAX;", "    for (int i = 0; i < (m); i++) res = min(res, ans[i]);", "    cout << res << endl;", "    return 0;", "}"], "testcases": [[["3 6", "101010", "000100", "100000"], ["3"]], [["2 3", "111", "000"], ["-1"]], [["1 1", "1"], ["0"]], [["1 1", "0"], ["-1"]], [["3 1", "1", "1", "0"], ["-1"]], [["6 2", "10", "11", "01", "01", "10", "11"], ["2"]], [["3 3", "001", "010", "100"], ["2"]], [["4 4", "0001", "0100", "0010", "1000"], ["4"]], [["5 5", "10000", "01000", "00100", "00010", "00001"], ["6"]], [["5 5", "10001", "00100", "01000", "01001", "11111"], ["2"]], [["5 5", "11111", "11111", "11111", "11111", "00000"], ["-1"]], [["5 10", "0001000100", "1000001000", "0001000001", "0100001010", "0110100000"], ["5"]], [["6 6", "111000", "011100", "001110", "000111", "100011", "110001"], ["4"]], [["2 9", "101010101", "010101010"], ["1"]], [["4 6", "000001", "100000", "100000", "100000"], ["1"]], [["3 6", "000010", "010000", "000100"], ["3"]], [["4 10", "0000101010", "1010101010", "0101010101", "0000010100"], ["2"]], [["10 10", "0000000000", "0000000010", "0010000000", "0111000010", "1000000000", "0000000100", "0000000100", "0000100100", "0010000000", "0000100000"], ["-1"]], [["10 10", "0000000000", "0000001000", "0000000100", "0101000100", "0000000000", "0000000000", "1000110000", "1011010010", "0000100000", "0000001001"], ["-1"]], [["10 10", "0001001101", "0010001010", "1100000000", "0110110110", "1011011010", "1001001001", "0100010001", "0110000100", "0000100000", "1000010000"], ["8"]], [["10 10", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111"], ["0"]], [["2 5", "10000", "00001"], ["1"]], [["3 7", "1000000", "0000010", "1000000"], ["2"]], [["4 5", "10010", "11001", "00010", "11000"], ["2"]], [["2 10", "0000000001", "1000000000"], ["1"]], [["5 5", "10000", "10000", "00001", "10000", "10000"], ["1"]], [["3 4", "0001", "0001", "1000"], ["1"]], [["3 6", "101010", "000010", "100000"], ["2"]], [["4 7", "0100000", "0100000", "0000001", "0000001"], ["4"]], [["5 1", "0", "0", "0", "0", "0"], ["-1"]], [["3 5", "00001", "10000", "00001"], ["1"]], [["3 1", "0", "0", "0"], ["-1"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["MAXN = a constant set to 100005", "MOD = and constant set to 998244353", "a = an array of integers with a length of MAXN", "dp = a 2 dimentional array of integers with a length of 201", "newdp = a 2 dimentional array of integers with a length of 201", "define the main function", "    n = integer", "    read n", "    for i = 0 to n exclusive, read index i of a", "    for i = 0 to n exclusive", "        if i = 0", "            if index i of a = -1", "                for x = 1 to 200 inclusive, set newdp[x][0] = 1", "            else", "                newdp[a[i]][0] = 1", "            end of the block", "        else", "            if index i of a = -1", "                flag0 = integer set to 0", "                flag1 = integer set to 0", "                for y = 1 to 200 inclusive", "                    add dp[y][1] to flag1", "                    modulo flag1 by MOD", "                end of the block", "                for x = 1 to 200 inclusive", "                    subtract dp[x - 1][1] from flag1", "                    add MOD to flag1", "                    modulo flag1 by MOD", "                    subtract dp[x - 1][0] from flag1", "                    add MOD to flag1", "                    modulo flag1 by MOD", "                    add dp[x - 1][1] to flag0", "                    modulo flag0 by MOD", "                    add dp[x - 1][0] to flag0", "                    modulo flag0 by MOD", "                    add dp[x][0] to flag1", "                    modulo flag1 by MOD", "                    set newdp[x][0] to flag0", "                    set newdp[x][1] to flag1", "                end of the block", "            else", "                x = integer set to index i of a", "                for y = 1 to 200 inclusive", "                    flag = integer set to 1 if x <= y or 0", "                    add dp[y][1] to newdp[x][flag]", "                    modulo newdp[x][flag] by MOD", "                    if y <= x", "                        add dp[y][0] to newdp[x][flag]", "                        modulo newdp[x][flag] by MOD", "                    end of the block", "                end of the block", "            end of the block", "        end of the block", "        run memcpy with dp, newdp and 201 * 2 * 4 as arguments", "        run memset with newdp, 0, and 201 * 2 * 4 as arguments", "    end of the block", "    ans = integer set to 0", "    for x = 1 to 200 inclusive", "        add dp[x][1] to ans", "        modulo ans by MOD", "    end of the block", "    read ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 100005;", "const int MOD = 998244353;", "int a[MAXN];", "int dp[201][2];", "int newdp[201][2];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; ++i) { cin >> a[i]; }", "    for (int i = 0; i < n; ++i) {", "        if (i == 0) {", "            if (a[i] == -1) {", "                for (int x = 1; x <= 200; ++x) { newdp[x][0] = 1; }", "            } else {", "                newdp[a[i]][0] = 1;", "            }", "        } else {", "            if (a[i] == -1) {", "                int flag0 = 0;", "                int flag1 = 0;", "                for (int y = 1; y <= 200; ++y) {", "                    flag1 += dp[y][1];", "                    flag1 %= MOD;", "                }", "                for (int x = 1; x <= 200; ++x) {", "                    flag1 -= dp[x - 1][1];", "                    flag1 += MOD;", "                    flag1 %= MOD;", "                    flag1 -= dp[x - 1][0];", "                    flag1 += MOD;", "                    flag1 %= MOD;", "                    flag0 += dp[x - 1][1];", "                    flag0 %= MOD;", "                    flag0 += dp[x - 1][0];", "                    flag0 %= MOD;", "                    flag1 += dp[x][0];", "                    flag1 %= MOD;", "                    newdp[x][0] = flag0;", "                    newdp[x][1] = flag1;", "                }", "            } else {", "                int x = a[i];", "                for (int y = 1; y <= 200; ++y) {", "                    int flag = x <= y ? 1 : 0;", "                    newdp[x][flag] += dp[y][1];", "                    newdp[x][flag] %= MOD;", "                    if (y <= x) {", "                        newdp[x][flag] += dp[y][0];", "                        newdp[x][flag] %= MOD;", "                    }", "                }", "            }", "        }", "        memcpy(dp, newdp, 201 * 2 * 4);", "        memset(newdp, 0, 201 * 2 * 4);", "    }", "    int ans = 0;", "    for (int x = 1; x <= 200; ++x) {", "        ans += dp[x][1];", "        ans %= MOD;", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["MAXINT = const int with MAXINT = 2147483640", "MAXLL = const long long with MAXLL = 9223372036854775800LL", "MAXN = const long long with MAXN = 1e6", "eps = const double with eps = 1e-9", "mod = const long long with mod = 998244353", "dp = 3d array of long long of size [100006][202][2], pref = 2d array of size [300][2]", "n = long long, a = integer array of size MAXN", "define the main function", "    call srand on time(0)", "    read n", "    for i = 1 to n, read a[i]", "    if a[1] is -1", "        for i = 1 to 200 dp[1][j][0] = 1", "    else", "        dp[1][a[1]][0] = 1", "    for i = 2 to n", "        for j = 1 to 200", "            (pref[j][1] = pref[j - 1][1] + dp[i - 1][j][1]) = (pref[j][1] = pref[j - 1][1] + dp[i - 1][j][1]) modulo mod", "            (pref[j][0] = pref[j - 1][0] + dp[i - 1][j][0]) = (pref[j][0] = pref[j - 1][0] + dp[i - 1][j][0]) modulo mod", "        end of the block", "        if a[i] is -1", "            for cur = 1 to 200", "                sum = long long with sum = 0", "                (sum = sum + (pref[200][1] - pref[cur - 1][1] + mod)) = (sum = sum + (pref[200][1] - pref[cur - 1][1] + mod)) modulo mod", "                (sum = sum + dp[i - 1][cur][0]) = (sum = sum + dp[i - 1][cur][0]) modulo mod", "                (dp[i][cur][1] = dp[i][cur][1] + sum) = (dp[i][cur][1] = dp[i][cur][1] + sum) modulo mod", "                sum = pref[cur - 1][1] + pref[cur - 1][0]", "                (dp[i][cur][0] = dp[i][cur][0] + sum) = (dp[i][cur][0] = dp[i][cur][0] + sum) modulo mod", "            end of the block", "        else", "            sum = long long with sum = 0", "            cur = long long with cur = a[i]", "            for j = cur to 200, sum = sum + (dp[i - 1][j][1]) = sum + (dp[i - 1][j][1]) modulo mod", "            (sum = sum + dp[i - 1][cur][0]) = (sum = sum + dp[i - 1][cur][0]) modulo mod", "            (dp[i][cur][1] = dp[i][cur][1] + sum) = (dp[i][cur][1] = dp[i][cur][1] + sum) modulo mod", "            sum = 0", "            for j = 1 to cur exclusive, (sum = sum + dp[i - 1][j][0] + dp[i - 1][j][1]) = (sum = sum + dp[i - 1][j][0] + dp[i - 1][j][1]) modulo mod", "            (dp[i][cur][0] = dp[i][cur][0] + sum) = (dp[i][cur][0] = dp[i][cur][0] + sum) modulo mod", "        end of the block", "    end of the block", "    ans = long long with ans = 0", "    for i = 1 to 200, (ans = ans + dp[n][i][1]) = (ans = ans + dp[n][i][1]) modulo mod", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXINT = 2147483640;", "const long long MAXLL = 9223372036854775800LL;", "const long long MAXN = 1e6;", "const double eps = 1e-9;", "const long long mod = 998244353;", "long long dp[100006][202][2], pref[300][2];", "long long n, a[MAXN];", "int main() {", "    srand(time(0));", "    cin >> n;", "    for (int i = 1; i <= n; ++i) cin >> a[i];", "    if (a[1] == -1)", "        for (int j = 1; j <= 200; ++j) dp[1][j][0] = 1;", "    else", "        dp[1][a[1]][0] = 1;", "    for (int i = 2; i <= n; ++i) {", "        for (int j = 1; j <= 200; ++j) {", "            (pref[j][1] = pref[j - 1][1] + dp[i - 1][j][1]) %= mod;", "            (pref[j][0] = pref[j - 1][0] + dp[i - 1][j][0]) %= mod;", "        }", "        if (a[i] == -1) {", "            for (int cur = 1; cur <= 200; ++cur) {", "                long long sum = 0;", "                (sum += (pref[200][1] - pref[cur - 1][1] + mod)) %= mod;", "                (sum += dp[i - 1][cur][0]) %= mod;", "                (dp[i][cur][1] += sum) %= mod;", "                sum = pref[cur - 1][1] + pref[cur - 1][0];", "                (dp[i][cur][0] += sum) %= mod;", "            }", "        } else {", "            long long sum = 0;", "            long long cur = a[i];", "            for (int j = cur; j <= 200; ++j) sum += (dp[i - 1][j][1]) %= mod;", "            (sum += dp[i - 1][cur][0]) %= mod;", "            (dp[i][cur][1] += sum) %= mod;", "            sum = 0;", "            for (int j = 1; j < cur; ++j) (sum += dp[i - 1][j][0] + dp[i - 1][j][1]) %= mod;", "            (dp[i][cur][0] += sum) %= mod;", "        }", "    }", "    long long ans = 0;", "    for (int i = 1; i <= 200; ++i) (ans += dp[n][i][1]) %= mod;", "    cout << ans << \"\\n\";", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["create integers n, i, rez, sum, sum1, integer array DP of sizes 2, 2, and 205, integer array A of size 100005, and create integers cr, j", "in function f that takes in arguments integer address a, integer b, and return f", "    a is assigned the sum of a and b", "    if a is greater than or equal to 998244353, subtract 998244353 from a", "end of the block", "define the main function", "    input n", "    for i = 1 to n inclusive, input A[i]", "    if A[1] doesn't equal -1", "        Dp[1][1][A[1]] is set to 1", "    else", "        for i = 1 to 200 inclusive, set Dp[1][1][i] to 1", "    assign 1 to cr", "    for i = 2 to n inclusive", "        assign 1 - cr to cr", "        if A[i] doesn't equal -1", "            for j = 1 to 200 inclusive", "                if A[i] is less than j, call function f with arguments Dp[cr][0][A[i]], Dp[1 - cr][0][j]", "                if a[i] is equal to j", "                    call function f with arguments Dp[cr][0][A[i]], Dp[1 - cr][0][j]", "                    call function f with arguments Dp[cr][0][A[i]], Dp[1 - cr][1][j]", "                end of the block", "                if A[i] is greater than j", "                    call function f with arguments Dp[cr][1][A[i]], Dp[1 - cr][0][j]", "                    call function f with arguments Dp[cr][1][A[i]], Dp[1 - cr][1][j]", "                end of the block", "                set Dp[1 - cr][1][j] and Dp[1 - cr][0][j] to 0", "            end of the block", "        else", "            assign 0 to sum", "            for j = 1 to 200 inclusive, call function f with arguments sum, Dp[1 - cr][0][j]", "            assign 0 to sum1", "            for j = 1 to 200 inclusive", "                call function f with arguments Dp[cr][0][j], sum", "                call function f with arguments Dp[cr][0][j], Dp[1 - cr][1][j]", "                call function f with arguments sum, 998244353 - Dp[1 - cr][0][j]", "                call function f with arguments Dp[cr][1][j], sum1", "                call function f with arguments sum1, Dp[1 - cr][1][j]", "                call function f with arguments sum1, Dp[1 - cr][0][j]", "                set Dp[1 - cr][0][j] and Dp[1 - cr][1][j] to 0", "            end of the block", "        end of the block", "    end of the block", "    for i = 1 to 200 inclusive, call function f with arguments rez, Dp[cr][0][i]", "    output rez", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, i, rez, sum, sum1, Dp[2][2][205], A[100005], cr, j;", "void f(int &a, int b) {", "    a = a + b;", "    if (a >= 998244353) a -= 998244353;", "}", "int main() {", "    cin >> n;", "    for (i = 1; i <= n; i++) cin >> A[i];", "    if (A[1] != -1)", "        Dp[1][1][A[1]] = 1;", "    else", "        for (i = 1; i <= 200; i++) Dp[1][1][i] = 1;", "    cr = 1;", "    for (i = 2; i <= n; i++) {", "        cr = 1 - cr;", "        if (A[i] != -1) {", "            for (j = 1; j <= 200; j++) {", "                if (A[i] < j) f(Dp[cr][0][A[i]], Dp[1 - cr][0][j]);", "                if (A[i] == j) {", "                    f(Dp[cr][0][A[i]], Dp[1 - cr][0][j]);", "                    f(Dp[cr][0][A[i]], Dp[1 - cr][1][j]);", "                }", "                if (A[i] > j) {", "                    f(Dp[cr][1][A[i]], Dp[1 - cr][0][j]);", "                    f(Dp[cr][1][A[i]], Dp[1 - cr][1][j]);", "                }", "                Dp[1 - cr][1][j] = Dp[1 - cr][0][j] = 0;", "            }", "        } else {", "            sum = 0;", "            for (j = 1; j <= 200; j++) f(sum, Dp[1 - cr][0][j]);", "            sum1 = 0;", "            for (j = 1; j <= 200; j++) {", "                f(Dp[cr][0][j], sum);", "                f(Dp[cr][0][j], Dp[1 - cr][1][j]);", "                f(sum, 998244353 - Dp[1 - cr][0][j]);", "                f(Dp[cr][1][j], sum1);", "                f(sum1, Dp[1 - cr][1][j]);", "                f(sum1, Dp[1 - cr][0][j]);", "                Dp[1 - cr][0][j] = Dp[1 - cr][1][j] = 0;", "            }", "        }", "    }", "    for (i = 1; i <= 200; i++) f(rez, Dp[cr][0][i]);", "    cout << rez << \"\\n\";", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["MAXINT = const integer with MAXINT = 2147483640", "MAXLL = const long long with MAXLL = 9223372036854775800LL", "MAXN = const long long with MAXN = 1e6", "eps = const double with eps = 1e-9", "mod = const long long with mod = 998244353", "dp = 3d const long long array of size [100006][202][2], pref = 2d const long long array of size [300][2]", "n, a = long long with a = long long array of size MAXN", "define the main function", "    srand of time(0)", "    read n", "    for i = 1 to n, read a[i]", "    if a[1] is -1", "        for i = 1 to 200, dp[1][j][0] = 1", "    else", "        dp[1][a[1]][0] = 1", "    for i = 2 to n", "        for j = 1 to 200", "            (pref[j][1] = pref[j - 1][1] + dp[i - 1][j][1]) = (pref[j][1] = pref[j - 1][1] + dp[i - 1][j][1]) modulo mod", "            (pref[j][0] = pref[j - 1][0] + dp[i - 1][j][0]) = (pref[j][0] = pref[j - 1][0] + dp[i - 1][j][0]) modulo mod", "        end of the block", "        if a[i] is -1", "            for cur = 1 to 200", "                sum = long long with sum = 0", "                (sum = sum + (pref[200][1] - pref[cur - 1][1] + mod)) = (sum = sum + (pref[200][1] - pref[cur - 1][1] + mod)) modulo mod", "                (sum = sum + dp[i - 1][cur][0]) = (sum = sum + dp[i - 1][cur][0]) modulo mod", "                (dp[i][cur][1] = dp[i][cur][1] + sum) = (dp[i][cur][1] = dp[i][cur][1] + sum) modulo mod", "                sum = pref[cur - 1][1] + pref[cur - 1][0]", "                (dp[i][cur][0] = dp[i][cur][0] sum) = (dp[i][cur][0] = dp[i][cur][0] + sum) modulo mod", "            end of the block", "        else", "            sum = long long with sum = 0", "            cur = long long with cur = a[i]", "            for j = cur to 200, sum = sum + (dp[i - 1][j][1]) = (dp[i - 1][j][1]) modulo mod", "            (sum = sum + dp[i - 1][cur][0]) = (sum = sum + dp[i - 1][cur][0]) modulo mod", "            (dp[i][cur][1] = dp[i][cur][1] + sum) = (dp[i][cur][1] = dp[i][cur][1] + sum) modulo mod", "            sum = 0", "            for j = 1 to cur exclusive, sum = sum + dp[i - 1][j][0] + dp[i - 1][j][1]) = (sum = sum + dp[i - 1][j][0] + dp[i - 1][j][1]) modulo mod", "            (dp[i][cur][0] = dp[i][cur][0] + sum) = (dp[i][cur][0] = dp[i][cur][0] + sum) modulo mod", "        end of the block", "    end of the block", "    ans = long long with ans = 0", "    (ans = ans + dp[n][i][1]) = (ans = ans + dp[n][i][1]) modulo mod", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXINT = 2147483640;", "const long long MAXLL = 9223372036854775800LL;", "const long long MAXN = 1e6;", "const double eps = 1e-9;", "const long long mod = 998244353;", "long long dp[100006][202][2], pref[300][2];", "long long n, a[MAXN];", "int main() {", "    srand(time(0));", "    cin >> n;", "    for (int i = 1; i <= n; ++i) cin >> a[i];", "    if (a[1] == -1)", "        for (int j = 1; j <= 200; ++j) dp[1][j][0] = 1;", "    else", "        dp[1][a[1]][0] = 1;", "    for (int i = 2; i <= n; ++i) {", "        for (int j = 1; j <= 200; ++j) {", "            (pref[j][1] = pref[j - 1][1] + dp[i - 1][j][1]) %= mod;", "            (pref[j][0] = pref[j - 1][0] + dp[i - 1][j][0]) %= mod;", "        }", "        if (a[i] == -1) {", "            for (int cur = 1; cur <= 200; ++cur) {", "                long long sum = 0;", "                (sum += (pref[200][1] - pref[cur - 1][1] + mod)) %= mod;", "                (sum += dp[i - 1][cur][0]) %= mod;", "                (dp[i][cur][1] += sum) %= mod;", "                sum = pref[cur - 1][1] + pref[cur - 1][0];", "                (dp[i][cur][0] += sum) %= mod;", "            }", "        } else {", "            long long sum = 0;", "            long long cur = a[i];", "            for (int j = cur; j <= 200; ++j) sum += (dp[i - 1][j][1]) %= mod;", "            (sum += dp[i - 1][cur][0]) %= mod;", "            (dp[i][cur][1] += sum) %= mod;", "            sum = 0;", "            for (int j = 1; j < cur; ++j) (sum += dp[i - 1][j][0] + dp[i - 1][j][1]) %= mod;", "            (dp[i][cur][0] += sum) %= mod;", "        }", "    }", "    long long ans = 0;", "    for (int i = 1; i <= 200; ++i) (ans += dp[n][i][1]) %= mod;", "    cout << ans << \"\\n\";", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["create const int N = 1e5 + 5", "create const long long mod = 998244353", "declare 3d long long array dp with size N by 201 by 3", "let a be int array with size N", "define the main function", "    declare integer variable n", "    read n", "    for i from 1 to n + 1 exclusive, read input to a[i]", "    set sizeof(dp) bytes at the pointer dp to 0", "    for i = 1 to 201 exclusive", "        if a[1] = -1 or a[1] = i, set dp[1][i][2] to 1", "    end of the block", "    create long long sum = 0", "    for i = 2 to n inclusive", "        assign 0 to sum", "        for integer j = 200 to 1 inclusive, decrementing j", "            if a[i] = -1 or a[i] = j, change dp[i][j][0] to sum", "            assign (sum + dp[i - 1][j][1] + dp[i - 1][j][0]) % mod to sum", "        end of the block", "        for j from 1 to 201 exclusive", "            if a[i] = -1 or a[i] = j, set dp[i][j][1] to (dp[i - 1][j][1] + dp[i - 1][j][0] + dp[i - 1][j][2]) % mod", "        end of the block", "        change sum to 0", "        for integer j = 1 to 200 inclusive", "            if a[i] = -1 or a[i] = j, set dp[i][j][2] to sum", "            assign (sum + dp[i - 1][j][1] + dp[i - 1][j][0] + dp[i - 1][j][2]) % mod to sum", "        end of the block", "    end of the block", "    declare long long variable ans = 0", "    for i = 1 to 200 inclusive, change ans to (ans + dp[n][i][1] + dp[n][i][0]) % mod", "    print ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 1e5 + 5;", "const long long mod = 998244353;", "long long dp[N][201][3];", "int a[N];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = (1); i < (n + 1); i++) cin >> a[i];", "    memset(dp, 0, sizeof(dp));", "    for (int i = (1); i < (201); i++) {", "        if (a[1] == -1 || a[1] == i) { dp[1][i][2] = 1; }", "    }", "    long long sum = 0;", "    for (int i = 2; i <= n; ++i) {", "        sum = 0;", "        for (int j = 200; j >= 1; --j) {", "            if (a[i] == -1 || a[i] == j) { dp[i][j][0] = sum; }", "            sum = (sum + dp[i - 1][j][1] + dp[i - 1][j][0]) % mod;", "        }", "        for (int j = (1); j < (201); j++) {", "            if (a[i] == -1 || a[i] == j) { dp[i][j][1] = (dp[i - 1][j][1] + dp[i - 1][j][0] + dp[i - 1][j][2]) % mod; }", "        }", "        sum = 0;", "        for (int j = 1; j <= 200; ++j) {", "            if (a[i] == -1 || a[i] == j) { dp[i][j][2] = sum; }", "            sum = (sum + dp[i - 1][j][1] + dp[i - 1][j][0] + dp[i - 1][j][2]) % mod;", "        }", "    }", "    long long ans = 0;", "    for (int i = 1; i <= 200; ++i) ans = (ans + dp[n][i][1] + dp[n][i][0]) % mod;", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["create integer N, create integer array arr with size 100001", "create 3d long long array dp with size 100001 by 201 by 2", "define the main function", "    read N", "    for i = 1 to N inclusive, read arr[i]", "    for i = 1 to N inclusive", "        if arr[i] is not -1", "            if i is 1", "                set dp[i][arr[i]][0] to 1", "            else", "                for j = 1 to arr[i] exclusive", "                    increment dp[i][arr[i]][0] by dp[i - 1][j][0] + dp[i - 1][j][1]", "                    set dp[i][arr[i]][0] to dp[i][arr[i]][0] % 998244353", "                end of the block", "                increment dp[i][arr[i]][1] by dp[i - 1][arr[i]][0]", "                set dp[i][arr[i]][1] to dp[i][arr[i]][1] % 998244353", "                for j = arr[i] to 200 inclusive", "                    increment dp[i][arr[i]][1] by dp[i - 1][j][1]", "                    set dp[i][arr[i]][1] to dp[i][arr[i]][1] % 998244353", "                end of the block", "            end of the block", "        else", "            if i is 1", "                for j = 1 to 200 inclusive, set dp[i][j][0] to 1", "            else", "                create long long temp with temp = 0", "                for j = 1 to 200 inclusive", "                    increment dp[i][j][1] by dp[i-1][j][0]", "                    set dp[i][j][1] to dp[i][j][1] % 998244353", "                    increment dp[i][j][0] by temp", "                    set dp[i][j][0] to dp[i][j][0] % 998244353", "                    increment temp by dp[i - 1][j][0]", "                    set temp to temp % 998244353", "                end of the block", "                set temp to 0", "                for j = 200 to 1 inclusive, decrementing i", "                    increment temp by dp[i - 1][j][1]", "                    set temp to temp % 998244353", "                    increment dp[i][j][1] by temp", "                    set dp[i][j][1] to dp[i][j][1] % 998244353", "                end of the block", "                set temp to 0", "                for j = 1 to 200 inclusive", "                    increment dp[i][j][0] by temp", "                    set dp[i][j][0] to dp[i][j][0] % 998244353", "                    increment temp by dp[i - 1][j][1]", "                    set temp to temp % 998244353", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    create long long ans with ans = 0", "    for i = 1 to 200 inclusive, set ans to (ans + dp[N][i][1]) % 998244353", "    print ans print '\\n'", "    return to indicate successful execution", "end of the block"], "code_lines": ["int N, arr[100001];", "long long dp[100001][201][2];", "int main() {", "    cin >> N;", "    for (int i = 1; i <= N; i++) cin >> arr[i];", "    for (int i = 1; i <= N; i++) {", "        if (arr[i] != -1) {", "            if (i == 1)", "                dp[i][arr[i]][0] = 1;", "            else {", "                for (int j = 1; j < arr[i]; j++) {", "                    dp[i][arr[i]][0] += dp[i - 1][j][0] + dp[i - 1][j][1];", "                    dp[i][arr[i]][0] %= 998244353;", "                }", "                dp[i][arr[i]][1] += dp[i - 1][arr[i]][0];", "                dp[i][arr[i]][1] %= 998244353;", "                for (int j = arr[i]; j <= 200; j++) {", "                    dp[i][arr[i]][1] += dp[i - 1][j][1];", "                    dp[i][arr[i]][1] %= 998244353;", "                }", "            }", "        } else {", "            if (i == 1) {", "                for (int j = 1; j <= 200; j++) dp[i][j][0] = 1;", "            } else {", "                long long temp = 0;", "                for (int j = 1; j <= 200; j++) {", "                    dp[i][j][1] += dp[i - 1][j][0];", "                    dp[i][j][1] %= 998244353;", "                    dp[i][j][0] += temp;", "                    dp[i][j][0] %= 998244353;", "                    temp += dp[i - 1][j][0];", "                    temp %= 998244353;", "                }", "                temp = 0;", "                for (int j = 200; j >= 1; j--) {", "                    temp += dp[i - 1][j][1];", "                    temp %= 998244353;", "                    dp[i][j][1] += temp;", "                    dp[i][j][1] %= 998244353;", "                }", "                temp = 0;", "                for (int j = 1; j <= 200; j++) {", "                    dp[i][j][0] += temp;", "                    dp[i][j][0] %= 998244353;", "                    temp += dp[i - 1][j][1];", "                    temp %= 998244353;", "                }", "            }", "        }", "    }", "    long long ans = 0;", "    for (int i = 1; i <= 200; i++) ans = (ans + dp[N][i][1]) % 998244353;", "    cout << ans << '\\n';", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["create long long mod with mod = 998244353", "create integer array a with size 100000", "define the main function", "    create integer n", "    read n", "    for i = 0 to n exclusive, read a[i]", "    create long long vectors up, notup, prev_up, prev_notup, with up initialized with 201, notup initialized with 201, prev_up initialized with (201,0), prev_notup initialized with (201,0)", "    set prev_up[0] to 1", "    for i = 0 to n exclusive", "        for j = 1 to 200 inclusive", "            increment prev_up[j] by prev_up[j - 1], set prev_up[j] to prev_up[j] % mod", "            increment prev_notup[j] by prev_notup[j-1], set prev_notup[j] to prev_notup[j] % mod", "        end of the block", "        set up[0] to notup[0] to 0", "        for j = 1 to 200 inclusive", "            set up[j] to notup[j] to 0", "            if a[i] is not -1 and a[i] is not j, break current loop iteration", "            increment up[j] by prev_up[j - 1] + prev_notup[j - 1], set up[j] to up[j] % mod", "            increment notup[j] by prev_up[j] + prev_notup[j], set notup[j] to notup[j] % mod", "            decrement notup[j] by prev_up[j - 1] + prev_notup[j - 1], set notup[j] to notup[j] % mod", "            increment notup[j] by prev_notup[200] - prev_notup[j], set notup[j] to notup[j] % mod", "        end of the block", "        set prev_up to up", "        set prev_notup to notup", "    end of the block", "    create long long ans with ans = 0", "    for i = 1 to 200 inclusive, increment ans by prev_notup[i], set ans to ans % mod", "    print ( ans + mod ) % mod print newline", "end of the block"], "code_lines": ["long long mod = 998244353;", "int a[100000];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; i++) cin >> a[i];", "    vector<long long> up(201), notup(201), prev_up(201, 0), prev_notup(201, 0);", "    prev_up[0] = 1;", "    for (int i = 0; i < n; i++) {", "        for (int j = 1; j <= 200; j++) {", "            (prev_up[j] += prev_up[j - 1]) %= mod;", "            (prev_notup[j] += prev_notup[j - 1]) %= mod;", "        }", "        up[0] = notup[0] = 0;", "        for (int j = 1; j <= 200; j++) {", "            up[j] = notup[j] = 0;", "            if (a[i] != -1 && a[i] != j) continue;", "            (up[j] += prev_up[j - 1] + prev_notup[j - 1]) %= mod;", "            (notup[j] += prev_up[j] + prev_notup[j]) %= mod;", "            (notup[j] -= prev_up[j - 1] + prev_notup[j - 1]) %= mod;", "            (notup[j] += prev_notup[200] - prev_notup[j]) %= mod;", "        }", "        prev_up = up;", "        prev_notup = notup;", "    }", "    long long ans = 0;", "    for (int i = 1; i <= 200; i++) (ans += prev_notup[i]) %= mod;", "    cout << (ans + mod) % mod << endl;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["create integers n, i, rez, sum, sum1, integer array DP of sizes 2, 2, and 205, integer array A of size 100005, and create integers cr, j", "in function f that takes in arguments integer address a, integer b, and return f", "    a is assigned the sum of a and b", "    if a is greater than or equal to 998244353, subtract 998244353 from a", "end of the block", "define the main function", "    input n", "    for i = 1 to n inclusive, input A[i]", "    if A[1] doesn't equal -1", "        Dp[1][1][A[1]] is set to 1", "    else", "        for i = 1 to 200 inclusive, set Dp[1][1][i] to 1", "    assign 1 to cr", "    for i = 2 to n inclusive", "        assign 1 - cr to cr", "        if A[i] doesn't equal -1", "            for j = 1 to 200 inclusive", "                if A[i] is less than j, call function f with arguments Dp[cr][0][A[i]], Dp[1 - cr][0][j]", "                if a[i] is equal to j", "                    call function f with arguments Dp[cr][0][A[i]], Dp[1 - cr][0][j]", "                    call function f with arguments Dp[cr][0][A[i]], Dp[1 - cr][1][j]", "                end of the block", "                if A[i] is greater than j", "                    call function f with arguments Dp[cr][1][A[i]], Dp[1 - cr][0][j]", "                    call function f with arguments Dp[cr][1][A[i]], Dp[1 - cr][1][j]", "                end of the block", "                set Dp[1 - cr][1][j] and Dp[1 - cr][0][j] to 0", "            end of the block", "        else", "            assign 0 to sum", "            for j = 1 to 200 inclusive, call function f with arguments sum, Dp[1 - cr][0][j]", "            assign 0 to sum1", "            for j = 1 to 200 inclusive", "                call function f with arguments Dp[cr][0][j], sum", "                call function f with arguments Dp[cr][0][j], Dp[1 - cr][1][j]", "                call function f with arguments sum, 998244353 - Dp[1 - cr][0][j]", "                call function f with arguments Dp[cr][1][j], sum1", "                call function f with arguments sum1, Dp[1 - cr][1][j]", "                call function f with arguments sum1, Dp[1 - cr][0][j]", "                set Dp[1 - cr][0][j] and Dp[1 - cr][1][j] to 0", "            end of the block", "        end of the block", "    end of the block", "    for i = 1 to 200 inclusive, call function f with arguments rez, Dp[cr][0][i]", "    output rez", "    return to indicate successful execution", "end of the block"], "code_lines": ["int n, i, rez, sum, sum1, Dp[2][2][205], A[100005], cr, j;", "void f(int &a, int b) {", "    a = a + b;", "    if (a >= 998244353) a -= 998244353;", "}", "int main() {", "    cin >> n;", "    for (i = 1; i <= n; i++) cin >> A[i];", "    if (A[1] != -1)", "        Dp[1][1][A[1]] = 1;", "    else", "        for (i = 1; i <= 200; i++) Dp[1][1][i] = 1;", "    cr = 1;", "    for (i = 2; i <= n; i++) {", "        cr = 1 - cr;", "        if (A[i] != -1) {", "            for (j = 1; j <= 200; j++) {", "                if (A[i] < j) f(Dp[cr][0][A[i]], Dp[1 - cr][0][j]);", "                if (A[i] == j) {", "                    f(Dp[cr][0][A[i]], Dp[1 - cr][0][j]);", "                    f(Dp[cr][0][A[i]], Dp[1 - cr][1][j]);", "                }", "                if (A[i] > j) {", "                    f(Dp[cr][1][A[i]], Dp[1 - cr][0][j]);", "                    f(Dp[cr][1][A[i]], Dp[1 - cr][1][j]);", "                }", "                Dp[1 - cr][1][j] = Dp[1 - cr][0][j] = 0;", "            }", "        } else {", "            sum = 0;", "            for (j = 1; j <= 200; j++) f(sum, Dp[1 - cr][0][j]);", "            sum1 = 0;", "            for (j = 1; j <= 200; j++) {", "                f(Dp[cr][0][j], sum);", "                f(Dp[cr][0][j], Dp[1 - cr][1][j]);", "                f(sum, 998244353 - Dp[1 - cr][0][j]);", "                f(Dp[cr][1][j], sum1);", "                f(sum1, Dp[1 - cr][1][j]);", "                f(sum1, Dp[1 - cr][0][j]);", "                Dp[1 - cr][0][j] = Dp[1 - cr][1][j] = 0;", "            }", "        }", "    }", "    for (i = 1; i <= 200; i++) f(rez, Dp[cr][0][i]);", "    cout << rez << \"\\n\";", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["MAXN = a constant set to 100005", "MOD = and constant set to 998244353", "a = an array of integers with a length of MAXN", "dp = a 2 dimentional array of integers with a length of 201", "newdp = a 2 dimentional array of integers with a length of 201", "define the main function", "    n = integer", "    read n", "    for i = 0 to n exclusive, read index i of a", "    for i = 0 to n exclusive", "        if i = 0", "            if index i of a = -1", "                for x = 1 to 200 inclusive, set newdp[x][0] = 1", "            else", "                newdp[a[i]][0] = 1", "            end of the block", "        else", "            if index i of a = -1", "                flag0 = integer set to 0", "                flag1 = integer set to 0", "                for y = 1 to 200 inclusive", "                    add dp[y][1] to flag1", "                    modulo flag1 by MOD", "                end of the block", "                for x = 1 to 200 inclusive", "                    subtract dp[x - 1][1] from flag1", "                    add MOD to flag1", "                    modulo flag1 by MOD", "                    subtract dp[x - 1][0] from flag1", "                    add MOD to flag1", "                    modulo flag1 by MOD", "                    add dp[x - 1][1] to flag0", "                    modulo flag0 by MOD", "                    add dp[x - 1][0] to flag0", "                    modulo flag0 by MOD", "                    add dp[x][0] to flag1", "                    modulo flag1 by MOD", "                    set newdp[x][0] to flag0", "                    set newdp[x][1] to flag1", "                end of the block", "            else", "                x = integer set to index i of a", "                for y = 1 to 200 inclusive", "                    flag = integer set to 1 if x <= y or 0", "                    add dp[y][1] to newdp[x][flag]", "                    modulo newdp[x][flag] by MOD", "                    if y <= x", "                        add dp[y][0] to newdp[x][flag]", "                        modulo newdp[x][flag] by MOD", "                    end of the block", "                end of the block", "            end of the block", "        end of the block", "        run memcpy with dp, newdp and 201 * 2 * 4 as arguments", "        run memset with newdp, 0, and 201 * 2 * 4 as arguments", "    end of the block", "    ans = integer set to 0", "    for x = 1 to 200 inclusive", "        add dp[x][1] to ans", "        modulo ans by MOD", "    end of the block", "    read ans", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 100005;", "const int MOD = 998244353;", "int a[MAXN];", "int dp[201][2];", "int newdp[201][2];", "int main() {", "    int n;", "    cin >> n;", "    for (int i = 0; i < n; ++i) { cin >> a[i]; }", "    for (int i = 0; i < n; ++i) {", "        if (i == 0) {", "            if (a[i] == -1) {", "                for (int x = 1; x <= 200; ++x) { newdp[x][0] = 1; }", "            } else {", "                newdp[a[i]][0] = 1;", "            }", "        } else {", "            if (a[i] == -1) {", "                int flag0 = 0;", "                int flag1 = 0;", "                for (int y = 1; y <= 200; ++y) {", "                    flag1 += dp[y][1];", "                    flag1 %= MOD;", "                }", "                for (int x = 1; x <= 200; ++x) {", "                    flag1 -= dp[x - 1][1];", "                    flag1 += MOD;", "                    flag1 %= MOD;", "                    flag1 -= dp[x - 1][0];", "                    flag1 += MOD;", "                    flag1 %= MOD;", "                    flag0 += dp[x - 1][1];", "                    flag0 %= MOD;", "                    flag0 += dp[x - 1][0];", "                    flag0 %= MOD;", "                    flag1 += dp[x][0];", "                    flag1 %= MOD;", "                    newdp[x][0] = flag0;", "                    newdp[x][1] = flag1;", "                }", "            } else {", "                int x = a[i];", "                for (int y = 1; y <= 200; ++y) {", "                    int flag = x <= y ? 1 : 0;", "                    newdp[x][flag] += dp[y][1];", "                    newdp[x][flag] %= MOD;", "                    if (y <= x) {", "                        newdp[x][flag] += dp[y][0];", "                        newdp[x][flag] %= MOD;", "                    }", "                }", "            }", "        }", "        memcpy(dp, newdp, 201 * 2 * 4);", "        memset(newdp, 0, 201 * 2 * 4);", "    }", "    int ans = 0;", "    for (int x = 1; x <= 200; ++x) {", "        ans += dp[x][1];", "        ans %= MOD;", "    }", "    cout << ans << endl;", "    return 0;", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "1067A", "pseudocode_lines": ["create 3d long long array DP with size 100005 by 205 by 2, create long long arrays sum1, sum2 with sum1 size 205, sum2 size 205", "create long long array ar with size 100005", "create long long N", "define the main function", "    read N", "    for i = 0 to N exclusive, read ar[i]", "    if ar[0] is -1", "        set sum1[0] to 0", "        for i = 1 to 200 inclusive", "            set DP[0][i][0] to 1", "            set sum1[i] to sum1[i-1] + DP[0][i][0]", "        end of the block", "    else", "        set DP[0][ar[0]][0] to 1", "        set sum1[0] to 0", "        for i = 1 to 200 inclusive, set sum1[i] to sum1[i-1] + DP[0][i][0]", "    end of the block", "    for i = 1 to N exclusive", "        if ar[i] is -1", "            for j = 1 to 200 inclusive", "                increment DP[i][j][0] by sum1[j-1]", "                set DP[i][j][0] to DP[i][j][0] % 998244353", "                increment DP[i][j][1] by DP[i-1][j][0]", "                set DP[i][j][1] to DP[i][j][1] % 998244353", "                increment DP[i][j][0] by sum2[j-1]", "                set DP[i][j][0] to DP[i][j][0] % 998244353", "            end of the block", "            for j = 1 to 200 inclusive", "                increment DP[i][j][1] by (sum2[200] - sum2[j - 1] + 998244353)", "                set DP[i][j][1] to DP[i][j][1] % 998244353", "            end of the block", "        else", "            increment DP[i][ar[i]][0] by (sum1[ar[i] - 1]) + (sum2[ar[i] - 1])", "            set DP[i][ar[i]][0] to DP[i][ar[i]][0] % 998244353", "            increment DP[i][ar[i]][1] by DP[i - 1][ar[i]][0]", "            set DP[i][ar[i]][1] to DP[i][ar[i]][1] % 998244353", "            increment DP[i][ar[i]][1] by (sum2[200] - sum2[ar[i] - 1] + 998244353)", "            set DP[i][ar[i]][1] to DP[i][ar[i]][1] % 998244353", "        end of the block", "        set sum1[0] to 0", "        set sum2[0] to 0", "        for j = 1 to 200 inclusive", "            set sum1[j] to sum1[j-1] + DP[i][j][0]", "            set sum1[j] to sum1[j] % 998244353", "            set sum2[j] to sum2[j-1] + DP[i][j][1]", "            set sum2[j] to sum2[j] % 998244353", "        end of the block", "    end of the block", "    print (sum2[200]) % 998244353 print newline", "    return 0 from function", "end of the block"], "code_lines": ["long long DP[100005][205][2], sum1[205], sum2[205];", "long long ar[100005];", "long long N;", "int main() {", "    cin >> N;", "    for (long long i = 0; i < N; i++) cin >> ar[i];", "    if (ar[0] == -1) {", "        sum1[0] = 0;", "        for (long long i = 1; i <= 200; i++) {", "            DP[0][i][0] = 1;", "            sum1[i] = sum1[i - 1] + DP[0][i][0];", "        }", "    } else {", "        DP[0][ar[0]][0] = 1;", "        sum1[0] = 0;", "        for (long long i = 1; i <= 200; i++) sum1[i] = sum1[i - 1] + DP[0][i][0];", "    }", "    for (long long i = 1; i < N; i++) {", "        if (ar[i] == -1) {", "            for (long long j = 1; j <= 200; j++) {", "                DP[i][j][0] += (sum1[j - 1]);", "                DP[i][j][0] %= 998244353;", "                DP[i][j][1] += DP[i - 1][j][0];", "                DP[i][j][1] %= 998244353;", "                DP[i][j][0] += (sum2[j - 1]);", "                DP[i][j][0] %= 998244353;", "            }", "            for (long long j = 1; j <= 200; j++) {", "                DP[i][j][1] += (sum2[200] - sum2[j - 1] + 998244353);", "                DP[i][j][1] %= 998244353;", "            }", "        } else {", "            DP[i][ar[i]][0] += (sum1[ar[i] - 1]) + (sum2[ar[i] - 1]);", "            DP[i][ar[i]][0] %= 998244353;", "            DP[i][ar[i]][1] += DP[i - 1][ar[i]][0];", "            DP[i][ar[i]][1] %= 998244353;", "            DP[i][ar[i]][1] += (sum2[200] - sum2[ar[i] - 1] + 998244353);", "            DP[i][ar[i]][1] %= 998244353;", "        }", "        sum1[0] = 0;", "        sum2[0] = 0;", "        for (long long j = 1; j <= 200; j++) {", "            sum1[j] = sum1[j - 1] + DP[i][j][0];", "            sum1[j] %= 998244353;", "            sum2[j] = sum2[j - 1] + DP[i][j][1];", "            sum2[j] %= 998244353;", "        }", "    }", "    cout << (sum2[200]) % 998244353 << endl;", "    return (0);", "}"], "testcases": [[["3", "1 -1 2"], ["1"]], [["2", "-1 -1"], ["200"]], [["3", "-1 -1 -1"], ["40000"]], [["5", "1 -1 -1 4 4"], ["206"]], [["5", "1 3 4 1 1"], ["0"]], [["7", "1 -1 -1 -1 -1 7 6"], ["5117500"]], [["5", "1 -1 -1 4 2"], ["200"]], [["8", "-1 -1 -1 59 -1 -1 -1 -1"], ["658449230"]], [["2", "38 38"], ["1"]], [["8", "12 35 58 58 39 41 41 20"], ["1"]], [["10", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"], ["420017274"]], [["4", "200 -1 -1 200"], ["1"]], [["3", "-1 200 -1"], ["399"]], [["2", "-1 35"], ["1"]], [["2", "29 49"], ["0"]], [["2", "24 -1"], ["1"]], [["37", "52 52 66 149 149 130 47 47 26 110 185 -1 73 73 65 -1 -1 130 -1 -1 -1 94 97 190 -1 -1 49 49 54 -1 92 92 5 25 48 79 79"], ["903952722"]], [["15", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 20"], ["368187329"]]]}, {"problem_id": "123A", "pseudocode_lines": ["create integer arrays num, vis with num size 30, vis size 1010", "create character arrays str, ans, with str size 1010, ans size 1010", "define the main function", "    create integers t, q, i, j, k, len, mx, mp, with mx = 0", "    create character mw", "    read str + 1", "    set len to string length of ( str + 1 )", "    for i = 1 to len inclusive", "        set t to str[i] - 'a' + 1", "        increment num[t]", "        if num[t] is greater than mx", "            set mx to num[t]", "            set mp to t", "        end of the block", "    end of the block", "    create integers cur, nf with cur = 1, nf = 0", "    for i = 2 to len inclusive", "        if vis[i] is true, break current loop iteration", "        if i * 2 is less than or equal to len", "            for j = i to len inclusive, increment j by i", "                if vis[j] is true, break current loop iteration", "                if num[mp] is less than or equal to 0", "                    set nf to 1", "                    break loop", "                end of the block", "                set ans[j] to mp - 1 + 'a'", "                decrement num[mp]", "                set vis[j] to 1", "            end of the block", "        end of the block", "        if nf is true, break loop", "    end of the block", "    for i = 1 to len inclusive", "        if vis[i] is true, break current loop iteration", "        while num[cur] is lesser than or equal to 0 and cur is lesser than or equal to 26, increment cur", "        if cur is greater than 26", "            set nf to 1", "            break loop", "        end of the block", "        set ans[i] to cur - 1 + 'a'", "        decrement num[cur]", "    end of the block", "    if nf is true", "        print \"NO\\n\"", "    else", "        print \"YES\\n\" print ans + 1 print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int num[30], vis[1010];", "char str[1010], ans[1010];", "int main() {", "    int t, q, i, j, k, len, mx = 0, mp;", "    char mw;", "    cin >> str + 1;", "    len = strlen(str + 1);", "    for (i = 1; i <= len; i++) {", "        t = str[i] - 'a' + 1;", "        num[t]++;", "        if (num[t] > mx) {", "            mx = num[t];", "            mp = t;", "        }", "    }", "    int cur = 1, nf = 0;", "    for (i = 2; i <= len; i++) {", "        if (vis[i]) continue;", "        if (i * 2 <= len) {", "            for (j = i; j <= len; j += i) {", "                if (vis[j]) continue;", "                if (num[mp] <= 0) {", "                    nf = 1;", "                    break;", "                }", "                ans[j] = mp - 1 + 'a';", "                num[mp]--;", "                vis[j] = 1;", "            }", "        }", "        if (nf) break;", "    }", "    for (i = 1; i <= len; i++) {", "        if (vis[i]) continue;", "        while (num[cur] <= 0 && cur <= 26) cur++;", "        if (cur > 26) {", "            nf = 1;", "            break;", "        }", "        ans[i] = cur - 1 + 'a';", "        num[cur]--;", "    }", "    if (nf)", "        cout << \"NO\\n\";", "    else", "        cout << \"YES\\n\" << ans + 1 << endl;", "    return 0;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["mpu = map from character to character", "vec is vector of long longs of size 1000006", "let b and a be empty integer arrays of size 1000006", "let visit be empty boolean array of size 1000006", "define the main function", "    declare string variable s", "    read s", "    n and sum are long longs with sum = 0", "    n = size of s", "    declare vector of long longs called v", "    for i = 2 to n inclusive", "        set boolean t to 0", "        for integer j = 2 to i exclusive", "            if i % j = 0", "                assign value of 1 to the t", "                stop the loop", "            end of the block", "        end of the block", "        if t = 0, push i into v", "    end of the block", "    w is an empty array of integers with size 26", "    for i = 0 to length of s exclusive", "        integer t = s[i] - 'a' casted to int", "        increase w[t]", "    end of the block", "    for integer i = 0 to length of v exclusive", "        if v[i] * 2 is greater than n, break", "        for k = v[i] to length of s inclusive incrementing by v[i]", "            if visit[k - 1] = 1, continue", "            increment sum", "            visit[k - 1] = 1", "        end of the block", "    end of the block", "    if sum = 0", "        print \"YES\\n\", s and a new line", "        return to indicate successful execution", "    end of the block", "    assign value -1 to the integer p", "    for integer i = 0 to 26 exclusive", "        if w[i] >= sum, set p to i", "    end of the block", "    if p = -1", "        print \"NO\\n\"", "        return to indicate successful execution", "    end of the block", "    print \"YES\\n\"", "    for i = 0 to n exclusive", "        if visit[i] = 1", "            s[i] = char(p) + 'a'", "            decrease w[p]", "        end of the block", "    end of the block", "    for integer i = 0 to n exclusive", "        if visit[i] = 1, continue", "        for integer j = 0 to 26 exclusive", "            if w[j] is greater than 0", "                s[i] = char(j) + 'a'", "                decrease w[j]", "                stop the loop", "            end of the block", "        end of the block", "    end of the block", "    print s and a new line", "end of the block"], "code_lines": ["map<char, char> mpu;", "vector<long long> vec[1000006];", "int b[1000006] = {}, a[1000006] = {};", "bool visit[1000006] = {};", "int main() {", "    string s;", "    cin >> s;", "    long long n, sum = 0;", "    n = s.size();", "    vector<long long> v;", "    for (int i = 2; i <= n; i++) {", "        bool t = 0;", "        for (int j = 2; j < i; j++) {", "            if (i % j == 0) {", "                t = 1;", "                break;", "            }", "        }", "        if (t == 0) { v.push_back(i); }", "    }", "    int w[26] = {};", "    for (int i = 0; i < s.size(); i++) {", "        int t = int(s[i] - 'a');", "        w[t]++;", "    }", "    for (int i = 0; i < v.size(); i++) {", "        if (v[i] * 2 > n) break;", "        for (int k = v[i]; k <= s.size(); k += v[i]) {", "            if (visit[k - 1] == 1) continue;", "            sum++;", "            visit[k - 1] = 1;", "        }", "    }", "    if (sum == 0) {", "        cout << \"YES\\n\" << s << endl;", "        return 0;", "    }", "    int p = -1;", "    for (int i = 0; i < 26; i++) {", "        if (w[i] >= sum) { p = i; }", "    }", "    if (p == -1) {", "        cout << \"NO\\n\";", "        return 0;", "    }", "    cout << \"YES\\n\";", "    for (int i = 0; i < n; i++) {", "        if (visit[i] == 1) {", "            s[i] = char(p) + 'a';", "            w[p]--;", "        }", "    }", "    for (int i = 0; i < n; i++) {", "        if (visit[i] == 1) continue;", "        for (int j = 0; j < 26; j++) {", "            if (w[j] > 0) {", "                s[i] = char(j) + 'a';", "                w[j]--;", "                break;", "            }", "        }", "    }", "    cout << s << endl;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["let pal be an array of characters of size 1100", "declare array of integers qtd with size 1100", "declare array of integers d with size 1100", "primo is a boolean function with integer argument n", "    return 0 if n = 1", "    for i = 2 while i squared <= n", "        return 0 if n % i = 0", "    end of the block", "    return 1", "end of the block", "res = array of characters of length 1100", "define the main function", "    declare integer called i", "    declare string called a", "    read a", "    declare integer variable called n = length of s", "    for i = 0 to length of a exclusive increment qtd[a[i]]", "    declare integer called dois = 0", "    for i = 2 to length of a casted to integer inclusive", "        if primo(i) && i * 2 is greater than n", "            d[i] = 0", "        else", "            d[i] = 1", "            increase dois by one", "        end of the block", "    end of the block", "    assign value 0 to character l", "    for i = 'a' to 'z' inclusive", "        if qtd[i] >= dois", "            set l to i", "            decrease qtd[i] by dois", "            break the loop", "        end of the block", "    end of the block", "    declare integer called j = 'a'", "    if l != 0", "        print \"YES\" and a new line", "        for i = 1 to n inclusive", "            if d[i] = 1", "                print l", "            else", "                increment j while qtd[j] = 0", "                decrease qtd[j] by one", "                print j casted to char", "            end of the block", "        end of the block", "        print new line", "    else", "        print \"NO\" and a new line", "    end of the block", "end of the block"], "code_lines": ["char pal[1100];", "int qtd[1100];", "bool d[1100];", "bool primo(int n) {", "    if (n == 1) return 0;", "    for (int i = 2; i * i <= n; i++) {", "        if (n % i == 0) return 0;", "    }", "    return 1;", "}", "char res[1100];", "int main() {", "    int i;", "    string a;", "    cin >> a;", "    int n = (int)a.size();", "    for (i = 0; i < (int)a.size(); i++) { qtd[(int)a[i]]++; }", "    int dois = 0;", "    for (i = 2; i <= (int)a.size(); i++) {", "        if (primo(i) && i * 2 > n) {", "            d[i] = 0;", "        } else {", "            d[i] = 1;", "            dois++;", "        }", "    }", "    char l = 0;", "    for (i = 'a'; i <= 'z'; i++) {", "        if (qtd[i] >= dois) {", "            l = i;", "            qtd[i] -= dois;", "            break;", "        }", "    }", "    int j = 'a';", "    if (l != 0) {", "        cout << \"YES\" << endl;", "        for (i = 1; i <= n; i++) {", "            if (d[i] == 1) {", "                cout << l;", "            } else {", "                while (qtd[j] == 0) { j++; }", "                qtd[j]--;", "                cout << (char)j;", "            }", "        }", "        cout << endl;", "    } else {", "        cout << \"NO\" << endl;", "    }", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["create constant integer MAXN with value 1001", "declare integer called n", "let s be an array of characters of length MAXN", "c is an array of integers with size 256 filled with 0", "f is an array of booleans with size MAXN", "define the main function", "    read input to s", "    assign length of s to n", "    memset with arguments c, sizeof(c) and 0", "    for i = 0 to n exclusive incremen c[s[i]]", "    k is integer = 0", "    for i = 0 to 256 exclusive", "        if c[i] is greater than c[k] set k to i", "    memset with arguments f, true and sizeof(f)", "    for integer i = 2 to i * i <= n", "        if f[i] is true", "            for integer j = i * i to n inclusive with step of i, set f[j] to false", "    set value of f[1] to true", "    for integer i = 2 to i + i <= n, set f[j] to false", "    for i = 1 to n inclusive", "        if f[i] is false", "            if c[k] = 0", "                print \"NO\" and a new line", "                return to indicate successful execution", "            end of the block", "            decrease c[s[i - 1] = k] by one", "        end of the block", "    assign value of 0 to k", "    for integer i = 1 to n inclusive", "        if f[i] is true", "            increment k while c[k] = 0", "            decrease c[s[i - 1] = k] by one", "        end of the block", "    print \"YES\" and a new line", "    print s and a new line", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 1001;", "int n;", "char s[MAXN];", "int c[256] = {0};", "bool f[MAXN];", "int main() {", "    gets(s);", "    n = strlen(s);", "    memset(c, sizeof(c), 0);", "    for (int i = 0; i < n; i++) c[s[i]]++;", "    int k = 0;", "    for (int i = 0; i < 256; i++)", "        if (c[i] > c[k]) k = i;", "    memset(f, true, sizeof(f));", "    for (int i = 2; i * i <= n; i++)", "        if (f[i])", "            for (int j = i * i; j <= n; j += i) f[j] = false;", "    f[1] = true;", "    for (int i = 2; i + i <= n; i++) f[i] = false;", "    for (int i = 1; i <= n; i++)", "        if (!f[i]) {", "            if (c[k] == 0) {", "                cout << \"NO\" << endl;", "                return 0;", "            }", "            c[s[i - 1] = k]--;", "        }", "    k = 0;", "    for (int i = 1; i <= n; i++)", "        if (f[i]) {", "            while (c[k] == 0) k++;", "            c[s[i - 1] = k]--;", "        }", "    cout << \"YES\" << endl;", "    cout << s << endl;", "    return 0;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["num is an integer array with 30 elements and vis is an integer array with 1010 elements", "str and ans are character arrays with size 1010", "define the main function", "    declare integer variables t, q, i, j, k, len, t1 and mx, with mx = 0", "    read str + 1", "    len = length of (str + 1)", "    for i = 1 to len inclusive", "        t = str[i] - 'a' + 1", "        increase num[t] by one", "        if num[t] is greater than num[mx] set mx to t", "    end of the block", "    let cur = 1 and nf = 0 be integers", "    for i = 2 to len inclusive", "        continue the loop if vis[i] is not 0", "        if i * 2 <= len", "            for j = i to len inclusive incrementing j by i", "                continue if vis[j] is not 0", "                if num[mx] <= 0", "                    assign value of 1 to nf", "                    stop the loop", "                end of the block", "                ans[j] = mx - 1 + 'a'", "                decrease num[mx]", "                set vis[j] to 1", "            end of the block", "        end of the block", "        if nf is not 0, break", "    end of the block", "    for i = 1 to len while - <= len and !nf", "        continue if vis[i] is not 0", "        while num[cur] <= 0 && cur <= 26 increment cur", "        if cur is greater than 26", "            assign value of 1 to nf", "            stop the loop", "        end of the block", "        ans[i] = cur - 1 + 'a'", "        decrease num[cur] by one", "    end of the block", "    if nf is not 0", "        print \"NO\\n\"", "    else", "        print \"YES\\n\", ans + 1 and a new line", "    return to indicate successful execution", "end of the block"], "code_lines": ["int num[30], vis[1010];", "char str[1010], ans[1010];", "int main() {", "    int t, q, i, j, k, len, t1, mx = 0;", "    cin >> str + 1;", "    len = strlen(str + 1);", "    for (i = 1; i <= len; i++) {", "        t = str[i] - 'a' + 1;", "        num[t]++;", "        if (num[t] > num[mx]) mx = t;", "    }", "    int cur = 1, nf = 0;", "    for (i = 2; i <= len; i++) {", "        if (vis[i]) continue;", "        if (i * 2 <= len) {", "            for (j = i; j <= len; j += i) {", "                if (vis[j]) continue;", "                if (num[mx] <= 0) {", "                    nf = 1;", "                    break;", "                }", "                ans[j] = mx - 1 + 'a';", "                num[mx]--;", "                vis[j] = 1;", "            }", "        }", "        if (nf) break;", "    }", "    for (i = 1; i <= len && !nf; i++) {", "        if (vis[i]) continue;", "        while (num[cur] <= 0 && cur <= 26) cur++;", "        if (cur > 26) {", "            nf = 1;", "            break;", "        }", "        ans[i] = cur - 1 + 'a';", "        num[cur]--;", "    }", "    if (nf)", "        cout << \"NO\\n\";", "    else", "        cout << \"YES\\n\" << ans + 1 << endl;", "    return 0;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["create constant integer MAXN with MAXN = 1001", "create integer n", "create character array s with size MAXN", "create integer array c with size 256", "declare boolean array f with size MAXN", "define the main function", "    read string into s", "    set n to string length of s", "    for i = 0 to n exclusive, increment c[s[i]]", "    create integer k with k = 0", "    for i = 0 to 256 exclusive", "        if c[i] is greater than c[k], set k to i", "    set bytes from f to size of f to true", "    for i = 2 to i * i is less than or equal to n, incrementing i", "        if f[i] is true", "            for j = i * i to n inclusive, incrementing j by i, set f[j] to false", "    set f[1] to true", "    for i = 2 to i + i is less than or equal to n, incrementing i, set f[i] to false", "    for i = 1 to n inclusive", "        if not f[i]", "            if c[k] is 0", "                print \"NO\"", "                return to indicate successful execution", "            end of the block", "            decrement c[set s[i-1] to k]", "        end of the block", "    set k to 0", "    for i = 1 to n inclusive", "        if f[i] is true", "            while c[k] is 0, increment k", "            decrement c[set s[i-1] to k]", "        end of the block", "    print \"YES\"", "    print s", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int MAXN = 1001;", "int n;", "char s[MAXN];", "int c[256];", "bool f[MAXN];", "int main() {", "    gets(s);", "    n = strlen(s);", "    for (int i = 0; i < n; ++i) c[s[i]]++;", "    int k = 0;", "    for (int i = 0; i < 256; ++i)", "        if (c[i] > c[k]) k = i;", "    memset(f, true, sizeof(f));", "    for (int i = 2; i * i <= n; i++)", "        if (f[i])", "            for (int j = i * i; j <= n; j += i) f[j] = false;", "    f[1] = true;", "    for (int i = 2; i + i <= n; i++) f[i] = false;", "    for (int i = (1); i <= (n); ++i)", "        if (!f[i]) {", "            if (c[k] == 0) {", "                puts(\"NO\");", "                return 0;", "            }", "            c[s[i - 1] = k]--;", "        }", "    k = 0;", "    for (int i = (1); i <= (n); ++i)", "        if (f[i]) {", "            while (c[k] == 0) k++;", "            c[s[i - 1] = k]--;", "        }", "    puts(\"YES\");", "    puts(s);", "    return 0;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["declare prime with integer x as argument, returning integer", "    for i = 2 to x exclusive", "        if x % i is 0, return false from function", "    end of the block", "    return true from function", "end of the block", "define the main function", "    create string s", "    read s", "    create integer comp with comp = length of s - 1", "    for i = 2 to length of s inclusive", "        if 2 * i is greater than length of s and result of run prime with i as argument, decrement comp", "    end of the block", "    create integer vector letters initialized with 26, 0", "    for i = 0 to length of s exclusive, increment letter[s[i] - 'a' ]", "    create boolean ok with ok = false", "    create integer let", "    for i = 0 to 26 exclusive", "        if letters[i] is greater than or equal to comp", "            set let to i, set ok to true", "            break loop", "        end of the block", "    end of the block", "    create integer cur with cur = 0", "    if not ok", "        print \"NO\\n\"", "        return to indicate successful execution", "    end of the block", "    decrement letters[let] by comp", "    print \"YES\\n\"", "    create string t with t = \"\"", "    for i = 1 to length of s inclusive", "        if i is 1 or ( 2 * i is greater than length of s and result of run prime with i as argument )", "            while letters[cur] is 0, increment cur", "            increment to by character casted ( 'a' + cur )", "            decrement letters[cur]", "        else", "            increment t by character casted ( 'a' + let )", "        end of the block", "    end of the block", "    print t print newline", "    return to indicate successful execution", "end of the block"], "code_lines": ["int prime(int x) {", "    for (int i = 2; i < x; i++) {", "        if (x % i == 0) return false;", "    }", "    return true;", "}", "int main() {", "    string s;", "    cin >> s;", "    int comp = s.length() - 1;", "    for (int i = 2; i <= s.length(); i++) {", "        if (2 * i > s.length() && prime(i)) comp--;", "    }", "    vector<int> letters(26, 0);", "    for (size_t i = 0; i < s.length(); i++) { ++letters[s[i] - 'a']; }", "    bool ok = false;", "    int let;", "    for (int i = 0; i < 26; i++) {", "        if (letters[i] >= comp) {", "            let = i, ok = true;", "            break;", "        }", "    }", "    int cur = 0;", "    if (!ok) {", "        cout << \"NO\\n\";", "        return 0;", "    }", "    letters[let] -= comp;", "    cout << \"YES\\n\";", "    string t = \"\";", "    for (int i = 1; i <= s.length(); i++) {", "        if (i == 1 || (2 * i > s.length() && prime(i))) {", "            while (letters[cur] == 0) cur++;", "            t += (char)('a' + cur);", "            --letters[cur];", "        } else {", "            t += (char)('a' + let);", "        }", "    }", "    cout << t << endl;", "    return 0;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "123A", "pseudocode_lines": ["define the main function", "    create string a", "    read a", "    create integer n with n = integer casted size of a", "    if n is less than or equal to 3", "        print \"YES\" print '\\n'", "        print a print '\\n'", "        return to indicate successful execution", "    end of the block", "    create integer vector f initialized with 26", "    for i = 0 to n exclusive, increment f[a[i] - 'a']", "    create character vector ans initialized with n + 1", "    create boolean vector flags initialized with n + 1", "    for i = 2 to n inclusive, incrementing i by 2, set flags[i] to true", "    for i = 3 to n inclusive", "        if not flags[i] and i * 2 is less than or equal to n", "            for j = i to n inclusive, incrementing j by i, set flags[j] to true", "        end of the block", "    end of the block", "    create integer cont with cont = 0", "    for i = 1 to n inclusive, increment cont by flags[i]", "    create integers most, pos with most = -1, pos = -1", "    for i = 0 to 26 exclusive", "        if f[i] is greater than most", "            set most to f[i]", "            set pos to i", "        end of the block", "    if most is less than cont", "        print \"NO\" print '\\n'", "        return to indicate successful execution", "    end of the block", "    decrement f[pos] by cont", "    for i = 1 to n inclusive", "        if flags[i] is true, set ans[i] to character casted ( pos + 'a' )", "    for i = 1 to n inclusive", "        if flags[i] is false", "            for j = 0 to 26 exclusive", "                if f[j] is greater than 0", "                    decrement f[j]", "                    set ans[i] to character casted ( j + 'a' )", "                    set flags[i] to true", "                    break loop", "                end of the block", "            end of the block", "        end of the block", "    end of the block", "    for i = 1 to n inclusive", "        if flags[i] is false", "            print \"NO\" print '\\n'", "            return to indicate successful execution", "        end of the block", "    end of the block", "    print \"YES\" print '\\n'", "    for i = 1 to n inclusive, print ans[i]", "    print '\\n'", "    return to indicate successful execution", "end of the block"], "code_lines": ["int main() {", "    string a;", "    cin >> a;", "    int n = (int)a.size();", "    if (n <= 3) {", "        cout << \"YES\" << '\\n';", "        cout << a << '\\n';", "        return 0;", "    }", "    vector<int> f(26);", "    for (int i = 0; i < n; i++) f[a[i] - 'a']++;", "    vector<char> ans(n + 1);", "    vector<bool> flags(n + 1);", "    for (int i = 2; i <= n; i += 2) flags[i] = true;", "    for (int i = 3; i <= n; i++) {", "        if (!flags[i] && i * 2 <= n) {", "            for (int j = i; j <= n; j += i) flags[j] = true;", "        }", "    }", "    int cont = 0;", "    for (int i = 1; i <= n; i++) cont += flags[i];", "    int most = -1, pos = -1;", "    for (int i = 0; i < 26; i++)", "        if (f[i] > most) {", "            most = f[i];", "            pos = i;", "        }", "    if (most < cont) {", "        cout << \"NO\" << '\\n';", "        return 0;", "    }", "    f[pos] -= cont;", "    for (int i = 1; i <= n; i++)", "        if (flags[i]) ans[i] = (char)(pos + 'a');", "    for (int i = 1; i <= n; i++) {", "        if (!flags[i]) {", "            for (int j = 0; j < 26; j++) {", "                if (f[j] > 0) {", "                    f[j]--;", "                    ans[i] = (char)(j + 'a');", "                    flags[i] = true;", "                    break;", "                }", "            }", "        }", "    }", "    for (int i = 1; i <= n; i++) {", "        if (!flags[i]) {", "            cout << \"NO\" << '\\n';", "            return 0;", "        }", "    }", "    cout << \"YES\" << '\\n';", "    for (int i = 1; i <= n; i++) cout << ans[i];", "    cout << '\\n';", "    return 0;", "}"], "testcases": [[["abc"], ["YES", "abc"]], [["abcd"], ["NO"]], [["xxxyxxx"], ["YES", "xxxxxxy"]], [["xxxjddyxduquybxdxx"], ["NO"]], [["jjjjjjjjjjzjjjjjjjjjjjjjjjj"], ["YES", "jjjjjjjjjjjjjjjjjjjjjjzjjjj"]], [["mggnngggnjgnggggngnggpnggumggpg"], ["NO"]], [["hfihihhfh"], ["NO"]], [["ppppppopppionpppppppppwppppppppppppppppppppppb"], ["YES", "bpppppppppppppppppppppppppppipnpppppopppopwppp"]], [["jntnnnnnnngnnnnntnnennannnnnnnnnnnnnnnnjnnnnngnnnnannnnnnnnnq"], ["NO"]], [["dattqddidyddddmriftkdddddddddqvedwddfdrdiaddiokdddodyqqddddtdddvdddaodd"], ["NO"]], [["qqqqqqqqqqqqqqqqqqqqzqqqzqqqqqqqqqqqqqzqqqqqqqqcqqzqqqqqzqqqqqqqqqqqq"], ["YES", "cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqzqqqqqzqzqqqqqzqq"]], [["danmwkmkcekwkkekwugcqwfrkrkqowkakqinzkzksisekhmqtykkuhugknygvkkrhdhnuuf"], ["NO"]], [["jjjjjjjjjjjjjjjjjjjnjjjjjjjujjjjjjjjjjjjjjjjjjjjmpjjjjjjjjjjpjmjmpjjjjpjujjjjjjjjpjjjjjjujjjjjjnjjjjjjj"], ["YES", "mjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjmjjjjjmjnjjjjjnjjjpjpjjjjjpjjjpjjjjjpjjjjjjjujjjuju"]], [["qqqqqqqqqqsqqqqqqqqqqqqgpqqqqqqqbqqqqqqqqqqqqqqqqqqqqpqqqbqqqqqqqqqqqqqqqqqwqqqqsqqzqzqoqqqqqqqqqqwqqpqqqpq"], ["NO"]], [["uupwbpqnpwpcpppewppdsppiplpppwidplpnqblppppppwsxpplxpxlppikpewxppnlbkpppqecbpeppqupsepppqpneqnpexpbqcpqpccnple"], ["NO"]], [["nnnnnnnnnnnnjonnnnnnnnnnnnnnnnnnnnnnnndnnnnnnnnnnnnnnjnnnnnnnnnnnnnnnnndfnnnnnnnnnnnnnnnnnnnnn"], ["YES", "dnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnndnnnnnfnjnnnnnjnnnnnnnnnnnnnnnnnnnnnonnnnn"]], [["ssjjvshvssjdjnsdhvsjneehnnsshlldhjshdvsssshvsndsvsshlssvssvveslhllssshesssjsvvlsesssnselhjlljldlvnnshvsedllsennnnjssnsnsdsv"], ["NO"]], [["cccccccccccxccgccccccccccgccciccccicccgccccccccccccccccxcccccccccccycccccccccctcccccccccccccccccccctccccaicccccgccccccccccccccccccccccaicccccccc"], ["YES", "acccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccacccccgcccgcccccgcccccccgccciciccciciccctccccccccccccctcccxcccccxcyccccc"]], [["httttfttttttttttthttttttttttthtttttutttttttttttsjttttttttutttttajdttttttytttttuttttttattttttttttttttttttttttdttttttttttttttttttttttttttattttttsttttttfttttttt"], ["NO"]], [["wwwiuwujwijwwwwwwwwwwdwwwwhwwwwwiwwwwwwwwwuwwwhwwwjwwwwwwhwwwwwwwwniwwiwwwwwwwwwwwwwjwwwwwwwhwwwuhwwojwwwwjwwuwwwwwwwwwwiwwwwnwdwjwwwwwwwnwwwwh"], ["NO"]], [["kkkkkkokkkkkkokkkkkokkkkkkkxkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkjkkkkekokkkkkkkkkkkkxkkkkokkkkkkkkkkkkkkkkkokkkkkkkkkbkkkkkkekkkxkkkkkkkkkkkkkkjkkkkkkkkkkkkkxkkkkkkkkkkkkkkkkkkkkkkkekkkkk"], ["YES", "bkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkekkkekekkkjkjkkkkkkkkkkkkkkkkkkkkkokkkkkokokkkkkkkkkokokkkkkokkkkkxkkkxkkkkkxkkkkkxkx"]], [["ouscouyvvoooocvokcuoovoooyorjyocosackfocooaoosaucooaojhacoooooorsruocorokufcvyjokoooproaroocjooyrkoorojsocfooskxujoxxpokoopyookooysofooovuoroxraofokupcpjrcokoxucskovoaokoocyoyoovfrovouoocvsc"], ["NO"]], [["ssssssssssssssssupsssssssqsssssssssssssssssssssssssssssssssssssassssssssssssssssssssssacssshsssssssscssssssssssspsssssslsgssssssslssssssdsasssessssssssssscssssbsszssssssssssssssssssossstsssssssssssssshs"], ["YES", "asssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssasssasbssscssssssssssssscssscsssssdsesssssssssgshssssshssssslssslsssssossssspspsssssssssqstsssuszsss"]], [["uuuuuuuuuuuuouuuuuuuuuuuuuuuuuuuuuuuucuuuuuuuuuuuuuuuuyuuuuuwuuuduuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuuwuuuuquuuuuuuuuuuuuuuuuuuuuuuujumuuuuuutuuuuuuuhuuuuuuuauecuduuuuuuuuuuuuuuuuujusuuiuuuuuuuuuumuuyujuu"], ["NO"]], [["hlchxdgrkdxglihydlyqdgxggvdhdgrgigkugrqhhgpgxhyhgkcgyqildrpcvdlpggikrxggculgyudrrgvkycvgklldxkgggxlxvqgrgygpigcudhidgcigyqqhyxkgdxixglpgdxuxhlyxkidglriglkvgyckqrqvguclryvpyvdggluggcgkillcghdxkrhdglgcxgxicrkgkpugvkhliqyii"], ["NO"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhuhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhuhhhhhhhhhhhhhhhjhhhhhhhhhhhhhhhhjhhhhhhhuhhuhhhhhhhhhhhhhhhhjhhhhhhhuhhhhuhhhhhhhhhhhhhjhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhjhhhhhjhhhhhjhjhhhhhhhhhjhjhhhjhuhhhhhhhhhhhuhhhhhhhhhhhuhhhuhuhhhuhh"]], [["hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"], ["YES", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"]], [["uuuruuuuuuuuuuuuuuuuuuuuuuuiuuuuuuuuuuuuigzuuuuuuuuuuuguuuuuuouuuuuuuuuuuuuuuuuuuuuguuuuuuuzuueuuuuuuuuuuuuuufuuaouuuxuuuuutuuuuuuuuuuuuuuuuuuuuuuuuuuuulluuuutuuduuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupuruuouuuuuuuuuuuuuuuuuuuuqauu"], ["YES", "auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuduuuuueufuuuuuuuuuguguuuuuguuuuuiuuuiuuuuujuuuuululuuuuuuuuuououuuoupuuuuuuuuuuuquuuuuuuuuuuruuurutuuutuuuuuxuzuuuuuuuuuz"]], [["kkkmkkkkkkkymkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdekkkkkkkkkkhrkkkkkkkkkkkkkkkkkkkkkxkkkkkokkkkikkkkkkkkkkkkkkkkkkkkkkkkkkkkkxkkfkkkkkkkkkkkkmkkkktykkkkkkkkkkkrkkkkkkrbekkkkkkkkkkkkkkkkkkfkskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkykkkkkkkkkkkkkkzykkkkkkkkkkkmbkkkkkkkkk"], ["NO"]], [["rrrvjurvrrsukrsrvxskrrrrbrapyrmrmvprmrseuakrmrnvokshwoawhnrbrrvrynwrynrxurrmprmmsryvkvronrmrprsrsrrrrrvwrarfrrrusrsvemwrevrarbwrmrrkhrryrhxornrorrrrrraphrvvhrrkrrfrprvorkkrsurpwvrkexpavbpnksafrrebxxyhsyrsywrrrrraryprunaxkbvrauokrrwrkpwwpwrrhakrxjrrxerefrrnxkwabrpbrrwmr"], ["NO"]], [["mmmmqmmmmmmmmmmmmmmlmmmmmmmmammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmtmmmmmmmmmmimmmmmmmmmmmmmmmmmmammmmimmmmmmmmhmimmmomlmmmmmammmmmmmmmmmmmmmmmmimmmmlmmmmmmmimmmhmmmmmmmmmmmmmmmmmmmlmmmmmmmmmmmmmmhmmmmmmmmmmmmmmmtmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmotmmmmlmmmmmmmmmqmmmmmmmmmmmmmmmmmm"], ["YES", "ammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmamammmmmmmmmhmhmmmmmhmmmmmimmmimmmmmimmmmmimimmmmmmmmmlmlmmmlmlmmmmmmmmmmmlmmmmmmmmmmmmmmmmmmmmmmmmmmmomommmmmmmmmqmmmmmqmmmmmtmmmmmtmtm"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmymmm"]], [["zzzzzzzzzzzzzzrzzzzbmzzzezzzzzzgzzzzzzzzzzhzzzzgzzzxzzzznzzzzzyzzzzzzzzzzzxzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzuzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzhzzzzzyzzzzzzzzzmzzfzbzzuzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzyzzzzzzzzbzhzzzzzzzzzrzzzzzzyzzzzzzzzzzzzzzzzzzzzajzzzzz"], ["YES", "azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzbzbzzzzzbzzzzzezzzfzzzzzgzzzzzgzhzzzzzzzzzhzhzzzizjzzzzzzzzzzzmzzzzzzzzzzzmzzzmznzzzozzzzzrzrzzzzzzzzzuzzzzzuzzzzzxzzzzzxzyzzzzzyzzzyzyzz"]], [["bbbbbbbbbcbbbbbbqbbbbbkbbbbbbbbbbbbbvbsbbbbbebbbbbbbbbbbbbbbbbbbbbbbcbbbkbvbbbbbbubbbbbbbfbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbekkbbbbbbbbbbbbbbbbfbqbbbbbbbbbfbbebbbbbbbbbbbbbbbbbbbbbbbbbeebbbbbbbbbbbbbbbeubbbbbbbbbbbqbbbbbbbbbbbbbbbbbbbbbbbbbbfbbbbbbbbbbbbbbbbkbebbbbbbbbbbbbuvbbbbbfbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbb"], ["NO"]], [["wtwwttwttwwwwwwwwtwtwwwwwtwwtwwtwwwwwtwtwtwtwwtwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwtwwwwwtwttwwwwtwwwwwwwwwwwwwwwwwtwwwwtwwwwwwwwwwwwwttwtwwwwwtwwtwwwwwwwtwwttttwwwwwwwwwwwwwwwwwwwtwwwttwtwwtwwtwwtwwwwtwwtwtwwtwwwwwwwwwwtwwww"], ["NO"]], [["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"], ["YES", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"]], [["koadaaaaarnaavmmavimdolavaaovkaaabalaavabaolarkewawaavaaaaiaaalaaeaaenaobaamaaikaiaabaavaeenlaaaaaadaoaaaaaaaiekaebavvwaaabiobaadavaiaaviaaaadaaaamarakmaaakaeavwlaaeanaaanaaaaaakllovwnenvlakaiomaaaaaaamaainebaeakaaaaaalraiaallaannammaaamaaaaeeaaiawaabvaaealaermaobaavreaaaaakavrvdaawaraedaaaaawiaeoaaaadaaaaavvadaaaoaaeewokbaaaeaaamaabdaaama"], ["NO"]], [["oooooooocooocooooooooooooooooooooooooofoooooooooooooovoooozoooooooooqoooooooooooooooooooooooooooooooooxooovoooooooocoooooxooobooczoooooooooqooooooooooooooooocooooeooooooxoooooooooooooooooozooooooooooooooooooxoopooooocooobooooooooooooooooloooooooooooooooooooobooooelooooooooooooooooooooooooxooiooooooooooopooboooooooooooooooooooooolooooooooooooooooooooo"], ["YES", "booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooobobooooooooobocooococooooooooooocooooooooooocooocoeoooeooooofoiooooooooolooooolooooolooooopopoooooqoooqovooooooooovoooooooooooooxoooxoxoooxoooooooooooooxooooozooooooooozozooo"]], [["bbbbbbzbbbbbbbbbbgbbbbbbbbbbbpbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbmbbbbbbbobbbbbbbwubbbrbbbbbbbbbbbbbbbubbbbbbbqobbbbdbbbbbbbbbbrbbbbbbbbbbbbbbbbbbbbbbbbbbbxbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbobbbbbbbbbibbbbbbbbbbgbbbbebbybbbbbbbbbbbbbbbabbbbbbbbbybiybbbbdbbbgbebbbbbkbbbbbbnbbbbbbbbbbbbbbbbbbbbbbbsbbbbbbbbbbbbbbbtbbbbbbbbbpbbb"], ["NO"]], [["llvlluelllllllllzllnndluelllhdunlnlllllhnbhldllelllllhllleulunvlldlllllbepellpzulbulllelllvblllulllllllllezpllhldellzldlllllllelllhlllehllvevlnullllvllllpudldlllvdbllllhnvlllllvllvllvlllplelzplpzllllulzlbllzldevlullelllhhzdeulllllllllnlzvllllllbllvllllllllluellnlllulnllllbdlevlhlvllllpenblvzlzlllblvhllllhllllpeblevelpllllnpbhlhllbllllndllblldvn"], ["NO"]], [["zzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"], ["YES", "ozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzozozzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], [["lsllllmllllslllxlvlxluyylllslllmlllvllxllslllvlslyulllullllllmlxulllyxlllmlllllvullllllslllsmlllxmllvvlslllllllllllulllvlllllllmllllsylylvluylllmullslllllvylmmlluyllvlylllllllllllvllllsmlxlslmlllxxslllmyluvylylllllxmxlulsslslmllulxllmllxuusllllumlllllmsssmxullllmsllllmlxxllmllllylvllmlluymxlllllslyxllvlllllllllllllllsllullmlllllslllsllullslllllllllllvyllllvlllylllsllvlvsmlvllllllulullllllslxlml"], ["NO"]], [["cccjcchccccccjcccccccjlccccccccccccchccccwccctccccccccccccccccczccccccccccccccccccccccccccccccccccccccnwcccccccccccccccccccoccwcccccccccccwccccccccccccccncdccccbcctcccccccccccccccccccccccxccccccvcccnccccbccccccccccccccccccccccclccccccccczccvccccccvscccccccccxccccocccccccscccccccccccccxvccccccccccccccccccccccccccccccccccccccccccccccxccccccccccccwccccccchccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"], ["YES", "bcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbcccccccccccdccchchccchcccccjcjcccccccccjccccclccccclcccccncncccccncccococccccccccscccccccccccccsccctctcccvcccccccccccccvcccccvcccccccccvcwcccwcccccwcccccccwcccccwcccccxcccxcccccxcccccccxccczccccccczccccc"]], [["uuuuuuuuuuuuuuuuuuuuuuuuuuquuuuulquuuuuuuouuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuxouuuuuxuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuruuuuuuxuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuuuuuuuuuupuuuuuuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuurluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuruuuuuuouuuquuuluuuuuuuuupuuouuuuuuuuuuzuuuuuuuokuuluuuupuuukuuuuuruuuuuuupuuuuuuuuuuuuzuouuuuuuuuuuuuuuuz"], ["NO"]], [["vkxvxkxvxxxkkvkxvkkxvvvvvvvvkkvkkxvvkkvkkvkkvxxvxvvvvkvkvvxvvxvxvvvkvxkkxkxxkxxkxvxvvxvkvvxvkvkvkxkxvxkvvkvxkxkvkxvxvxxxxxvxxvxxxkkvvvvkkvvvxxkxkvvkxvvxkkkvkvvkvvvvxxxkxxxvvvkxkxvkvxxkxkxkxkvvxxkkkkvxxkvkkxvxvxxvxxxxvvkvxkxkxvkkvxxvxkvvkxkkvxvkkkkkkxkxkvxkkkxxxxxxxvxkxkkvxkkxvkvkkvkkkxvkvkvkvvxkkkxxvxxxxxvkvvxkvvvxvxvkkvvvxkvkxkvxxkvvkxvvxkxxkxkkkvxkxxvkkkxxkxxxvxkxkkkvkkxxxvvkkvvkvkkkxkvxkxxxvkvxvxxkvkxkvkxvxvvxvxxkkkxxkkkkvvvv"], ["NO"]], [["gggggggggggqggggggggnqggggggepgggeggggpggqeggggegggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghggqghgggggggggggggggggggggggqgqggggghgggnnggggggggggggggggqgggggpgggggggggggnggggpggggggggggggggggggggggggggggggggqgggqggggggggggeegggggggggggggggggggggngggggghqggggggggggggggggggggggggggggggepggggggggghgggggggggggggggggggggggggghggggggghgggnhgggggggggpggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"], ["YES", "egggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggegggegegggegggggegeggggggggggggggghggggghggggghghggggghggghghggggggggghgggggggggggggngggngngggngggggggggggggngggggngggggggggpgpgggpgggggpgggggggpgggggpgggggpgggqgggggqgggggggqgggqgggggggqgggggggggqgqgggggggggqgqgggggqggg"]], [["pynyyyyypyyyfyyyyyyyvoyyyyvyyyldyyyyyhyyvyyyyyyyyyyyyoyyppyyyyyyywyyysyyyyayyyayyyyyyyoyyyydyyyyyavyyygiyyhfyyyyyyyyyyzyyyysyyyyicyyyyyyycjyyhykyiyykkyylyyyyiyyyyyyyyifyyyyyyyzyyyyyiyyryykyyyhzyydryyyysyyyyyyyyyyyyyaybyyyoyyyykyyyyyyyyyyncyyyyvryyjyyyyqyyfbyyysyyqypyydyyyyyyyyyyyqyywjyyyyyayyyyyyyyyjyyyyyyyyyyyyaygyyypyyyyyayyyyyyyoyyyyiyyyyyiyyyyyjoyykyyyyyyyyyyyyyyyyyyyyyohyyyyvyykyybiyyyyyyyyyyyyyyyyyyyyyyyfyyyyyyyyyyyyyyyyvyyyyyyy"], ["NO"]], [["bbbbbbbbbbbbzqbbbbibbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbbbbbbjbbbbbbbbbbbbbbgbbbbbbbbbbzebbbbbvbbbbbbbbbbbbbbbbbbbbbbbbtbbbtbvbebbbbzvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbibbbbbbqbqjbbpbbzbbbbbbbbbbbbbbbbbbbbbbbbbbbebbbbzbbcbbbbbbbqbbbvbbbbbbbbbbbbbbbbbbbbpbbbbbbbbbbbgbbbbzbbbbbbbbbbbbjbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbebqbbbbjbbbbbbbbbbbbbbbbbbbbbbbbtbbbbbbbbbbbbbbbbbbbbbbbbbbbbqbbbbbbbbbbbbbbbibbbbbbbbbbbbbbbbbzb"], ["YES", "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbcbbbbbebebbbbbbbbbebbbbbebbbbbgbbbbbgbibbbbbibbbibibbbbbbbbbjbbbbbbbbbbbbbjbbbjbjbbbpbbbbbbbbbbbbbpbbbbbqbbbbbbbbbqbqbbbqbbbbbqbbbbbbbqbbbbbtbbbbbtbbbtbbbbbvbbbbbbbvbbbvbbbbbbbvbbbbbbbbbzbzbbbbbbbbbzbzbbbbbzbbbzbbbbbzbbbbb"]], [["tsssshssusssssssssssusssspssssssssssssssssssssssssssssssvsssssssssssssssossssvssssssssssysssssscsssssssussfsssssssszssssssssfssssssssssssssssssssssswssssssssdsssssssssssussssssessmssssssssssjsssssvsssssssssssssssssssssssssssssssssssssssssssssssstssssssssrsssssshssssssssssssssssssssssssssssusssssssssssssssssssssssssssssssessscssrssssssessssssslwwsssssssssssusssscsssssssssssssswssssssssssssssessssstssssssstsshsssssssssssssssssssssisssssssssssssssssssssssosssssswsss"], ["NO"]], [["fkfffffffvfkfoffffqoqqffaftftvfuffjffffffffoflftvfffgffffffzfrvfocfmfkmjfftfmfwafzfffajsfffalguvjdfftfndfcnfjfgfffoofoflnffffffofdiczffajffdifrffffffrffffnifofffifdffvgffvoffwbfkfqfsfwfmwcfrkzuzokufmffffffcfffqfzfoffonfnfffkfffkwqifffsfifffzfofofffrfffflftkkfvfffbffuwffjtffmfffaffdlznffjllfqgfffffffffdmlfwlabfblcfdfwffffbfvmfrifwvvffffzffbfafnsffantfrkffzffffffifffrwacfrffffsdfffkffffooaffqckqbnbqqofvafffrtgffwsmfngffbzfffgffofnflfffvrffffmjjkfvfcfccfqfjfnf"], ["NO"]], [["xxxxxxxxxxfxxxxxxxxxxxxxxxxxxxxxxxxxxxrxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxexxxxmxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxexxxxxxxxixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxpxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxaxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxsxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxhrxxnxxxxxxxxxxxxxxxxtxxxxxxxxxx"], ["YES", "axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbxxxxxbxxxxxexxxxxexfxxxxxhxxxixmxxxxxxxxxnxxxxxxxxxxxxxoxxxoxoxxxpxxxxxxxxxxxxxrxxxxxrxxxxxxxxxsxtxxxtxxxxxtxxxxxxxuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxzxxxx"]], [["vtvzvlvlzvrtevdvvvsvjyvwrwwjhovvtotvkvvvvvovvewlvrvvfsvvvvnvfcsvvvtcrmckvvvztvvlvvdyfvcylvhvvcvvvvrvhwvryvhmvvcnsozusvltocvvywvvsvvvdocoftvkvvzvvtnvcmevyvhvhvlovvvvlvvvvtdjcvvvyvvurvuovusvvwvrvtvvfvmvvvmnycnvmvovuzvzvvvjvvvvnvvdrvvcrrvfvzujvyvtmrucvvvcjuvrvvtukvvvlvrkhvvsvjvftvzvmvvunsweuzcvvvfrvrwhyvdjerltlvcvvzednvyvjkvktvvesovvvmkvvnvzvjvcvfwvzhfkvvvuvvduovvmevkvhvuvmnvnvvvvvuvvlfjtjmdvceslvmevvvjvvkvvkjnvfyseevmvlvzvvvvvfdvleuvvlvvyvmrmvvfsevovhzdrru"], ["NO"]], [["mmmmmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmummmmmummmmmmmmmmmmmmmsmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmmmmmmsmmmmmmmmmmmmmmmmrummmmmmmmmmmmmmmmmmmmmmmmmmmmmsmsmmmmmmmrmmmmmmmmmmmmmmmmmmrmmmmmmcmmsmmmmmmmmrmmmmmmmmmmmmmmmmmmmmmmummmmmmcmmmmmmmmmmmmmmmmmmmcmmmmmmmrmmmmmmmmmmcmmmmmrurmmmmmmmmmmmmmummmmmmmmmmmummmmmmsmmmmrmmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmummsmmmummmmmmmmmrmmmmmmmmmmmmummummrmmmmmmmmmmmmmmmmmmmrmrmmmmmmmmmmmmmmummmmmmmmmmmmmsmmmmmmmummmmmmmmmmmmmmmcmmmmmmmmmmmmmmmmmmmmmm"], ["YES", "cmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmcmmmmmmmmmcmmmmmcmmmmmcmmmmmrmrmmmmmrmmmrmrmmmmmmmmmrmmmmmmmmmmmmmrmmmrmrmmmrmmmmmmmmmmmmmrmmmmmrmmmmmmmmmsmsmmmsmmmmmsmmmmmmmsmmmmmsmmmmmsmmmsmmmmmsmmmmmmmsmmmummmmmmmummmmmmmmmumummmmmmmmmumummmmmummmummmmmummmmmmmummmumummmummmmmmm"]], [["z"], ["YES", "z"]]]}, {"problem_id": "98A", "pseudocode_lines": ["let st be a string", "let temp, bst be strings", "create a set of strings by name v", "let rl be a function that accepts string st and returns a string value", "    the character value of c is equal to st[0]", "    st[0] is equal to st[1]", "    st[1] is equal to st[2]", "    st[2] is equal to st[3]", "    st[3] is equal to c", "    return the value of st", "end of the block", "let ru be a function that accepts string st and returns a string value", "    the character value of temp is equal to st[4]", "    st[4] is equal to st[0]", "    st[0] is equal to st[5]", "    st[5] is equal to st[2]", "    st[2] is equal to temp", "    return the value of st", "end of the block", "define the main function", "    read st", "    sort the values of st from beginning to end", "    do", "        temp is equal to st", "        bst is equal to temp", "        for integer iter = 1 to 2000 inclusive", "            if rand() modulo 2", "                temp is equal to rl(temp)", "            else do the following", "                temp is equal to ru(temp)", "            if bst is greater than temp , bst is equal to temp", "        end of the block", "        insert bst into v", "    while next_permutation of st from beginning to end", "    print length of v and newline", "    read a character", "    read a character", "    return to indicate successful execution", "end of the block"], "code_lines": ["string st;", "string temp, bst;", "set<string> v;", "string rl(string st) {", "    char c = st[0];", "    st[0] = st[1];", "    st[1] = st[2];", "    st[2] = st[3];", "    st[3] = c;", "    return st;", "}", "string ru(string st) {", "    char temp = st[4];", "    st[4] = st[0];", "    st[0] = st[5];", "    st[5] = st[2];", "    st[2] = temp;", "    return st;", "}", "int main() {", "    cin >> st;", "    sort(st.begin(), st.end());", "    do {", "        temp = st;", "        bst = temp;", "        for (int iter = 1; iter <= 2000; iter++) {", "            if (rand() % 2)", "                temp = rl(temp);", "            else", "                temp = ru(temp);", "            if (bst > temp) bst = temp;", "        }", "        v.insert(bst);", "    } while (next_permutation(st.begin(), st.end()));", "    cout << v.size() << endl;", "    cin.get();", "    cin.get();", "    return 0;", "}"], "testcases": [[["YYYYYY"], ["1"]], [["BOOOOB"], ["2"]], [["ROYGBV"], ["30"]], [["RRRRRR"], ["1"]], [["BOOOOO"], ["1"]], [["GOGGVG"], ["2"]], [["GRBYVO"], ["30"]], [["BYOVRR"], ["15"]], [["VOVRBV"], ["5"]], [["GVGBVO"], ["8"]], [["BOBGBB"], ["2"]], [["OOYYBY"], ["3"]], [["VVRVVV"], ["1"]], [["YBBVVY"], ["6"]], [["GYYGGG"], ["2"]], [["BRRBRB"], ["2"]], [["OOOOOO"], ["1"]], [["OVBRYG"], ["30"]], [["VOBYGO"], ["15"]], [["VRRYGR"], ["5"]], [["VOBVYB"], ["8"]], [["YYYYRB"], ["2"]], [["RYYYVV"], ["3"]], [["YYYYYG"], ["1"]], [["OBORBR"], ["6"]], [["RRRGRG"], ["2"]], [["VYYYVV"], ["2"]], [["YYYYYY"], ["1"]], [["YROVBG"], ["30"]], [["RYGOBG"], ["15"]], [["BGRGGV"], ["5"]], [["BVRYBV"], ["8"]], [["RRBYRR"], ["2"]], [["GGGYYB"], ["3"]], [["BBBBBY"], ["1"]], [["RRYYOO"], ["6"]], [["YYYRRY"], ["2"]], [["OGGOOG"], ["2"]], [["GYYBRO"], ["15"]], [["VORBOR"], ["8"]], [["RRRGGB"], ["3"]], [["BBOOYY"], ["6"]], [["YYBBOO"], ["6"]], [["OBRRYY"], ["8"]], [["ROYYGG"], ["8"]], [["RRGGYY"], ["6"]], [["RROOYY"], ["6"]], [["RRYOGB"], ["15"]]]}, {"problem_id": "98A", "pseudocode_lines": ["create const int MAXN = 5005", "declare izq taking in string c and returning string", "    create string temp = c", "    set temp[0] to c[3]", "    set temp[1] to c[5]", "    set temp[3] to c[1]", "    set temp[5] to c[0]", "    return temp", "end of the block", "declare abajo taking in string c and returning string", "    make string temp = c", "    for i = 2 to 5 exclusive, swap values of temp[i] and temp[i + 1]", "    return temp", "end of the block", "declare last taking in string c and returning string", "    make string ans = c", "    for i = 0 to 4 exclusive", "        for j = 0 to 4 exclusive", "            for k = 0 to 4 exclusive", "                set ans to max of ans and c", "                set c to izq(c)", "            end of the block", "            set c to abajo(c)", "        end of the block", "        set c to izq(c)", "    end of the block", "    return ans", "end of the block", "define the main function", "    make string color", "    read color", "    sort color", "    make string set ans", "    do insert last(color) into ans while next_permutation(color.begin(), color.end()) returns true", "    show ans.size()", "    return to indicate successful execution", "end of the block"], "code_lines": ["int const MAXN = 5005;", "string izq(string c) {", "    string temp = c;", "    temp[0] = c[3];", "    temp[1] = c[5];", "    temp[3] = c[1];", "    temp[5] = c[0];", "    return temp;", "}", "string abajo(string c) {", "    string temp = c;", "    for (int i = 2; i < 5; ++i) swap(temp[i], temp[i + 1]);", "    return temp;", "}", "string last(string c) {", "    string ans = c;", "    for (int i = 0; i < 4; ++i) {", "        for (int j = 0; j < 4; ++j) {", "            for (int k = 0; k < 4; ++k) {", "                ans = max(ans, c);", "                c = izq(c);", "            }", "            c = abajo(c);", "        }", "        c = izq(c);", "    }", "    return ans;", "}", "int main() {", "    string color;", "    cin >> color;", "    sort(color.begin(), color.end());", "    set<string> ans;", "    do { ans.insert(last(color)); } while (next_permutation(color.begin(), color.end()));", "    cout << ans.size() << '\\n';", "    return 0;", "}"], "testcases": [[["YYYYYY"], ["1"]], [["BOOOOB"], ["2"]], [["ROYGBV"], ["30"]], [["RRRRRR"], ["1"]], [["BOOOOO"], ["1"]], [["GOGGVG"], ["2"]], [["GRBYVO"], ["30"]], [["BYOVRR"], ["15"]], [["VOVRBV"], ["5"]], [["GVGBVO"], ["8"]], [["BOBGBB"], ["2"]], [["OOYYBY"], ["3"]], [["VVRVVV"], ["1"]], [["YBBVVY"], ["6"]], [["GYYGGG"], ["2"]], [["BRRBRB"], ["2"]], [["OOOOOO"], ["1"]], [["OVBRYG"], ["30"]], [["VOBYGO"], ["15"]], [["VRRYGR"], ["5"]], [["VOBVYB"], ["8"]], [["YYYYRB"], ["2"]], [["RYYYVV"], ["3"]], [["YYYYYG"], ["1"]], [["OBORBR"], ["6"]], [["RRRGRG"], ["2"]], [["VYYYVV"], ["2"]], [["YYYYYY"], ["1"]], [["YROVBG"], ["30"]], [["RYGOBG"], ["15"]], [["BGRGGV"], ["5"]], [["BVRYBV"], ["8"]], [["RRBYRR"], ["2"]], [["GGGYYB"], ["3"]], [["BBBBBY"], ["1"]], [["RRYYOO"], ["6"]], [["YYYRRY"], ["2"]], [["OGGOOG"], ["2"]], [["GYYBRO"], ["15"]], [["VORBOR"], ["8"]], [["RRRGGB"], ["3"]], [["BBOOYY"], ["6"]], [["YYBBOO"], ["6"]], [["OBRRYY"], ["8"]], [["ROYYGG"], ["8"]], [["RRGGYY"], ["6"]], [["RROOYY"], ["6"]], [["RRYOGB"], ["15"]]]}, {"problem_id": "98A", "pseudocode_lines": ["define the main function", "    create string s", "    read s", "    create set<string> ss", "    sort s", "    do", "        create string m = s", "        create vector<string> v", "        for i = 0 to 3 exclusive do push s.substr(2 * i, 2) onto v", "        for i = 0 to 4 exclusive", "            for i = 0 to 4 exclusive", "                for i = 0 to 4 exclusive", "                    create string str = v[0] + v[1] + v[2]", "                    set m to min of m and str", "                    swap v[1] and v[2]", "                    swap v[2][0] and v[2][1]", "                end of the block", "                swap v[0] and v[1]", "                swap v[0][0] and v[0][1]", "            end of the block", "            swap v[0] and v[2]", "            swap v[2][0] and v[2][1]", "        end of the block", "        insert m into ss", "    while next_permutation(s.begin(), s.end())", "    print ss size", "end of the block"], "code_lines": ["int main() {", "    string s;", "    cin >> s;", "    set<string> ss;", "    sort(s.begin(), s.end());", "    do {", "        string m = s;", "        vector<string> v;", "        for (int i = 0; i < 3; i++) { v.push_back(s.substr(2 * i, 2)); }", "        for (int i = 0; i < 4; i++) {", "            for (int i = 0; i < 4; i++) {", "                for (int i = 0; i < 4; i++) {", "                    string str = v[0] + v[1] + v[2];", "                    m = min(m, str);", "                    swap(v[1], v[2]);", "                    swap(v[2][0], v[2][1]);", "                }", "                swap(v[0], v[1]);", "                swap(v[0][0], v[0][1]);", "            }", "            swap(v[0], v[2]);", "            swap(v[2][0], v[2][1]);", "        }", "        ss.insert(m);", "    } while (next_permutation(s.begin(), s.end()));", "    cout << ss.size() << \"\\n\";", "}"], "testcases": [[["YYYYYY"], ["1"]], [["BOOOOB"], ["2"]], [["ROYGBV"], ["30"]], [["RRRRRR"], ["1"]], [["BOOOOO"], ["1"]], [["GOGGVG"], ["2"]], [["GRBYVO"], ["30"]], [["BYOVRR"], ["15"]], [["VOVRBV"], ["5"]], [["GVGBVO"], ["8"]], [["BOBGBB"], ["2"]], [["OOYYBY"], ["3"]], [["VVRVVV"], ["1"]], [["YBBVVY"], ["6"]], [["GYYGGG"], ["2"]], [["BRRBRB"], ["2"]], [["OOOOOO"], ["1"]], [["OVBRYG"], ["30"]], [["VOBYGO"], ["15"]], [["VRRYGR"], ["5"]], [["VOBVYB"], ["8"]], [["YYYYRB"], ["2"]], [["RYYYVV"], ["3"]], [["YYYYYG"], ["1"]], [["OBORBR"], ["6"]], [["RRRGRG"], ["2"]], [["VYYYVV"], ["2"]], [["YYYYYY"], ["1"]], [["YROVBG"], ["30"]], [["RYGOBG"], ["15"]], [["BGRGGV"], ["5"]], [["BVRYBV"], ["8"]], [["RRBYRR"], ["2"]], [["GGGYYB"], ["3"]], [["BBBBBY"], ["1"]], [["RRYYOO"], ["6"]], [["YYYRRY"], ["2"]], [["OGGOOG"], ["2"]], [["GYYBRO"], ["15"]], [["VORBOR"], ["8"]], [["RRRGGB"], ["3"]], [["BBOOYY"], ["6"]], [["YYBBOO"], ["6"]], [["OBRRYY"], ["8"]], [["ROYYGG"], ["8"]], [["RRGGYY"], ["6"]], [["RROOYY"], ["6"]], [["RRYOGB"], ["15"]]]}, {"problem_id": "98A", "pseudocode_lines": ["create constant int N = 2e5 + 5", "create string s", "create queue<string> q", "create map mp of string to int", "in function bfs taking string s", "    mp[s] = true", "    push s onto q", "    while q is not empty", "        create string u = front of q, v1, v2, v3", "        pop q", "        v1 = v2 = v3 = u", "        v1[0] = u[3], v1[1] = u[0], v1[2] = u[1], v1[3] = u[2]", "        v2[0] = u[4], v2[5] = u[0], v2[2] = u[5], v2[4] = u[2]", "        v3[5] = u[1], v3[3] = u[5], v3[4] = u[3], v3[1] = u[4]", "        if not mp[v1] then mp[v1] = true, push v1 onto q", "        if not mp[v2] then mp[v2] = true, push v2 onto q", "        if not mp[v3] then mp[v3] = true, push v3 onto q", "    end of the block", "end of the block", "define the main function", "    read s", "    create int res = 0", "    sort s", "    do", "        if mp[s] then continue", "        add 1 to res", "        call bfs on s", "    while next_permutation(s.begin(), s.end())", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["const int N = 2e5 + 5;", "string s;", "queue<string> q;", "map<string, int> mp;", "void bfs(string s) {", "    mp[s] = true;", "    q.push(s);", "    while (!q.empty()) {", "        string u = q.front(), v1, v2, v3;", "        q.pop();", "        v1 = v2 = v3 = u;", "        v1[0] = u[3], v1[1] = u[0], v1[2] = u[1], v1[3] = u[2];", "        v2[0] = u[4], v2[5] = u[0], v2[2] = u[5], v2[4] = u[2];", "        v3[5] = u[1], v3[3] = u[5], v3[4] = u[3], v3[1] = u[4];", "        if (!mp[v1]) mp[v1] = true, q.push(v1);", "        if (!mp[v2]) mp[v2] = true, q.push(v2);", "        if (!mp[v3]) mp[v3] = true, q.push(v3);", "    }", "}", "int main() {", "    cin >> s;", "    int res = 0;", "    sort(s.begin(), s.end());", "    do {", "        if (mp[s]) continue;", "        res++;", "        bfs(s);", "    } while (next_permutation(s.begin(), s.end()));", "    cout << res << '\\n';", "    return 0;", "}"], "testcases": [[["YYYYYY"], ["1"]], [["BOOOOB"], ["2"]], [["ROYGBV"], ["30"]], [["RRRRRR"], ["1"]], [["BOOOOO"], ["1"]], [["GOGGVG"], ["2"]], [["GRBYVO"], ["30"]], [["BYOVRR"], ["15"]], [["VOVRBV"], ["5"]], [["GVGBVO"], ["8"]], [["BOBGBB"], ["2"]], [["OOYYBY"], ["3"]], [["VVRVVV"], ["1"]], [["YBBVVY"], ["6"]], [["GYYGGG"], ["2"]], [["BRRBRB"], ["2"]], [["OOOOOO"], ["1"]], [["OVBRYG"], ["30"]], [["VOBYGO"], ["15"]], [["VRRYGR"], ["5"]], [["VOBVYB"], ["8"]], [["YYYYRB"], ["2"]], [["RYYYVV"], ["3"]], [["YYYYYG"], ["1"]], [["OBORBR"], ["6"]], [["RRRGRG"], ["2"]], [["VYYYVV"], ["2"]], [["YYYYYY"], ["1"]], [["YROVBG"], ["30"]], [["RYGOBG"], ["15"]], [["BGRGGV"], ["5"]], [["BVRYBV"], ["8"]], [["RRBYRR"], ["2"]], [["GGGYYB"], ["3"]], [["BBBBBY"], ["1"]], [["RRYYOO"], ["6"]], [["YYYRRY"], ["2"]], [["OGGOOG"], ["2"]], [["GYYBRO"], ["15"]], [["VORBOR"], ["8"]], [["RRRGGB"], ["3"]], [["BBOOYY"], ["6"]], [["YYBBOO"], ["6"]], [["OBRRYY"], ["8"]], [["ROYYGG"], ["8"]], [["RRGGYY"], ["6"]], [["RROOYY"], ["6"]], [["RRYOGB"], ["15"]]]}, {"problem_id": "98A", "pseudocode_lines": ["x,res=int", "t=map from string to bool", "s,r=string", "define the main function", "    read s", "    sort s", "    do", "        if not t[s]", "            increment res", "            r=s[0]", "            append s[1] to r", "            append s[2] to r", "            append s[3] to r", "            append s[4] to r", "            append s[5] to r", "            t[r]=true", "            r=s[0]", "            append s[2] to r", "            append s[3] to r", "            append s[4] to r", "            append s[1] to r", "            append s[5] to r", "            t[r]=true", "            r=s[0]", "            append s[3] to r", "            append s[4] to r", "            append s[1] to r", "            append s[2] to r", "            append s[5] to r", "            t[r]=true", "            r=s[0]", "            append s[4] to r", "            append s[1] to r", "            append s[2] to r", "            append s[3] to r", "            append s[5] to r", "            t[r]=true", "            r=s[5]", "            append s[4] to r", "            append s[3] to r", "            append s[2] to r", "            append s[1] to r", "            append s[0] to r", "            t[r]=true", "            r=s[5]", "            append s[1] to r", "            append s[4] to r", "            append s[3] to r", "            append s[2] to r", "            append s[0] to r", "            t[r]=true", "            r=s[5]", "            append s[2] to r", "            append s[1] to r", "            append s[4] to r", "            append s[3] to r", "            append s[0] to r", "            t[r]=true", "            r=s[5]", "            append s[3] to r", "            append s[2] to r", "            append s[1] to r", "            append s[4] to r", "            append s[0] to r", "            t[r]=true", "            r=s[1]", "            append s[5] to r", "            append s[2] to r", "            append s[0] to r", "            append s[4] to r", "            append s[3] to r", "            t[r]=true", "            r=s[1]", "            append s[2] to r", "            append s[0] to r", "            append s[4] to r", "            append s[5] to r", "            append s[3] to r", "            t[r]=true", "            r=s[1]", "            append s[0] to r", "            append s[4] to r", "            append s[5] to r", "            append s[2] to r", "            append s[3] to r", "            t[r]=true", "            r=s[1]", "            append s[4] to r", "            append s[5] to r", "            append s[2] to r", "            append s[0] to r", "            append s[3] to r", "            t[r]=true", "            r=s[3]", "            append s[4] to r", "            append s[0] to r", "            append s[2] to r", "            append s[5] to r", "            append s[1] to r", "            t[r]=true", "            r=s[3]", "            append s[5] to r", "            append s[4] to r", "            append s[0] to r", "            append s[2] to r", "            append s[1] to r", "            t[r]=true", "            r=s[3]", "            append s[2] to r", "            append s[5] to r", "            append s[4] to r", "            append s[0] to r", "            append s[1] to r", "            t[r]=true", "            r=s[3]", "            append s[0] to r", "            append s[2] to r", "            append s[5] to r", "            append s[4] to r", "            append s[1] to r", "            t[r]=true", "            r=s[2]", "            append s[3] to r", "            append s[0] to r", "            append s[1] to r", "            append s[5] to r", "            append s[4] to r", "            t[r]=true", "            r=s[2]", "            append s[5] to r", "            append s[3] to r", "            append s[0] to r", "            append s[1] to r", "            append s[4] to r", "            t[r]=true", "            r=s[2]", "            append s[1] to r", "            append s[5] to r", "            append s[3] to r", "            append s[0] to r", "            append s[4] to r", "            t[r]=true", "            r=s[2]", "            append s[0] to r", "            append s[1] to r", "            append s[5] to r", "            append s[3] to r", "            append s[4] to r", "            t[r]=true", "            r=s[4]", "            append s[5] to r", "            append s[1] to r", "            append s[0] to r", "            append s[3] to r", "            append s[2] to r", "            t[r]=true", "            r=s[4]", "            append s[3] to r", "            append s[5] to r", "            append s[1] to r", "            append s[0] to r", "            append s[2] to r", "            t[r]=true", "            r=s[4]", "            append s[0] to r", "            append s[3] to r", "            append s[5] to r", "            append s[1] to r", "            append s[2] to r", "            t[r]=true", "            r=s[4]", "            append s[1] to r", "            append s[0] to r", "            append s[3] to r", "            append s[5] to r", "            append s[2] to r", "            t[r]=true", "        end of the block", "    while next permutation of s", "    print res", "    return to indicate successful execution", "end of the block"], "code_lines": ["int x, res;", "map<string, bool> t;", "string s, r;", "int main() {", "    cin >> s;", "    sort(s.begin(), s.end());", "    do {", "        if (!t[s]) {", "            res++;", "            r = s[0];", "            r += s[1];", "            r += s[2];", "            r += s[3];", "            r += s[4];", "            r += s[5];", "            t[r] = true;", "            r = s[0];", "            r += s[2];", "            r += s[3];", "            r += s[4];", "            r += s[1];", "            r += s[5];", "            t[r] = true;", "            r = s[0];", "            r += s[3];", "            r += s[4];", "            r += s[1];", "            r += s[2];", "            r += s[5];", "            t[r] = true;", "            r = s[0];", "            r += s[4];", "            r += s[1];", "            r += s[2];", "            r += s[3];", "            r += s[5];", "            t[r] = true;", "            r = s[5];", "            r += s[4];", "            r += s[3];", "            r += s[2];", "            r += s[1];", "            r += s[0];", "            t[r] = true;", "            r = s[5];", "            r += s[1];", "            r += s[4];", "            r += s[3];", "            r += s[2];", "            r += s[0];", "            t[r] = true;", "            r = s[5];", "            r += s[2];", "            r += s[1];", "            r += s[4];", "            r += s[3];", "            r += s[0];", "            t[r] = true;", "            r = s[5];", "            r += s[3];", "            r += s[2];", "            r += s[1];", "            r += s[4];", "            r += s[0];", "            t[r] = true;", "            r = s[1];", "            r += s[5];", "            r += s[2];", "            r += s[0];", "            r += s[4];", "            r += s[3];", "            t[r] = true;", "            r = s[1];", "            r += s[2];", "            r += s[0];", "            r += s[4];", "            r += s[5];", "            r += s[3];", "            t[r] = true;", "            r = s[1];", "            r += s[0];", "            r += s[4];", "            r += s[5];", "            r += s[2];", "            r += s[3];", "            t[r] = true;", "            r = s[1];", "            r += s[4];", "            r += s[5];", "            r += s[2];", "            r += s[0];", "            r += s[3];", "            t[r] = true;", "            r = s[3];", "            r += s[4];", "            r += s[0];", "            r += s[2];", "            r += s[5];", "            r += s[1];", "            t[r] = true;", "            r = s[3];", "            r += s[5];", "            r += s[4];", "            r += s[0];", "            r += s[2];", "            r += s[1];", "            t[r] = true;", "            r = s[3];", "            r += s[2];", "            r += s[5];", "            r += s[4];", "            r += s[0];", "            r += s[1];", "            t[r] = true;", "            r = s[3];", "            r += s[0];", "            r += s[2];", "            r += s[5];", "            r += s[4];", "            r += s[1];", "            t[r] = true;", "            r = s[2];", "            r += s[3];", "            r += s[0];", "            r += s[1];", "            r += s[5];", "            r += s[4];", "            t[r] = true;", "            r = s[2];", "            r += s[5];", "            r += s[3];", "            r += s[0];", "            r += s[1];", "            r += s[4];", "            t[r] = true;", "            r = s[2];", "            r += s[1];", "            r += s[5];", "            r += s[3];", "            r += s[0];", "            r += s[4];", "            t[r] = true;", "            r = s[2];", "            r += s[0];", "            r += s[1];", "            r += s[5];", "            r += s[3];", "            r += s[4];", "            t[r] = true;", "            r = s[4];", "            r += s[5];", "            r += s[1];", "            r += s[0];", "            r += s[3];", "            r += s[2];", "            t[r] = true;", "            r = s[4];", "            r += s[3];", "            r += s[5];", "            r += s[1];", "            r += s[0];", "            r += s[2];", "            t[r] = true;", "            r = s[4];", "            r += s[0];", "            r += s[3];", "            r += s[5];", "            r += s[1];", "            r += s[2];", "            t[r] = true;", "            r = s[4];", "            r += s[1];", "            r += s[0];", "            r += s[3];", "            r += s[5];", "            r += s[2];", "            t[r] = true;", "        }", "    } while (next_permutation(s.begin(), s.end()));", "    cout << res << endl;", "    return 0;", "}"], "testcases": [[["YYYYYY"], ["1"]], [["BOOOOB"], ["2"]], [["ROYGBV"], ["30"]], [["RRRRRR"], ["1"]], [["BOOOOO"], ["1"]], [["GOGGVG"], ["2"]], [["GRBYVO"], ["30"]], [["BYOVRR"], ["15"]], [["VOVRBV"], ["5"]], [["GVGBVO"], ["8"]], [["BOBGBB"], ["2"]], [["OOYYBY"], ["3"]], [["VVRVVV"], ["1"]], [["YBBVVY"], ["6"]], [["GYYGGG"], ["2"]], [["BRRBRB"], ["2"]], [["OOOOOO"], ["1"]], [["OVBRYG"], ["30"]], [["VOBYGO"], ["15"]], [["VRRYGR"], ["5"]], [["VOBVYB"], ["8"]], [["YYYYRB"], ["2"]], [["RYYYVV"], ["3"]], [["YYYYYG"], ["1"]], [["OBORBR"], ["6"]], [["RRRGRG"], ["2"]], [["VYYYVV"], ["2"]], [["YYYYYY"], ["1"]], [["YROVBG"], ["30"]], [["RYGOBG"], ["15"]], [["BGRGGV"], ["5"]], [["BVRYBV"], ["8"]], [["RRBYRR"], ["2"]], [["GGGYYB"], ["3"]], [["BBBBBY"], ["1"]], [["RRYYOO"], ["6"]], [["YYYRRY"], ["2"]], [["OGGOOG"], ["2"]], [["GYYBRO"], ["15"]], [["VORBOR"], ["8"]], [["RRRGGB"], ["3"]], [["BBOOYY"], ["6"]], [["YYBBOO"], ["6"]], [["OBRRYY"], ["8"]], [["ROYYGG"], ["8"]], [["RRGGYY"], ["6"]], [["RROOYY"], ["6"]], [["RRYOGB"], ["15"]]]}, {"problem_id": "98A", "pseudocode_lines": ["new char array called colors filled with 'R', 'O', 'Y', 'G', 'B', 'V'", "declare vector of integers called v", "declare new array of integers tedad with size 300", "define the main function", "    declare string variable with name s", "    read s from the user input", "    for integer i = 0 to length of s exclusive, increment tedad[s[i]]", "    create new vector of integers v", "    for i from 0 to 6 exclusive", "        if tedad[color[i]] != 0, add tedad[color[i]] after the last element of v", "    sort v", "    if length of v = 1", "        print 1", "    else if length of v = 2", "        if v[0] is equal to 1", "            print 1", "        else", "            print 2 to the standard output", "    else if length of v is equal to 3", "        if v[0] = 1", "            if v[1] is equal to 1", "                print 2", "            else", "                print 3", "        else", "            print 6 to the stdout", "    else if length of v is equal to 4", "        if v[3] = 3", "            print 5 to the standard output", "        else if v[3] = 2", "            print 8 to the output", "    else if length of v = 5", "        print 15", "    else if length of v is equal to 6", "        print 30", "    return to indicate successful execution", "end of the block"], "code_lines": ["char color[6] = {'R', 'O', 'Y', 'G', 'B', 'V'};", "vector<int> v;", "int tedad[300];", "int main() {", "    string s;", "    cin >> s;", "    for (int i = 0; i < s.length(); i++) tedad[s[i]]++;", "    vector<int> v;", "    for (int i = 0; i < 6; i++)", "        if (tedad[color[i]]) v.push_back(tedad[color[i]]);", "    sort(v.begin(), v.end());", "    if (v.size() == 1)", "        cout << 1 << endl;", "    else if (v.size() == 2) {", "        if (v[0] == 1)", "            cout << 1 << endl;", "        else", "            cout << 2 << endl;", "    } else if (v.size() == 3) {", "        if (v[0] == 1) {", "            if (v[1] == 1)", "                cout << 2 << endl;", "            else", "                cout << 3 << endl;", "        } else", "            cout << 6 << endl;", "    } else if (v.size() == 4) {", "        if (v[3] == 3)", "            cout << 5 << endl;", "        else if (v[3] == 2)", "            cout << 8 << endl;", "    } else if (v.size() == 5)", "        cout << 15 << endl;", "    else if (v.size() == 6)", "        cout << 30 << endl;", "    return 0;", "}"], "testcases": [[["YYYYYY"], ["1"]], [["BOOOOB"], ["2"]], [["ROYGBV"], ["30"]], [["RRRRRR"], ["1"]], [["BOOOOO"], ["1"]], [["GOGGVG"], ["2"]], [["GRBYVO"], ["30"]], [["BYOVRR"], ["15"]], [["VOVRBV"], ["5"]], [["GVGBVO"], ["8"]], [["BOBGBB"], ["2"]], [["OOYYBY"], ["3"]], [["VVRVVV"], ["1"]], [["YBBVVY"], ["6"]], [["GYYGGG"], ["2"]], [["BRRBRB"], ["2"]], [["OOOOOO"], ["1"]], [["OVBRYG"], ["30"]], [["VOBYGO"], ["15"]], [["VRRYGR"], ["5"]], [["VOBVYB"], ["8"]], [["YYYYRB"], ["2"]], [["RYYYVV"], ["3"]], [["YYYYYG"], ["1"]], [["OBORBR"], ["6"]], [["RRRGRG"], ["2"]], [["VYYYVV"], ["2"]], [["YYYYYY"], ["1"]], [["YROVBG"], ["30"]], [["RYGOBG"], ["15"]], [["BGRGGV"], ["5"]], [["BVRYBV"], ["8"]], [["RRBYRR"], ["2"]], [["GGGYYB"], ["3"]], [["BBBBBY"], ["1"]], [["RRYYOO"], ["6"]], [["YYYRRY"], ["2"]], [["OGGOOG"], ["2"]], [["GYYBRO"], ["15"]], [["VORBOR"], ["8"]], [["RRRGGB"], ["3"]], [["BBOOYY"], ["6"]], [["YYBBOO"], ["6"]], [["OBRRYY"], ["8"]], [["ROYYGG"], ["8"]], [["RRGGYY"], ["6"]], [["RROOYY"], ["6"]], [["RRYOGB"], ["15"]]]}]